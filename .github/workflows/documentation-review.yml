name: Strapi Documentation Style Review

on:
  # Temporarily disabled - uncomment to re-enable
  # pull_request:
  #   types: [opened, synchronize, reopened]
  #   paths:
  #     - 'docusaurus/docs/**/*.md'
  #     - 'docusaurus/docs/**/*.mdx'
  
  # Keep manual trigger for internal testing
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to validate'
        required: true
        type: string
      target_files:
        description: 'Specific files to validate (optional - leave empty to validate all changed files in the PR)'
        required: false
        type: string

jobs:
  validate-documentation:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          # Fetch more history for PR comparisons
          fetch-depth: 0

      - name: Get PR info and checkout PR branch
        if: github.event.inputs.pr_number
        run: |
          # Get PR information
          PR_INFO=$(curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                         -H "Accept: application/vnd.github.v3+json" \
                         "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.inputs.pr_number }}")
          
          # Extract branch name and head SHA
          BRANCH_NAME=$(echo "$PR_INFO" | jq -r '.head.ref')
          HEAD_SHA=$(echo "$PR_INFO" | jq -r '.head.sha')
          
          echo "PR #${{ github.event.inputs.pr_number }} branch: $BRANCH_NAME"
          echo "HEAD SHA: $HEAD_SHA"
          
          # Checkout the PR branch
          git fetch origin "$BRANCH_NAME"
          git checkout "$HEAD_SHA"
          
          echo "Successfully checked out PR branch"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'
          cache-dependency-path: 'docusaurus/yarn.lock'

      - name: Install dependencies
        run: |
          cd docusaurus
          yarn install

      - name: Run Strapi 12 Rules validation
        id: validation
        run: |
          cd docusaurus
          if [ -n "${{ github.event.inputs.target_files }}" ]; then
            echo "Validating specific files: ${{ github.event.inputs.target_files }}"
            node scripts/style-validation/validate-content-style.js --verbose ${{ github.event.inputs.target_files }}
          else
            echo "Detecting changed files in this PR..."
            
            # Get the base branch for comparison
            if [ "${{ github.event_name }}" = "pull_request" ]; then
              # For PR events, use a different approach
              echo "=== PR EVENT: Fetching base branch ==="
              git fetch origin ${{ github.event.pull_request.base.ref }}:refs/remotes/origin/${{ github.event.pull_request.base.ref }}
              BASE_SHA="origin/${{ github.event.pull_request.base.ref }}"
              HEAD_SHA="HEAD"
            else
              # For manual runs, compare with main
              BASE_SHA="origin/main"
              HEAD_SHA="HEAD"
              echo "=== MANUAL RUN: Using main comparison ==="
            fi
            
            echo "BASE_SHA: $BASE_SHA"
            echo "HEAD_SHA: $HEAD_SHA"
            echo "Comparing $BASE_SHA with $HEAD_SHA"
            
            # Debug: Show all changed files first
            echo "=== DEBUG: All changed files ==="
            git diff --name-only $BASE_SHA $HEAD_SHA
            
            echo "=== DEBUG: Files matching .md/.mdx ==="
            git diff --name-only $BASE_SHA $HEAD_SHA | grep -E '\.(md|mdx)$'
            
            echo "=== DEBUG: Files in docusaurus/docs/ ==="
            git diff --name-only $BASE_SHA $HEAD_SHA | grep -E '\.(md|mdx)$' | grep 'docusaurus/docs/'
            
            # Get changed .md/.mdx files
            CHANGED_FILES=$(git diff --name-only $BASE_SHA $HEAD_SHA | grep -E '\.(md|mdx)$' | grep 'docusaurus/docs/' || echo "")
            
            if [ -z "$CHANGED_FILES" ]; then
              echo "✅ No documentation files (.md/.mdx) were changed in this PR"
              echo "Skipping validation..."
              echo '{"summary":{"filesProcessed":0,"totalIssues":0,"criticalIssues":0},"issues":{"errors":[],"warnings":[],"suggestions":[]}}' > style-check-results.json
            else
              echo "📄 Changed documentation files:"
              echo "$CHANGED_FILES"
              
              # Convert to space-separated list and remove docusaurus/ prefix
              FILES_TO_CHECK=$(echo "$CHANGED_FILES" | sed 's|^docusaurus/||' | tr '\n' ' ')
              
              echo "🔍 Running validation on: $FILES_TO_CHECK"
              node scripts/style-validation/validate-content-style.js --verbose $FILES_TO_CHECK
            fi
          fi
        continue-on-error: true

      - name: Comment PR with results
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Get inputs safely
            const prNumber = '${{ github.event.inputs.pr_number }}' || '';
            const eventName = '${{ github.event_name }}';
            
            try {
              // Read validation results
              const resultsPath = 'docusaurus/style-check-results.json';
              
              if (!fs.existsSync(resultsPath)) {
                console.log('No results file found, validation may have failed');
                
                // Only try to comment if we're in a PR context or manual run with PR number
                if (eventName === 'pull_request') {
                  await github.rest.issues.createComment({
                    issue_number: context.issue.number,
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    body: '## ❌ Documentation Style Review\n\n' +
                          'Validation script failed to run. Please check the GitHub Action logs.\n\n' +
                          'This might be due to missing files or configuration issues.'
                  });
                } else if (prNumber) {
                  await github.rest.issues.createComment({
                    issue_number: parseInt(prNumber),
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    body: '## ❌ Documentation Style Review\n\n' +
                          'Validation script failed to run. Please check the GitHub Action logs.\n\n' +
                          'This might be due to missing files or configuration issues.'
                  });
                } else {
                  console.log('No results file found and no PR to comment on. Manual run completed.');
                }
                return;
              }

              const results = JSON.parse(fs.readFileSync(resultsPath, 'utf8'));
              
              // Generate comment
              let comment = '## 🎯 Strapi Documentation Style Review\n\n';
              comment += `*Based on Strapi's 12 Rules of Technical Writing*\n\n`;
              
              // Summary
              comment += '### 📊 Summary\n';
              comment += `- **Files checked:** ${results.summary.filesProcessed}\n`;
              comment += `- **Total issues:** ${results.summary.totalIssues}\n`;
              comment += `- **Critical errors:** ${results.issues.errors.length} 🚨\n`;
              comment += `- **Warnings:** ${results.issues.warnings.length} ⚠️\n`;
              comment += `- **Suggestions:** ${results.issues.suggestions.length} 💡\n\n`;
              
              if (results.summary.totalIssues === 0) {
                comment += '🎉 **Perfect!** Your documentation follows all 12 rules of technical writing.\n\n';
              } else {
                // Show critical errors
                if (results.issues.errors.length > 0) {
                  comment += '### 🚨 Critical Issues (must fix)\n\n';
                  results.issues.errors.slice(0, 5).forEach(error => {
                    const fileName = error.file.replace(/^.*\/docs\//, 'docs/');
                    comment += `**${fileName}:${error.line}**\n`;
                    comment += `- ${error.message}\n`;
                    if (error.suggestion) {
                      comment += `- 💡 *${error.suggestion}*\n`;
                    }
                    comment += '\n';
                  });
                  
                  if (results.issues.errors.length > 5) {
                    comment += `*... and ${results.issues.errors.length - 5} more critical issues*\n\n`;
                  }
                }
                
                // Show some warnings
                if (results.issues.warnings.length > 0) {
                  comment += '### ⚠️ Warnings (should address)\n\n';
                  results.issues.warnings.slice(0, 3).forEach(warning => {
                    const fileName = warning.file.replace(/^.*\/docs\//, 'docs/');
                    comment += `**${fileName}:${warning.line}** - ${warning.message}\n`;
                  });
                  
                  if (results.issues.warnings.length > 3) {
                    comment += `\n*... and ${results.issues.warnings.length - 3} more warnings*\n`;
                  }
                  comment += '\n';
                }
                
                // Show some suggestions
                if (results.issues.suggestions.length > 0) {
                  comment += '### 💡 Suggestions (improvements)\n\n';
                  results.issues.suggestions.slice(0, 2).forEach(suggestion => {
                    const fileName = suggestion.file.replace(/^.*\/docs\//, 'docs/');
                    comment += `**${fileName}:${suggestion.line}** - ${suggestion.message}\n`;
                  });
                  
                  if (results.issues.suggestions.length > 2) {
                    comment += `\n*... and ${results.issues.suggestions.length - 2} more suggestions*\n`;
                  }
                  comment += '\n';
                }
              }
              
              // Add footer
              comment += '---\n';
              comment += '*🤖 Automated review based on [Strapi\'s 12 Rules of Technical Writing](https://strapi.notion.site/12-Rules-of-Technical-Writing-c75e080e6b19432287b3dd61c2c9fa04)*\n';
              
              // Add trigger info for manual runs
              if (eventName === 'workflow_dispatch') {
                comment += `*🔧 Manually triggered${prNumber ? ` for PR #${prNumber}` : ''}*\n\n`;
              }
              
              // Post comment
              if (eventName === 'pull_request') {
                // Normal PR comment
                await github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: comment
                });
              } else if (prNumber) {
                // Manual run with PR number
                await github.rest.issues.createComment({
                  issue_number: parseInt(prNumber),
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: comment
                });
              } else {
                // Manual run without PR - just log
                console.log('Manual validation completed');
                console.log(comment);
              }
              
              // Set step output for potential failure
              if (results.issues.errors.length > 0) {
                core.setFailed(`Found ${results.issues.errors.length} critical errors that must be fixed.`);
              }
              
            } catch (error) {
              console.error('Error processing results:', error);
              
              // Only try to comment if we're in a PR context or manual run with PR number
              if (eventName === 'pull_request') {
                await github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: '## ❌ Documentation Style Review Failed\n\n' +
                        'There was an error running the style validation. Please check the GitHub Action logs.\n\n' +
                        `Error: ${error.message}`
                });
              } else if (prNumber) {
                await github.rest.issues.createComment({
                  issue_number: parseInt(prNumber),
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: '## ❌ Documentation Style Review Failed\n\n' +
                        'There was an error running the style validation. Please check the GitHub Action logs.\n\n' +
                        `Error: ${error.message}`
                });
              } else {
                console.log(`Manual validation failed: ${error.message}`);
              }
            }
