# Account billing & invoices
Source: https://docs-v4.strapi.io/cloud/account/account-billing

# Account billing & invoices 

Through the *Profile* page, accessible by clicking on your profile picture on the top right hand corner of the interface then clicking on **Profile**, you can access the [![Billing icon](/img/assets/icons/CreditCard.svg) *Billing*](#account-billing) and [![Invoices icon](/img/assets/icons/Invoice.svg) *Invoices*](#account-invoices) tabs.

## Account billing

The ![Billing icon](/img/assets/icons/CreditCard.svg) *Billing* tab displays and enables you to modify the billing details and payment method set for the account.

The *Payment method* section of the ![Billing icon](/img/assets/icons/CreditCard.svg) *Billing* tab allows you to manage the credit cards that can be used for the Strapi Cloud projects. The *Billing details* section requires to be filled in, at least for the mandatory fields, as this information will be the default billing details for all Strapi Cloud projects related to your account.

### Adding a new credit card

1. In the *Payment method* section of the ![Billing icon](/img/assets/icons/CreditCard.svg) *Billing* tab, click on the **Add card** button.
2. Fill in the following fields:

| Field name | Description |
| --- | --- |
| Card Number | Write the number of the credit card to add as payment method. |
| Expires | Write the expiration date of the credit card. |
| CVC | Write the 3-numbers code displayed at the back of the credit card. |

3. Click on the **Save** button.

:::tip
The first credit card to be added as payment method for the account will by default be the primary one. It is however possible to define another credit card as primary by clicking on the ![Menu icon](/img/assets/icons/more.svg) icon, then **Switch as primary**.
:::

### Deleting a credit card

To remove a credit card from the list of payment methods for the account:

1. Click on the ![Menu icon](/img/assets/icons/more.svg) icon of the credit card you wish to delete.
2. Click **Remove card**. The card is immediately deleted.

:::note
You cannot delete the primary card as at least one credit card must be available as payment method, and the primary card is by default that one. If the credit card you wish to delete is currently the primary card, you must first define another credit card as primary, then delete it.
:::

## Account invoices

The ![Invoices icon](/img/assets/icons/Invoice.svg) *Invoices* tab displays the complete list of invoices for all your Strapi Cloud projects.

:::strapi Invoices are also available per project.
In the *Settings > Invoices* tab of any project, you will find the invoices for that project only. Feel free to check the [dedicated documentation](/cloud/projects/settings#invoices).
:::



# Profile settings
Source: https://docs-v4.strapi.io/cloud/account/account-settings

# Profile settings

The *Profile* page enables you to manage your account details and preferences. It is accessible by clicking on your profile picture, on the top right hand corner of the interface, and **Profile**.

There are 3 tabs available in the *Profile* interface: ![General icon](/img/assets/icons/Faders.svg) [*General*](#general), ![Preferences icon](/img/assets/icons/Palette.svg) [*Preferences*](#preferences), ![Billing icon](/img/assets/icons/CreditCard.svg) *Billing* and ![Invoices icon](/img/assets/icons/Invoice.svg) Invoices (the last 2 are documented in the [Account billing details](/cloud/account/account-billing) section of this documentation).

## General

The ![General icon](/img/assets/icons/Faders.svg) *General* tab enables you to edit the following details for your account profile:

- Details: to see the name associated with your account.
- Connected accounts: to manage Google, GitHub and GitLab accounts connected with your Strapi Cloud account (see [Managing connected accounts](#managing-connected-accounts)).
- Delete account: to permanently delete your Strapi Cloud account (see [Deleting Strapi Cloud account](#deleting-strapi-cloud-account)).

### Managing connected accounts

You can connect a Google, GitLab and GitHub account to your Strapi Cloud account. The _Connected accounts_ section lists accounts that are currently connected to your Strapi Cloud account. From there you can also connect a new Google, GitLab and GitHub account if one is not already connected.

To connect a new Google, GitLab or GitHub account to your Strapi Cloud account, click on the **Connect account** button and follow the next steps on the corresponding website.

You can also click on the three dots button of a connected account and click on the "Manage on" button to manage your GitHub, GitLab or Google account directly on the corresponding website.

### Deleting Strapi Cloud account

You can delete your Strapi Cloud account, but it will be permanent and irreversible. All associated projects and their data will be deleted as well and the subscriptions for the projects will automatically be canceled.

1. In the *Delete account* section of the ![General icon](/img/assets/icons/Faders.svg) *General* tab, click on the **Delete account** button.
2. In the dialog, type `DELETE` in the textbox.
3. Confirm the deletion of your account by clicking on the **Delete** button.

## Preferences

The ![Preferences icon](/img/assets/icons/Palette.svg) *Preferences* tab enables you to choose the appearance of your Strapi Cloud dashboard: either the Light or Dark theme.



# Database
Source: https://docs-v4.strapi.io/cloud/advanced/database

# Database

Strapi Cloud provides a pre-configured PostgreSQL database by default. However, you can also configure it to utilize an external SQL database, if needed.

:::prerequisites
- A local Strapi project running on `v4.8.2+`.
- Credentials for external database.
- If using an existing database, the schema must match the Strapi project schema.
:::

:::caution
While it's possible to use an external database with Strapi Cloud, you should do it while keeping in mind the following considerations:
- Strapi Cloud already provides a managed database that is optimized for Strapi.
- Using an external database may result in unexpected behavior and/or performance issues (e.g., network latency may impact performance). For performance reasons, it's recommended to host your external database close to the region where your Strapi Cloud project is hosted. You can find where your Strapi Cloud project is hosted in your Project Settings (see [Project Settings > General > Selected Region](/cloud/projects/settings#general)).
- Strapi can't provide security or support with external databases used with Strapi Cloud.
:::

## Configuration

The project `./config/database.js` or `./config/database.ts` file must match the configuration found in the [environment variables in database configurations](https://docs.strapi.io/dev-docs/configurations/database#environment-variables-in-database-configurations) section.

Before pushing changes, add environment variables to the Strapi Cloud project:

1.  Log into Strapi Cloud and click on the corresponding project on the Projects page.
2.  Click on the **Settings** tab and choose **Variables** in the left menu.
3.  Add the following environment variables:

    | Variable                           | Value            |
    | ---------------------------------- | ---------------- |
    | `DATABASE_CLIENT`                  | your_db          |
    | `DATABASE_HOST`                    | your_db_host     |
    | `DATABASE_PORT`                    | your_db_port     |
    | `DATABASE_NAME`                    | your_db_name     |
    | `DATABASE_USERNAME`                | your_db_username |
    | `DATABASE_PASSWORD`                | your_db_password |
    | `DATABASE_SSL_REJECT_UNAUTHORIZED` | false            |
    | `DATABASE_SCHEMA`                  | public           |

4.  Click **Save**.

:::caution
To ensure a smooth deployment, it is recommended to not change the names of the environment variables.
:::

## Deployment

To deploy the project and utilize the external database, push the changes from earlier. This will trigger a rebuild and new deployment of the Strapi Cloud project.

Once the application finishes building, the project will use the external database.

## Reverting to the default database

To revert back to the default database, remove the previously added environment variables related to the external database from the Strapi Cloud project dashboard, and save. For the changes to take effect, you must redeploy the Strapi Cloud project.



# Email Provider
Source: https://docs-v4.strapi.io/cloud/advanced/email

# Email Provider

Strapi Cloud comes with a basic email provider out of the box. However, it can also be configured to utilize another email provider, if needed.

:::caution
Please be advised that Strapi are unable to provide support for third-party email providers.

:::

:::prerequisites

- A local Strapi project running on `v4.8.2+`.
- Credentials for another email provider (see [Strapi Market](https://market.strapi.io/providers)).

:::

## Configuration

Configuring another email provider for use with Strapi Cloud requires 3 steps:

1. Install the provider plugin in your local Strapi project.
2. Configure the provider in your local Strapi project.
3. Add environment variables to the Strapi Cloud project.

### Install the Provider Plugin

Using either `npm` or `yarn`, install the provider plugin in your local Strapi project as a package dependency by following the instructions in the respective entry for that provider in the [Marketplace](https://market.strapi.io/providers).

### Configure the Provider

In your Strapi project, create a `./config/env/production/plugins.js` or `./config/env/production/plugins.ts` file with the following content:

</Tabs>

:::caution
The file structure must match the above path exactly, or the configuration will not be applied to Strapi Cloud.
:::

Each provider will have different configuration settings available. Review the respective entry for that provider in the [Marketplace](https://market.strapi.io/providers).

**Example:**

</Tabs>
</TabItem>

</Tabs>
</TabItem>
</Tabs>

:::tip
Before pushing the above changes to GitHub, add environment variables to the Strapi Cloud project to prevent triggering a rebuild and new deployment of the project before the changes are complete.
:::

### Strapi Cloud Configuration

1. Log into Strapi Cloud and click on the corresponding project on the Projects page.
2. Click on the **Settings** tab and choose **Variables** in the left menu.
3. Add the required environment variables specific to the email provider.
4. Click **Save**.

**Example:**

</Tabs>

## Deployment

To deploy the project and utilize another party email provider, push the changes from earlier. This will trigger a rebuild and new deployment of the Strapi Cloud project.

Once the application finishes building, the project will use the new email provider.

:::strapi Custom Provider
If you want to create a custom email provider, please refer to the [Providers](/dev-docs/providers#creating-providers) documentation in the Developer Documentation.
:::



# Upload Provider
Source: https://docs-v4.strapi.io/cloud/advanced/upload

# Upload Provider

Strapi Cloud comes with a local upload provider out of the box. However, it can also be configured to utilize a third-party upload provider, if needed.

:::caution
Please be advised that Strapi are unable to provide support for third-party upload providers.
:::

:::prerequisites

- A local Strapi project running on `v4.8.2+`.
- Credentials for a third-party upload provider (see [Strapi Market](https://market.strapi.io/providers)).

:::

## Configuration

Configuring a third-party upload provider for use with Strapi Cloud requires 4 steps:

1. Install the provider plugin in your local Strapi project.
2. Configure the provider in your local Strapi project.
3. Configure the Security Middleware in your local Strapi project.
4. Add environment variables to the Strapi Cloud project.

### Install the Provider Plugin

Using either `npm` or `yarn`, install the provider plugin in your local Strapi project as a package dependency by following the instructions in the respective entry for that provider in the [Marketplace](https://market.strapi.io/providers).

### Configure the Provider

To configure a 3rd-party upload provider in your Strapi project, create or edit the plugins configuration file for your production environment `./config/env/production/plugins.js|ts` by adding upload configuration options as follows:

</Tabs>

:::caution
The file structure must match the above path exactly, or the configuration will not be applied to Strapi Cloud.
:::

Each provider will have different configuration settings available. Review the respective entry for that provider in the [Marketplace](https://market.strapi.io/providers).

**Example:**

</Tabs>
</TabItem>

</Tabs>
</TabItem>
</Tabs>

### Configure the Security Middleware

Due to the default settings in the Strapi Security Middleware you will need to modify the `contentSecurityPolicy` settings to properly see thumbnail previews in the Media Library.

To do this in your Strapi project:

1. Navigate to `./config/middleware.js` or `./config/middleware.ts` in your Strapi project.
2. Replace the default `strapi::security` string with the object provided by the upload provider.

**Example:**

</Tabs>
</TabItem>

</Tabs>
</TabItem>
</Tabs>

:::tip
Before pushing the above changes to GitHub, add environment variables to the Strapi Cloud project to prevent triggering a rebuild and new deployment of the project before the changes are complete.
:::

### Strapi Cloud Configuration

1. Log into Strapi Cloud and click on the corresponding project on the Projects page.
2. Click on the **Settings** tab and choose **Variables** in the left menu.
3. Add the required environment variables specific to the upload provider.
4. Click **Save**.

**Example:**

</Tabs>

## Deployment

To deploy the project and utilize the third-party upload provider, push the changes from earlier. This will trigger a rebuild and new deployment of the Strapi Cloud project.

Once the application finishes building, the project will use the new upload provider.

:::strapi Custom Provider
If you want to create a custom upload provider, please refer to the [Providers](/dev-docs/providers#creating-providers) documentation in the Developer Documentation.
:::



# Command Line Interface (CLI) <NewBadge />
Source: https://docs-v4.strapi.io/cloud/cli/cloud-cli

# Command Line Interface (CLI) 

Strapi Cloud comes with a Command Line Interface (CLI) which allows you to log in and out, and to deploy a local project without it having to be hosted on a remote git repository. The CLI works with both the `yarn` and `npm` package managers.

:::note
It is recommended to install Strapi locally only, which requires prefixing all of the following `strapi` commands with the package manager used for the project setup (e.g `npm run strapi help` or `yarn strapi help`) or a dedicated node package executor (e.g. `npx strapi help`).
:::

## strapi login

**Alias:** `strapi cloud:login`

Log in Strapi Cloud.

```bash
strapi login
```

This command automatically opens a browser window to first ask you to confirm that the codes displayed in both the browser window and the terminal are the same. Then you will be able to log into Strapi Cloud via Google, GitHub or GitLab. Once the browser window confirms successful login, it can be safely closed.

If the browser window doesn't automatically open, the terminal will display a clickable link as well as the code to enter manually.

## strapi deploy

**Alias:** `strapi cloud:deploy`

Deploy a new local project (< 100MB) in Strapi Cloud.

```bash
strapi deploy
```

This command must be used after the `login` one. It deploys a local Strapi project on Strapi Cloud, without having to host it on a remote git repository beforehand. The terminal will inform you when the project is successfully deployed on Strapi Cloud.

Once the project is first deployed on Strapi Cloud with the CLI, the `deploy` command can be reused to trigger a new deployment of the same project.

:::note
Once you deployed your project, if you visit the Strapi Cloud dashboard, you may see some limitations as well as impacts due to creating a Strapi Cloud project that is not in a remote repository and which was deployed with the CLI.

- Some areas in the dashboard that are usually reserved to display information about the git provider will be blank.
- Some buttons, such as the **Trigger deploy** button, will be greyed out and unclickable since, unless you have [connected a git repository to your Strapi Cloud project](/cloud/getting-started/deployment-cli#automatically-deploying-subsequent-changes).
:::

## strapi link 

**Alias:** `strapi cloud:link`

Links project in current folder to an existing project in Strapi Cloud.

```bash
strapi link
```

This command connects your local project in the current directory with an existing project on your Strapi Cloud account. You will be prompted to select the project you wish to link from a list of available projects hosted on Strapi Cloud.

## strapi projects 

**Alias:** `strapi cloud:projects`

Lists all Strapi Cloud projects associated with your account.

```bash
strapi projects
```

This command retrieves and displays a list of all projects hosted on your Strapi Cloud account.

## strapi logout

**Alias:** `strapi cloud:logout`

Log out of Strapi Cloud.

```bash
strapi logout
```

This command logs you out of Strapi Cloud. Once the `logout` command is run, a browser page will open and the terminal will display a confirmation message that you were successfully logged out. You will not be able to use the `deploy` command anymore.



# Caching & Performance
Source: https://docs-v4.strapi.io/cloud/getting-started/caching

# Caching & Performance

For Strapi Cloud applications with large amounts of cacheable content, such as images, videos, and other static assets, enabling CDN (Content Delivery Network) caching via the [`Cache-control` header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control) can help improve application performance.

CDN caching can help improve application performance in a few ways:

* **Reducing Latency**: Caching frequently accessed content on edge servers located closer to the end-users can reduce the time it takes to load content.
* **Offloading Origin Server**: By caching content on edge servers it can offload the origin server, reducing the load and allowing it to focus on delivering more dynamic content.
* **Handling Traffic Spikes**: Help handle traffic spikes by distributing the load across multiple edge servers. This can prevent the origin server from becoming overwhelmed during peak traffic times and ensures a consistent user experience.
* **Minimizing Round-Trips**: By serving content directly from the edge servers, this can reduce the time it takes to load content.
* **Improving Scalability**: Distributing content across multiple edge servers can improve scalability, making the application more reliable and responsive.

## Cache-Control Header in Strapi Cloud

Static sites deployed on Strapi Cloud include, by default, a `Cache-Control` header set to cache for 24 hours on CDN edge servers and 10 seconds in web browsers. This is done to ensure that the latest version of the site is always served to users.

Responses from dynamic apps served by Strapi Cloud are not cached by default. To enable caching, you must set the `Cache-Control` header in the app’s `HTTP` response functions.

</Tabs>



# Strapi Cloud fundamentals
Source: https://docs-v4.strapi.io/cloud/getting-started/cloud-fundamentals

# Strapi Cloud fundamentals

Before going any further into this Strapi Cloud documentation, we recommend you to acknowledge the main concepts below. They will help you to understand how Strapi Cloud works, and ensure a smooth Strapi Cloud experience.

- **Hosting Platform** <br/> Strapi Cloud is a hosting platform that allows to deploy already existing Strapi projects created with Strapi CMS (Content Management System). Strapi Cloud is *not* the SaaS (Software as a Service) version of Strapi CMS. Feel free to refer to the [Developer Documentation](https://docs.strapi.io/dev-docs/intro) and [User Guide](https://docs.strapi.io/user-docs/intro) to learn more about Strapi CMS.

- **Strapi Cloud Pricing Plans** <br/> As a Strapi Cloud user you have the choice between 3 tiers: Developer, Pro and Team. Depending on the tier, you have access to different functionalities, support and customization options (see [Pricing page](https://strapi.io/pricing-cloud) for more details). In this Strapi Cloud documentation, the , , and  badges can be displayed beside a section's title to indicate for which tier the feature is available.

- **Strapi CMS Enterprise features** <br/> Some of Strapi features, usually accessible via the Enterprise Edition of Strapi CMS, are included in some Strapi Cloud tiers (see [Pricing page](https://strapi.io/pricing-cloud) and [Information on billing & usage](/cloud/getting-started/usage-billing) for more details). These features, highlighted with an  badge, are documented in the [User Guide](https://docs.strapi.io/user-docs/intro) and the [Developer Documentation](https://docs.strapi.io/dev-docs/intro).

- **Types of Strapi Cloud users** <br/> There can be 2 types of users on a Strapi Cloud project: owners and maintainers. The owner is the one who has created the project and has therefore access to all features and options for the project. Maintainers are users who have been invited to contribute to an already created project by its owner. Maintainers, as documented in the [Collaboration](/cloud/projects/collaboration) page, cannot view and access all features and options from the Strapi Cloud dashboard.

- **Support** <br/> The level of support provided by the Strapi Support team depends on the Strapi Cloud tier you subscribed for. The Developer and Pro tiers include Basic support while the Team tier includes Standard support. Please refer to the [dedicated support article](https://support.strapi.io/support/solutions/articles/67000680833-what-is-supported-by-the-strapi-team#Not-Supported) for all details regarding support levels.



# with Cloud dashboard
Source: https://docs-v4.strapi.io/cloud/getting-started/deployment

# Project deployment with the Cloud dashboard 

    </Tabs>

5. Set up your Strapi Cloud project.

    5.a. Fill in the following information:

    | Setting name | Instructions                                                                                            |
    |--------------|---------------------------------------------------------------------------------------------------------|
    | Display name | Write the name of your Strapi app, this is fetched from the repository name but can be edited. It is automatically converted to slug format (`my-strapi-app`). |
    | Git branch   | Choose from the drop-down the default branch to use for this deployment. This uses the default branch of the repository. |
    | Deploy on push | Check the box to automatically deploy the latest changes from the selected branch. When disabled, you will need to manually deploy the latest changes. |
    | Region       | Choose the geographic location of the servers where your Strapi application is hosted. Selected region can either be New York in North America (default) or Amsterdam in Europe. |

    :::note
    The Git branch and "Deploy on push" settings can be modified afterwards through the project's setting, however the project name and hosting region setting can only be chosen during the creation of the project (see [Project Settings](/cloud/projects/settings)).
    :::

    5.b. (optional) Click on **Show advanced settings** to fill in the following options:

    | Setting name | Instructions                                                                                            |
    |--------------|---------------------------------------------------------------------------------------------------------|
    | Base directory | Write the name of the directory where your Strapi app is located in the repository. This is useful if you have multiple Strapi apps in the same repository or if you have a monorepo. |
    | Environment variables | Click on **Add variable** to add environment variables used to configure your Strapi app (see [Environment variables](/dev-docs/configurations/environment/) for more information). You can also add environment variables to your Strapi application by adding a `.env` file to the root of your Strapi app directory. The environment variables defined in the `.env` file will be used by Strapi Cloud. |
    | Node version | Choose a Node version from the drop-down. Default Node version will automatically be chosen to best match the version of your Strapi project. If you manually choose a version that doesn't match with your Strapi project, the build will fail but the explanation will be displayed in the build logs. |

    :::strapi Using Environment Variables
    You can use environment variable to connect your project to an external database rather than the default one used by Strapi Cloud (see [database configuration](/dev-docs/configurations/database#environment-variables-in-database-configurations) for more details). If you would like to revert and use Strapi's default database again, you have to remove your `DATABASE_` environment variables (no automatic migration implied).
    
    You can also set up here a custom email provider. Sendgrid is set as the default one for the Strapi applications hosted on Strapi Cloud (see [providers configuration](/dev-docs/providers#configuring-providers) for more details).
    :::

## Setting up billing details

:::strapi No billing step for free trials
If you chose the free trial, this billing step will be skipped as you will not be asked to share your credit card details at the creation of the project.

During the free trial, will be kept informed of the number of remaining free days. You will then be notified by email and via the Strapi Cloud dashboard whenever it is time to fill in your billing information to move to a paid plan.

👉 Skip to step 5 of the section below to finalise the creation of your project.
:::

1. Click on the **Continue to billing** button. You will directly be redirected to the second and final project deployment interface. There you can review all your new project setup information, enter payment & billing details and receive your invoice.

2. Review your project: make sure the plan and setup information are correct. If needed, click the ![Edit icon](/img/assets/icons/edit.svg) **Edit** button to be redirected to the first interface of the project creation and fix any mistake.

3. In the Payment section, fill in at least all mandatory elements for *Payment method* and *Billing information*.

4. Check your invoice which informs you of what should be paid now and the following month. Optionally, you can enter a *Discount code* if you have one.

5. Click on the **Create project** button to finalize the deployment of your new Strapi Cloud project. An initial deployment will automatically be triggered and you will be redirected to the *Projects* page.

:::caution
Create your Admin user after the initial deployment is complete. Do not share your application URL with anyone until you have created your Admin user.
:::

## ⏩ What to do next?

Now that you have deployed your project via the Cloud dashboard, we encourage you to explore the following ideas to have an even more complete Strapi Cloud experience:

- If you chose the free trial during your first project deployment, make sure to fill in your [billing information](/cloud/account/account-billing) afterward to prevent your project from being suspended at the end of the trial period.
- Invite other users to [collaborate on your project](/cloud/projects/collaboration).
- Check out the [deployments management documentation](/cloud/projects/deploys) to learn how to trigger new deployments for your project.



# with Cloud dashboard
Source: https://docs-v4.strapi.io/cloud/getting-started/deployment

# Project deployment with the Cloud dashboard 

    </Tabs>

5. Set up your Strapi Cloud project.

    5.a. Fill in the following information:

    | Setting name | Instructions                                                                                            |
    |--------------|---------------------------------------------------------------------------------------------------------|
    | Display name | Write the name of your Strapi app, this is fetched from the repository name but can be edited. It is automatically converted to slug format (`my-strapi-app`). |
    | Git branch   | Choose from the drop-down the default branch to use for this deployment. This uses the default branch of the repository. |
    | Deploy on push | Check the box to automatically deploy the latest changes from the selected branch. When disabled, you will need to manually deploy the latest changes. |
    | Region       | Choose the geographic location of the servers where your Strapi application is hosted. Selected region can either be New York in North America (default) or Amsterdam in Europe. |

    :::note
    The Git branch and "Deploy on push" settings can be modified afterwards through the project's setting, however the project name and hosting region setting can only be chosen during the creation of the project (see [Project Settings](/cloud/projects/settings)).
    :::

    5.b. (optional) Click on **Show advanced settings** to fill in the following options:

    | Setting name | Instructions                                                                                            |
    |--------------|---------------------------------------------------------------------------------------------------------|
    | Base directory | Write the name of the directory where your Strapi app is located in the repository. This is useful if you have multiple Strapi apps in the same repository or if you have a monorepo. |
    | Environment variables | Click on **Add variable** to add environment variables used to configure your Strapi app (see [Environment variables](/dev-docs/configurations/environment/) for more information). You can also add environment variables to your Strapi application by adding a `.env` file to the root of your Strapi app directory. The environment variables defined in the `.env` file will be used by Strapi Cloud. |
    | Node version | Choose a Node version from the drop-down. Default Node version will automatically be chosen to best match the version of your Strapi project. If you manually choose a version that doesn't match with your Strapi project, the build will fail but the explanation will be displayed in the build logs. |

    :::strapi Using Environment Variables
    You can use environment variable to connect your project to an external database rather than the default one used by Strapi Cloud (see [database configuration](/dev-docs/configurations/database#environment-variables-in-database-configurations) for more details). If you would like to revert and use Strapi's default database again, you have to remove your `DATABASE_` environment variables (no automatic migration implied).
    
    You can also set up here a custom email provider. Sendgrid is set as the default one for the Strapi applications hosted on Strapi Cloud (see [providers configuration](/dev-docs/providers#configuring-providers) for more details).
    :::

## Setting up billing details

:::strapi No billing step for free trials
If you chose the free trial, this billing step will be skipped as you will not be asked to share your credit card details at the creation of the project.

During the free trial, will be kept informed of the number of remaining free days. You will then be notified by email and via the Strapi Cloud dashboard whenever it is time to fill in your billing information to move to a paid plan.

👉 Skip to step 5 of the section below to finalise the creation of your project.
:::

1. Click on the **Continue to billing** button. You will directly be redirected to the second and final project deployment interface. There you can review all your new project setup information, enter payment & billing details and receive your invoice.

2. Review your project: make sure the plan and setup information are correct. If needed, click the ![Edit icon](/img/assets/icons/edit.svg) **Edit** button to be redirected to the first interface of the project creation and fix any mistake.

3. In the Payment section, fill in at least all mandatory elements for *Payment method* and *Billing information*.

4. Check your invoice which informs you of what should be paid now and the following month. Optionally, you can enter a *Discount code* if you have one.

5. Click on the **Create project** button to finalize the deployment of your new Strapi Cloud project. An initial deployment will automatically be triggered and you will be redirected to the *Projects* page.

:::caution
Create your Admin user after the initial deployment is complete. Do not share your application URL with anyone until you have created your Admin user.
:::

## ⏩ What to do next?

Now that you have deployed your project via the Cloud dashboard, we encourage you to explore the following ideas to have an even more complete Strapi Cloud experience:

- If you chose the free trial during your first project deployment, make sure to fill in your [billing information](/cloud/account/account-billing) afterward to prevent your project from being suspended at the end of the trial period.
- Invite other users to [collaborate on your project](/cloud/projects/collaboration).
- Check out the [deployments management documentation](/cloud/projects/deploys) to learn how to trigger new deployments for your project.



# with Cloud CLI
Source: https://docs-v4.strapi.io/cloud/getting-started/deployment-cli

# Project deployment with the Command Line Interface (CLI)

This is a step-by-step guide for deploying your project on Strapi Cloud for the first time, using the Command Line Interface.

:::prerequisites
Before you can deploy your Strapi application on Strapi Cloud using the Command Line Interface, you need to have the following prerequisites:

- During your free Strapi Cloud trial, ensure you have at least 1 project slot available. Your free trial can only include up to 5 projects (see [Usage & billing](/cloud/getting-started/usage-billing)).
- Have a Google, GitHub or GitLab account.
- Have an already created Strapi project (see [Installing from CLI in the Developer Documentation](/dev-docs/installation/cli)), stored locally. The project must be less than 100MB.
- Have available storage in your hard drive where the temporary folder of your operating system is stored.
:::

## Logging in to Strapi Cloud

1. Open your terminal.

2. Navigate to the folder of your Strapi project, stored locally on your computer.

3. Enter the following command to log into Strapi Cloud:

  </Tabs>

4. In the browser window that opens automatically, confirm that the code displayed is the same as the one written in the terminal message.

5. Still in the browser window, choose whether to login via Google, GitHub or GitLab. The window should confirm the successful login soon after.

## Deploying your project

1. From your terminal, still from the folder of your Strapi project, enter the following command to deploy the project:

  </Tabs>

2. Follow the progression bar in the terminal until confirmation that the project was successfully deployed with Strapi Cloud.

### Automatically deploying subsequent changes

By default, when creating and deploying a project with the Cloud CLI, you need to manually deploy again all subsequent changes by running the corresponding `deploy` command everytime you make a change.

Another option is to enable automatic deployment through a git repository. To do so:

1. Host your code on a git repository, such as [GitHub](https://www.github.com) or [GitLab](https://www.gitlab.com).
2. Connect your Strapi Cloud project to the repository (see the _Connected repository_ setting in [Projects Settings > General](/cloud/projects/settings#general)).
3. Still in _Projects Settings > General_ tab, tick the box for the "Deploy the project on every commit pushed to this branch" setting. From now on, a new deployment to Strapi Cloud will be triggered any time a commit is pushed to the connected git repository.

:::note
Automatic deployment is compatible with all other deployment methods, so once a git repository is connected, you can trigger a new deployment to Strapi Cloud [from the Cloud dashboard](/cloud/projects/deploys), [from the CLI](/cloud/cli/cloud-cli#strapi-deploy), or by pushing new commits to your connected repository.
:::

## ⏩ What to do next?

Now that you have deployed your project via the Command Line Interface, we encourage you to explore the following ideas to have an even more complete Strapi Cloud experience:

- Fill in your [billing information](/cloud/account/account-billing) to prevent your project from being suspended at the end of the trial period.
- Visit the Cloud dashboard to follow [insightful metrics and information](/cloud/projects/overview) on your Strapi project.
- Check out the full [Command Line Interface documentation](/cloud/cli/cloud-cli) to learn about the other commands available.



# Welcome to the Strapi Cloud Docs!
Source: https://docs-v4.strapi.io/cloud/getting-started/intro

# Welcome to the Strapi Cloud Docs!

This documentation contains all technical documentation related to the setup, deployment, update and customization of your Strapi Cloud account and applications.

## What is Strapi Cloud

[Strapi Cloud](https://cloud.strapi.io) is a hosting platform that allows you to deploy your Strapi applications in a matter of minutes. It is a fully managed content platform built on top of Strapi, the leading open-source headless CMS.

Strapi Cloud enables you to increase your content velocity without having to compromise on customization needs and requirements. Development teams can rely on Strapi Cloud to abstract away the complexity of infrastructure management while keeping your development workflow and extending the core capabilities of Strapi. Content managers can use Strapi Cloud to autonomously manage all types of content and benefit from a complete set of content collaboration, security, and compliance features.

:::strapi Welcome to the Strapi community!
Strapi Cloud is built on top of Strapi, an open-source, community-oriented project. The Strapi team has at heart to share their vision and build the future of Strapi with the Strapi community. This is why the [roadmap](https://feedback.strapi.io) is open: as all insights are very important and will help steer the project in the right direction. Any community member is most welcome to share ideas and opinions there.

You can also join [GitHub](https://github.com/strapi/strapi), the [Forum](https://forum.strapi.io/), and the [Discord](https://discord.strapi.io) and benefit from the years of experience, knowledge, and contributions by the Strapi community as a whole.
:::



# Information on billing & usage
Source: https://docs-v4.strapi.io/cloud/getting-started/usage-billing

# Information on billing & usage

This page contains general information related to the usage and billing of your Strapi Cloud account and projects.

Strapi Cloud offers up to 5 free 14-day trial projects, which can be activated anytime, even if you have existing paid projects. Project trials do not need to run simultaneously. Strapi Cloud also offers 3 paid plans: Developer, Pro, and Team (see [Pricing page](https://strapi.io/pricing-cloud)). The table below summarises Strapi Cloud usage-based pricing tiers, for general features & usage, CMS features and Cloud specific features:

| Feature | Free Trial | Developer | Pro | Team |
| --- | --- | --- | --- | --- |
| **Seats** | 10 | 1 | 5 | 10 |
| **Database Entries**  | 1,000 | 1,000 | 100,000 | 1,000,000 |
| **Assets Storage** | 5GB | 15GB | 150GB | 500GB |
| **Assets Bandwidth** | 50GB | 50GB per month | 500GB per month | 1,000GB per month |
| **API Requests** | 10,000 | 100,000 | 1,000,000 | 10,000,000 |
|  |  |  |  |  |
| **Audit Logs** | 7 days retention | N/A | N/A | 7 days retention |
| **Releases** | 3 pending releases | N/A | N/A | 3 pending releases |
| **Review Workflows** | up to 2 | N/A | N/A | up to 2 |
|  |  |  |  |  |
| **Backups** | N/A | N/A | Weekly | Weekly |

:::strapi Additional information on usage and features
- General features & usage:
  - Seats are the maximum number of users that can access the Strapi admin panel.
  - Database entries are the number of entries in your database.
  - Assets storage is the amount of storage used by your assets.
  - Assets bandwidth is the amount of bandwidth used by your assets.
  - API requests are the number of requests made to your APIs. This includes requests to the GraphQL and REST APIs, excluding requests for file and media assets counted towards CDN bandwidth and storage.
- CMS features:
  - Audit Logs refers to the maximum number of days for which the feature retains the activities that happened (see [Audit Logs in User Guide](/user-docs/settings/audit-logs) for more information).
  - Releases refers to the maximum number of pending releases that can be created (see [Releases in User Guide](/user-docs/releases/introduction) for more information).
  - Review Workflows refers to the maximum number of workflows that can be created and used (see [Review Workflows in User Guide](/user-docs/settings/review-workflows) for more information).
- Cloud specific feature: Backups refers to the automatic backups of Strapi Cloud projects (see [dedicated page in Cloud documentation](/cloud/projects/settings#backups) for more information).
:::

## Seats management

Seats represent the maximum number of users that can access the Strapi admin panel. Each plan comes with a default number of seats. 

You can add more seats either by upgrading to a higher plan, or manually adding individual seats as desired. Seats can be added from the **Billing & Usage** tab of a project's settings (see [Managing project's number of seats](/cloud/projects/settings#managing-projects-number-of-seats)).

There is however a maximum number of seats that can be added per plan:

| Plan | Maximum Seats |
| --- | --- |
| **Free Trial** | 10 |
| **Developer** | 3 |
| **Pro** | 20 |
| **Team** | 50 |

## Billing

Billing is based on the usage of your Strapi Cloud account and projects. You will be billed monthly for the usage of your account and applications. You can view your usage and billing information in the [Billing](https://cloud.strapi.io/profile/billing) section of your Strapi Cloud account.

### Overages

If you exceed the limits of your plan for API Requests, Asset Bandwidth, or Asset Storage, you will be charged for the corresponding overages. 

For example, if you exceed the 500GB limit in asset bandwidth of the Pro plan, you will be charged for the excess bandwidth at the end of the current billing period or on project deletion. Overages are not prorated and are charged in full.

Overages are charged according to the following rates:

| Feature | Rate |
| --- | --- |
| **API Requests** | $1.50 / 25k requests |
| **Asset Bandwidth** | $30.00 / 100GB |
| **Asset Storage** | $0.60 / GB per month |

### Project suspension

Projects may end up in a **Suspended** state for various reasons, including: not paying the invoice, exceeding the limits of your free trial plan, or violating the [terms of service](https://strapi.io/cloud-legal). 

If your project is suspended, you will no longer be able to access the application or trigger new deployments. You will also be unable to access the Strapi admin panel.

You can view the status of your project in the [Projects](https://cloud.strapi.io/projects) section of your Strapi Cloud account and you will be notified by email.

:::warning
If you do not resolve the issue within 30 days, your suspended project will be deleted and all data will be permanently lost. To avoid this situation, you will be sent a first email when your project becomes suspended, then another email every 5 days until one week left, to remind you to solve the issue. The last week before the deletion of the project, you will be sent 3 more emails: 6 days, 3 days and 1 day before your project is finally deleted.
:::

#### Project suspension after subscription cancellation

If you don't pay the invoice, the subscription of your project will automatically be cancelled and the project will be suspended. You can reactivate the subscription through the billing modal (see [Edit subscription](/cloud/account/account-billing#edit-subscription)).

1. Log into the billing modal and go to the *Subscription details* of the subscription associated with the suspended project. You should see a warning message confirming that the subscription was canceled for the following reason: "Not Paid".
2. Go back to the homepage of the billing modal, listing subscriptions and billing options.
3. Go to *Payment methods* and add a new, working card to pay the invoice. As soon as the invoice is paid, your project will automatically be reactivated.

#### Project suspension for other reasons

If your project was suspended for reasons other than unpaid invoice leading to subscription cancellation, you may not have the possibility to reactivate your project yourself. You should receive an email with instructions on how to resolve the issue. If you do not receive the email notification, please contact [Strapi Support](mailto:support@strapi.io).



# Collaboration
Source: https://docs-v4.strapi.io/cloud/projects/collaboration

# Collaboration on projects

Projects are created by a user via their Strapi Cloud account. Strapi Cloud users can share their projects to anyone else, so these new users can have access to the project dashboard and collaborate on that project, without the project owner to ever have to share their credentials.

Users invited to collaborate on a project, called maintainers, do not have the same permissions as the project owner. Contrary to the project owner, maintainers:

- Cannot share the project themselves to someone else
- Cannot delete the project from the project settings
- Cannot access the *Billing* section of project settings

## Sharing a project

To invite a new maintainer to collaborate on a project:

1. From the *Projects* page, click on the project of your choice to be redirected to its dashboard.
2. Click on the **Share** button located in the dashboard's header.
3. In the *Share [project name]* dialog, type the email address of the person to invite in the textbox. A dropdown indicating "Invite [email address]" should appear.
4. Click on the dropdown: the email address should be displayed in a purple box right below the textbox.
5. (optional) Repeat steps 3 and 4 to invite more people. Email addresses can only entered one by one but invites can be sent to several email addresses at the same time.
6. Click on the **Send** button.

New maintainers will be sent an email containing a link to click on to join the project. Once a project is shared, avatars representing the maintainers will be displayed in the project dashboard's header, next to the **Share** button, to see how many maintainers collaborate on that project and who they are.

:::tip
Avatars use GitHub, Google or GitLab profile pictures, but for pending users only initials will be displayed until the activation of the maintainer account. You can hover over an avatar to display the full name of the maintainer.
:::

## Managing maintainers

From the *Share [project name]* dialog accessible by clicking on the **Share** button of a project dashboard, projects owners can view the full list of maintainers who have been invited to collaborate on the project. From there, it is possible to see the current status of each maintainer and to manage them.

Maintainers whose full name is displayed are users who did activate their account following the invitation email. If however there are maintainers in the list whose email address is displayed, it means they haven't activated their accounts and can't access the project dashboard yet. In that case, a status should be indicated right next to the email address to explain the issue:

- Pending: the invitation email has been sent but the maintainer hasn't acted on it yet.
- Expired: the email has been sent over 72 hours ago and the invitation expired.

For Expired statuses, it is possible to send another invitation email by clicking on the **Manage** button, then **Resend invite**. 

### Revoking maintainers

To revoke a maintainer's access to the project dashboard:

1. Click on the **Share** button in the project dashboard's header.
2. In the list of *People with access*, find the maintainer whose access to revoke and click on the **Manage** button.
3. Click on the **Revoke** button.
4. In the confirmation dialog, click again on the **Revoke** button.

The revoked maintainer will completely stop having access to the project dashboard.

:::note
Maintainers whose access to the project has been revoked do not receive any email or notification.
:::



# Deployments management
Source: https://docs-v4.strapi.io/cloud/projects/deploys

# Deployments management

The creation of a new Strapi Cloud project automatically trigger the deployment of that project. After that, deployments can be:

- manually triggered whenever needed, [from the Cloud dashboard](#triggering-a-new-deployment) or [from the CLI](/cloud/cli/cloud-cli#strapi-deploy),
- or automatically triggered everytime a new commit is pushed to the branch, if the Strapi Cloud project is connected to a git repository and the "deploy on push" option is enabled (see [Project settings](/cloud/projects/settings#modifying-git-repository--branch)).

Ongoing deployments can also be [manually cancelled](#cancelling-a-deployment) if needed.

## Triggering a new deployment

To manually trigger a new deployment for your project, click on the **Trigger deploy** button always displayed in the right corner of a project dashboard's header. This action will add a new card in the *Deploys* tab, where you can monitor the status and view the deployment logs live (see [Deploy history and logs](/cloud/projects/deploys-history)).

## Cancelling a deployment

If for any reason you want to cancel an ongoing and unfinished deployment:

1. Go to the *Log details* page of the deployment (see [Accessing log details](/cloud/projects/deploys-history#accessing-deployment-details--logs)).
2. Click on the **Cancel deploy** button in the top right corner. The status of the deployment will automatically change to *Cancelled*.

:::tip
You can also cancel a deployment from the *Deploys* tab which lists the deployments history. The card of ongoing deployment with the *Building* status will display a **Cancel deploy** button.
:::



# Deploy history & logs
Source: https://docs-v4.strapi.io/cloud/projects/deploys-history

# Deploy history and logs

For each Strapi Cloud project, you can access the history of all deployments that occured and their details including build and deploy logs. This information is available in the *Deploys* tab, located in the header of any chosen project.

## Viewing deploy history

In the *Deploys* tab is displayed a chronological list of cards with the details of all historical deployments for your project.

, with a direct link to your git provider, and commit message
- Deployment status:
    - *Deploying*
    - *Done*
    - *Cancelled*
    - *Build failed*
    - *Deploy failed*
- Last deployment time (when the deployment was triggered and the duration)
- Production branch

## Accessing deployment details & logs

From the *Deploys* tab, you can click on the ![See logs button](/img/assets/icons/Eye.svg) **See logs** button of any chosen deployment card to be redirected to the *Log details*. It contains the deployment's details logs.

, with a direct link to your git provider, and commit message used for this deployment
- *Branch*: the branch used for this deployment

In the *Logs* section of the *Log details* page you can click on the arrow buttons ![Down arrow](/img/assets/icons/ONHOLDCarretDown.svg) ![Up arrow](/img/assets/icons/ONHOLDCarretUp.svg) to show or hide the build and deploy logs of the deployment.

:::tip
Click the ![Copy button](/img/assets/icons/duplicate.svg) **Copy to clipboard** button to copy the log contents.
:::



# Notifications
Source: https://docs-v4.strapi.io/cloud/projects/notifications

# Notifications

The Notification center can be opened by clicking the bell icon ![Notification icon](/img/assets/icons/notifications.svg) in the top navigation of the Cloud dashboard.

It displays a list of the latest notifications for all your existing projects. Clicking on a notification card from the list will redirect you to the *Log details* page of the corresponding deployment (more information in [Deploy history & logs](/cloud/projects/deploys-history#accessing-deployment-details--logs)).

The following notifications can be listed in the Notifications center:

- *Deploy completed*: when a deployment is successfully done.
- *Build failed*: when a deployment fails during the build stage.
- *Deploy failed*: when a deployment fails during the deployment stage.
- *Deploy triggered*: when a deployment is triggered by a new push to the connected repository. This notification is however not sent when the deployment is triggered manually.

:::note
All notifications older than 30 days are automatically removed from the Notification center.
:::



# Projects overview
Source: https://docs-v4.strapi.io/cloud/projects/overview

# Projects overview

The *Projects* page displays a list of all your Strapi Cloud projects. From here you can manage your projects and access the corresponding applications.

Each project card displays the following information:

* the project name
* the current status of the project:
    * *Disconnected*, if the project repository is not connected to Strapi Cloud
    * *Suspended*, if the project has been suspended (refer to [Project suspension](/cloud/getting-started/usage-billing#project-suspension) to reactivate the project)
    * *Incompatible version*, if the project is using a Strapi version that is not compatible with Strapi Cloud
* the last deployment date

Each project card also displays a ![Menu icon](/img/assets/icons/more.svg) menu icon to access the following options:
* **Visit App**: to be redirected to the application
* **Go to Deploys**: to be redirected to the [*Deploys*](/cloud/projects/deploys) page
* **Go to Settings**: to be redirected to the [*Settings*](/cloud/projects/settings) page

## Accessing a project's overview

From the *Projects* page, click on any project card to access the *Overview* of your project. It displays all details such as usage and status information and gives access to deployment history and available settings.

:::strapi Navigating Strapi Cloud projects dashboards
Once you click on a project page, you access the dedicated dashboard for your chosen project. It is by default that you land on the *Overview* tab, however the header of the project's dashboard doesn't change and always offers the following options:

- links to the other available tabs for the project: *Overview*, [*Deploys*](/cloud/projects/deploys), [*Runtime Logs*](/cloud/projects/runtime-logs) and [*Settings*](/cloud/projects/settings)
- the **Share** button to invite a new maintainer to collaborate on your project — and if the project is already shared: avatars of the maintainers (see [Collaboration](/cloud/projects/collaboration))
- the **Trigger deploy** button to trigger a new deployment of your project
- the **Visit app** button to access your application
:::

From the *Overview* tab, you can:
- view a recap of the main settings of your project, such as:
  - the link to the source repository
  - the name of the branch
  - the name of the base directory
  - the URL and link to the application
- view your project's usage (see [Usage](/cloud/getting-started/usage-billing) for more information)
- view your project's latest deploys (see [Deploys](/cloud/projects/deploys) for more information)



# Runtime logs
Source: https://docs-v4.strapi.io/cloud/projects/runtime-logs

# Runtime logs

From a chosen project's dashboard, the *Runtime logs* tab, located in the header, displays the live logs of the project.

:::note
The *Runtime logs* are only accessible once the project is successfully deployed.
:::



# Project settings
Source: https://docs-v4.strapi.io/cloud/projects/settings

# Project settings

From a chosen project's dashboard, the *Settings* tab, located in the header, enables you to manage the configurations and settings for your Strapi Cloud project.

There are 7 tabs available:

- ![General icon](/img/assets/icons/Faders.svg) [*General*](#general),
- ![Backups icon](/img/assets/icons/ArrowClockwise.svg) [*Backups*](#backups),
- ![Domains icon](/img/assets/icons/Browsers.svg) [*Domains*](#domains),
- ![Variables icon](/img/assets/icons/code2.svg) [*Variables*](#variables),
- ![Billing & Usage icon](/img/assets/icons/CreditCard.svg) [*Billing & Usage*](#billing--usage),
- ![Plans icon](/img/assets/icons/MapTrifold.svg) [Plans](#plans),
- and ![Invoices icon](/img/assets/icons/Invoice.svg) [Invoices](#invoices).

## General

The ![General icon](/img/assets/icons/Faders.svg) *General* tab enables you to check and update the following options for the project:

- *Details*: to see the name of your Strapi Cloud project, used to identify the project on the Cloud Dashboard, Strapi CLI, and deployment URLs. The project name is set at project creation (see [Project creation](/cloud/getting-started/deployment)) and cannot be modified afterwards.
- *Connected Git repository*: to change the branch of the GitHub repository used for your project (see [Modifying GitHub repository branch](#modifying-git-repository--branch)). Also allows to enable/disable the "deploy on push" option.
- *Selected region*: to see the hosting region of the project, meaning the geographical location of the servers where the project and its data and resources are stored. The hosting region is set at project creation (see [Project creation](/cloud/getting-started/deployment)) and cannot be modified afterwards.
- *Debug info*: to see the internal project name for the project. This is useful for support purposes.
- *Node version*: to change the Node version of the project (see [Modifying Node version](#modifying-node-version)).
- *Delete project*: to permanently delete your Strapi Cloud project (see [Deleting Strapi Cloud project](#deleting-strapi-cloud-project)).

### Modifying git repository & branch

The GitHub or Gitlab repository, branch and base directory for a Strapi Cloud project are by default chosen at the creation of the project (see [Creating a project](/cloud/getting-started/deployment)). After the project's creation, via the project's settings, it is possible to:

- update the project's repository or switch to another git provider (see [Updating repository](#updating-repository)),
- edit the project's branch, base directory and deploy on push setting (see [Editing branch](#editing-branch)).

:::caution
Updating the git repository could result in the loss of the project and its data, for instance if the wrong repository is selected or if the data schema between the old and new repository doesn't match.
:::

#### Updating repository

1. In the *Connected git repository* section of the ![General icon](/img/assets/icons/Faders.svg) *General* tab, click on the **Update repository** button.
2. (optional) If you wish to not only update the repository but switch to another git provider, click on the **Switch to GitHub/GitLab** button at the bottom of the *Update repository* dialog. You will be redirected to the chosen git provider's authorization settings before getting back to the *Update repository dialog*.
3. In the *Update repository* dialog, fill in the 3 available settings:

    | Setting name    | Instructions                                                             |
    | --------------- | ------------------------------------------------------------------------ |
    | Account         | Choose an account from the drop-down list.                               |
    | Repository      | Choose a repository from the drop-down list.                             |
    | Git branch      | Choose a branch from the drop-down list.                                 |
    | Deploy the project on every commit pushed to this branch | Tick the box to automatically trigger a new deployment whenever a new commit is pushed to the selected branch. Untick it to disable the option. |

4. Click on the **Save** button.
5. In the confirmation dialog, confirm your changes by clicking on the **Relink repository** button.

#### Editing branch

1. In the *Connected git repository* section of the ![General icon](/img/assets/icons/Faders.svg) *General* tab, click on the **Edit branch** button.
2. In the *Edit branch* dialog, edit the settings below:

    | Setting name    | Instructions                                                             |
    | --------------- | ------------------------------------------------------------------------ |
    | Git branch      | Choose a branch from the drop-down list.                                 |
    | Base directory  | Write the path of the base directory in the textbox.                     |
    | Deploy the project on every commit pushed to this branch | Tick the box to automatically trigger a new deployment whenever a new commit is pushed to the selected branch. Untick it to disable the option. |

3. Click on the **Save** button.

### Modifying Node version

The project's Node version is first chosen at the creation of the project (see [Creating a project](/cloud/getting-started/deployment)), through the advanced settings. It is possible to switch to another Node version afterwards.

1. In the *Node version* section of the ![General icon](/img/assets/icons/Faders.svg) *General* tab, click on the **Edit** button.
2. Using the *Node version* drop-down in the dialog, click on the version of your choice.
3. Click on the **Save** button.
4. Click on the **Trigger deploy** button in the right corner of the project's header. If the deployment fails, it is because the Node version doesn't match the version of your Strapi project. You will have to switch to the other Node version and re-deploy your project again.

### Deleting Strapi Cloud project

You can delete any Strapi Cloud project, but it will be permanent and irreversible. Associated domains, deployments and data will be deleted as well and the subscription for the project will automatically be cancelled.

1. In the *Delete project* section of the ![General icon](/img/assets/icons/Faders.svg) *General* tab, click on the **Delete project** button.
2. In the dialog, select the reason why you are deleting your project. If selecting "Other" or "Missing feature", a textbox will appear to let you write additional information.
3. Confirm the deletion of your project by clicking on the **Delete project** button at the bottom of the dialog.

## Backups    {#backups}

The ![Backups icon](/img/assets/icons/ArrowClockwise.svg) *Backups* tab informs you of the status and date of the latest backup of your Strapi Cloud projects. The databases associated with all existing Strapi Cloud projects are indeed automatically backed up weekly and those backups are retained for a one-month period. Additionally, you can create a single manual backup.

:::note Notes

- The backup feature is not available for Strapi Cloud projects using the free trial or the Developer plan. You will need to upgrade to either the Pro or Team plan to have your project automatically backed up and to have access to manual backups.

- Only project owners can restore a backup. Maintainers have access to the ![Backups icon](/img/assets/icons/ArrowClockwise.svg) *Backups* tab but the **Restore backup** button won't be displayed for them. Refer to [Collaboration](/cloud/projects/collaboration) for more information.

- The manual backup option should become available shortly after project's first succesful deployment.

:::

:::tip
For projects created before the release of the Backup feature in October 2023, the first backup will automatically be triggered with the next deployment of the project.
:::

### Creating a manual backup

To create a manual backup, in the ![Backups icon](/img/assets/icons/ArrowClockwise.svg) *Backups* section, click on the **Create backup** button.

The manual backup should start immediately, and restoration or creation of other backups will be disabled until backup is complete.

:::caution
When creating a new manual backup, any existing manual backup will be deleted. You can only have one manual backup at a time.
:::

### Restoring a backup

If you need to restore a backup of your project:

1. In the ![Backups icon](/img/assets/icons/ArrowClockwise.svg) *Backups* section, click on the **Restore backup** button.
2. In the dialog, choose one of the available backups (automatic or manual) of your project in the *Choose backup* drop-down.
3. Click on the **Restore** button of the dialog. Once the restoration finished, your project will be back to the state it was at the time of the chosen backup.

## Domains

The ![Domains icon](/img/assets/icons/Browsers.svg) *Domains* tab enables you to manage domains and connect new ones.

All existing domains for your Strapi Cloud project are listed in the ![Domains icon](/img/assets/icons/Browsers.svg) *Domains* tab. For each domain, you can:

- see its current status:
    - ![Edit icon](/img/assets/icons/CheckCircle.svg) Active: the domain is currently confirmed and active
    - ![Edit icon](/img/assets/icons/Clock.svg) Pending: the domain transfer is being processed, waiting for DNS changes to propagate
    - ![Edit icon](/img/assets/icons/CrossCircle.svg) Failed: the domain change request did not complete as an error occured
- click the ![Edit icon](/img/assets/icons/edit.svg) edit button to access the settings of the domain
- click the ![Delete icon](/img/assets/icons/delete.svg) delete button to delete the domain

### Connecting a custom domain

Default domain names are made of 2 randomly generated words followed by a hash. They can be replaced by any custom domain of your choice.

1. Click the **Connect new domain** button.
2. In the window that opens, fill in the following fields:

| Setting name              | Instructions                                                              |
| ------------------------- | ------------------------------------------------------------------------- |
| Domain name               | Type the new domain name (e.g. *custom-domain-name.com*)                  |
| Hostname                  | Type the hostname (i.e. address end-users enter in web browser, or call through APIs). |
| Target                    | Type the target (i.e. actual address where users are redirected when entering hostname). |
| Set as default domain     | Tick the box to make the new domain the default one.                      |

3. Click on the **Save** button.

## Variables

Environment variables (more information in the [Developer Documentation](../../dev-docs/configurations/environment)) are used to configure the environment of your Strapi application, such as the database connection.

In the ![Variables icon](/img/assets/icons/code2.svg) *Variables* tab, you can:
- click the **Add variable** button to create a new variable
- edit any variable, each being composed of a *Name* and a *Value*
- click the ![Delete icon](/img/assets/icons/delete.svg) delete button associated with any variable to delete it
- click the **Save** button to save any change made on the page

## Billing & Usage

The ![Billing & Usage icon](/img/assets/icons/CreditCard.svg) *Billing & Usage* tab displays your next estimated payment, all information on the current subscription plan and a detailed summary of the project's usage. It also allows you to directly [manage the number of seats](#managing-projects-number-of-seats) for your project.

Through this tab, you also have the possibility to:
- click the **Change** button to be redirected to the ![Plans icon](/img/assets/icons/MapTrifold.svg) *Plans* tab, where you can change you subscription plan ([see related documentation](#plans)),
- click the **Edit** button to be redirected to the ![Billing icon](/img/assets/icons/CreditCard.svg) *Billing* tab of your profile page, where you can edit the payment method ([see related documentation](/cloud/account/account-billing)).

:::tip
In the *Usage summary* section of the ![Billing & Usage icon](/img/assets/icons/CreditCard.svg) *Billing & Usage* tab, you can see the current monthly usage of your project compared to the maximum usage allowed by your project's subscription. Use the arrows in the top right corner to see the project's usage for any chosen month.

Note also that if your usage indicates that another subscription plan would fit better for your project, a message will be displayed in the ![Billing & Usage icon](/img/assets/icons/CreditCard.svg) *Billing & Usage* tab to advise which plan you could switch to.
:::

### Managing project's number of seats

You can manually add more seats or lower the number of seats for your project without necessarily upgrading or downgrading to another plan (see [more information on seats management](/cloud/getting-started/usage-billing#seats-management)).

#### Adding more seats for the project

1. In the ![Billing & Usage icon](/img/assets/icons/CreditCard.svg) *Billing & Usage* tab of your project's settings, click on the **Manage** button next to the displayed number of seats.
2. In the window that opens, select with the drop-down the number of *Additional seats* of your choice. The cost of the additional seats is automatically calculated and displayed in the window.
3. (optional) Click **I have a discount code**, enter your discount code in the field, and click on the **Apply** button.
4. Click the **Save** button to confirm. You will automatically be billed with the payment method defined in your profile.

#### Removing seats from the project

1. In the ![Billing & Usage icon](/img/assets/icons/CreditCard.svg) *Billing & Usage* tab of your project's settings, click on the **Manage** button next to the displayed number of seats.
2. In the window that opens, select with the drop-down the number of *Billed seats* you want to keep.
3. Click the **Save button** to confirm. The new, lower number of seats will not be effective until the next month.

## Plans

The ![Plans icon](/img/assets/icons/MapTrifold.svg) *Plans* tab displays an overview of the available Strapi Cloud plans and allows you to upgrade or downgrade from your current plan to another.

:::note
If you are using the free trial, the *Plan* tab shows a countdown of how many days you have left, as well as indications of the next steps. For more information about the free trial and project suspension, please refer to [Information on billing & usage](/cloud/getting-started/usage-billing).
:::

### Upgrading to another plan

Strapi Cloud plan upgrades to another, higher plan are immediate and can be managed for each project via the project settings.

:::note
When using the free trial, the buttons to upgrade to another plan are greyed out and unusable until you have filled in your billing information. Please refer to [Account billing details](/cloud/account/account-billing) for more information.
:::

To upgrade your current plan to a higher one:

1. In the ![Plans icon](/img/assets/icons/MapTrifold.svg) *Plans* tab of your project's settings, click on the **Upgrade** button of the plan you want to upgrade to.
2. In the window that opens, check the payment details that indicate how much you will have to pay immediately after confirming the upgrade, and the available options.

   a. (optional) Click the **Edit** button to select another payment method.
   b. (optional) Click **I have a discount code**, enter your discount code in the field, and click on the **Apply** button.

3. Click on the **Upgrade to [plan name]** button to confirm the upgrade of your Strapi project to another plan.

### Downgrading to another plan

Strapi Cloud plan downgrades can be managed for each project via the project settings. Downgrades are however not immediately effective: the higher plan will still remain active until the end of the current month (e.g. if you downgrade from the Team plan to the Pro plan on June 18th, your project will remain on the Team plan until the end of the month: on July 1st, the Pro plan will be effective for the project).

:::caution
Make sure to check the usage of your Strapi Cloud project before downgrading: if your current usage exceeds the limits of the lower plan, you are taking the risk of getting charged for the overages. Note also that you may lose access to some features: for example, downgrading to the Developer plan which doesn't include the Backups feature, would make you lose all your project's backups. Please refer to [Information on billing & usage](/cloud/getting-started/usage-billing) for more information.
:::

To downgrade your current plan to a lower one:

1. In the ![Plans icon](/img/assets/icons/MapTrifold.svg) *Plans* tab of your project's settings, click on the **Downgrade** button of the plan you want to downgrade to.
2. In the window that opens, check the information related to downgrading.
3. Click on the **Downgrade** button to confirm the downgrade of your Strapi project's plan.

## Invoices

The ![Invoices icon](/img/assets/icons/Invoice.svg) *Invoices* tab displays the full list of invoices for your Strapi Cloud project as well as their status.

:::strapi Invoices are also available in your profile settings.
In the *Profile > Invoices* tab, you will find the complete list of invoices for all your projects. Feel free to check the [dedicated documentation](/cloud/account/account-billing#account-invoices).
:::



# Admin panel customization
Source: https://docs-v4.strapi.io/dev-docs/admin-panel-customization

<!-- not required but if we don't include an import line the 2 JavaScript lines below are interpreted as Markdown text 🤷  -->

const captionStyle = {fontSize: '12px'}
const imgStyle = {width: '100%', margin: '0' }

The admin panel is a React-based single-page application. It encapsulates all the installed plugins of a Strapi application. Some of its aspects can be [customized](#customization-options), and plugins can also [extend](#extension) it.

To start your strapi instance with hot reloading while developing, run the following command:

```bash
cd my-app # cd into the root directory of the Strapi application project
strapi develop --watch-admin
```

## Customization options

Customizing the admin panel is helpful to better reflect your brand identity or to modify some default Strapi behavior:

- The [access URL, host and port](#access-url) can be modified through the server configuration.
- The [configuration object](#configuration-options) allows replacing the logos and favicon, defining locales and extending translations, extending the theme, and disabling some Strapi default behaviors like displaying video tutorials or notifications about new Strapi releases.
- The [WYSIWYG editor](#wysiwyg-editor) can be replaced or customized.
- The [email templates](#email-templates) should be customized using the Users and Permissions plugin.

### Access URL

By default, the administration panel is exposed via [http://localhost:1337/admin](http://localhost:1337/admin). For security reasons, this path can be updated.

**Example:**

To make the admin panel accessible from `http://localhost:1337/dashboard`, use this in the [server configuration](/dev-docs/configurations/server) file:

</Tabs>

:::strapi Advanced settings
For more advanced settings please see the [admin panel configuration](/dev-docs/configurations/admin-panel) documentation.
:::

#### Host and port

:::note
From 4.15.1 this is now deprecated. The strapi server now supports the live updating of the admin panel in development mode.
:::

By default, the front end development server runs on `localhost:8000` but this can be modified:

</Tabs>

### Configuration options

:::prerequisites
Before configuring any admin panel customization option, make sure to:

- rename the default `app.example.js` file into `app.js`,
- and create a new `extensions` folder in `./src/admin/`. Strapi projects already contain by default another `extensions` folder in `./src/` but it is for plugins extensions only (see [Plugins extension](/dev-docs/plugins-extension)).
:::

The `config` object found at `./src/admin/app.js` stores the admin panel configuration.

Any file used by the `config` object (e.g. a custom logo) should be placed in a `./src/admin/extensions/` folder and imported inside `./src/admin/app.js`.

The `config` object accepts the following parameters:

| Parameter                      | Type             | Description                                                                                                           |
| ------------------------------ | ---------------- | --------------------------------------------------------------------------------------------------------------------- |
| `auth`                         | Object           | Accepts a `logo` key to replace the default Strapi [logo](#logos) on login screen                                     |
| `head`                         | Object           | Accepts a `favicon` key to replace the default Strapi [favicon](#favicon)                                             |
| `locales`                      | Array of Strings | Defines availables locales (see [updating locales](#locales))                                                         |
| `translations`                 | Object           | [Extends the translations](#extending-translations)                                                                   |
| `menu`                         | Object           | Accepts the `logo` key to change the [logo](#logos) in the main navigation                                            |
| `theme.light` and `theme.dark` | Object           | [Overwrite theme properties](#theme-extension) for Light and Dark modes                                               |
| `tutorials`                    | Boolean          | Toggles [displaying the video tutorials](#tutorial-videos)                                                            |
| `notifications`                | Object           | Accepts the `releases` key (Boolean) to toggle [displaying notifications about new releases](#releases-notifications) |

<details>
<summary>Example of a custom configuration for the admin panel</summary>

</Tabs>

</details>

#### Locales

To update the list of available locales in the admin panel, use the `config.locales` array:

</Tabs>

:::note NOTES

- The `en` locale cannot be removed from the build as it is both the fallback (i.e. if a translation is not found in a locale, the `en` will be used) and the default locale (i.e. used when a user opens the administration panel for the first time).
- The full list of available locales is accessible on [Strapi's Github repo](https://github.com/strapi/strapi/blob/v4.0.0/packages/plugins/i18n/server/constants/iso-locales.json).

:::

##### Extending translations

Translation key/value pairs are declared in `@strapi/admin/admin/src/translations/[language-name].json` files. These keys can be extended through the `config.translations` key:

</Tabs>

A plugin's key/value pairs are declared independently in the plugin's files at `./admin/src/translations/[language-name].json`. These key/value pairs can similarly be extended in the `config.translations` key by prefixing the key with the plugin's name (i.e. `[plugin name].[key]: 'value'`) as in the following example:

</Tabs>

If more translations files should be added, place them in `./src/admin/extensions/translations` folder.

#### Logos

The Strapi admin panel displays a logo in 2 different locations, represented by 2 different keys in the [admin panel configuration](#configuration-options):

| Location in the UI     | Configuration key to update |
| ---------------------- | --------------------------- |
| On the login page      | `config.auth.logo`          |
| In the main navigation | `config.menu.logo`          |

<details>
<summary>Logos location in the admin panel:</summary>
<figure style={imgStyle}>
  <img src="/img/assets/development/config-auth-logo.png" alt="Simplified Strapi backend diagram with controllers highlighted" />
  <em><figcaption >The logo handled by <code>config.auth.logo</code> logo is only shown on the login screen.</figcaption></em>
</figure>
<br/>
<figure style={imgStyle}>
  <img src="/img/assets/development/config-menu-logo.png" alt="Location of Menu logo" />
  <em><figcaption >The logo handled by <code>config.menu.logo</code> logo is located in the main navigation at the top left corner of the admin panel.</figcaption></em>
</figure>
</details>

To update the logos, put image files in the `./src/admin/extensions` folder and update the corresponding keys. There is no size limit for image files set through the configuration files.

:::note
Both logos can also be customized directly via the admin panel (see [User Guide](/user-docs/settings/admin-panel.md)).
Logos uploaded via the admin panel supersede any logo set through the configuration files.
:::

#### Favicon

To replace the favicon, use the following procedure:

1. (_optional_) Create a `./src/admin/extensions/` folder if the folder does not already exist.
2. Upload your favicon into `./src/admin/extensions/`.
3. Replace the existing **favicon.png|ico** file at the Strapi application root with a custom `favicon.png|ico` file.
4. Update `./src/admin/app.js` with the following:

   ```js title="./src/admin/app.js"
   import favicon from "./extensions/favicon.png";

   export default {
     config: {
       // replace favicon with a custom icon
       head: {
         favicon: favicon,
       },
     },
   };
   ```

5. Rebuild, launch and revisit your Strapi app by running `yarn build && yarn develop` in the terminal.

:::tip
This same process may be used to replace the login logo (i.e. `AuthLogo`) and menu logo (i.e. `MenuLogo`) (see [logos customization documentation](#logos)).
:::

:::caution
Make sure that the cached favicon is cleared. It can be cached in your web browser and also with your domain management tool like Cloudflare's CDN.
:::

#### Tutorial videos

To disable the information box containing the tutorial videos, set the `config.tutorials` key to `false`.

#### Releases notifications

To disable notifications about new Strapi releases, set the `config.notifications.releases` key to `false`.

#### Theme extension

Strapi applications can be displayed either in Light or Dark mode (see [administrator profile setup in the User Guide](/user-docs/intro#setting-up-your-administrator-profile)), and both can be extended through custom theme settings.

To extend the theme, use either:

- the `config.theme.light` key for the Light mode
- the `config.theme.dark` key for the Dark mode

:::strapi Strapi Design System
The default [Strapi theme](https://github.com/strapi/design-system/tree/main/packages/strapi-design-system/src/themes) defines various theme-related keys (shadows, colors…) that can be updated through the `config.theme.light` and `config.theme.dark` keys in `./admin/src/app.js`. The [Strapi Design System](https://design-system.strapi.io/) is fully customizable and has a dedicated [StoryBook](https://design-system-git-main-strapijs.vercel.app) documentation.
:::

:::caution
The former syntax for `config.theme` without `light` or `dark` keys is deprecated and will be removed in the next major release. We encourage you to update your custom theme to use the new syntax that supports light and dark modes.
:::

### WYSIWYG editor

To change the current WYSIWYG, you can install a [third-party plugin](https://market.strapi.io/), create your own plugin (see [creating a new field in the admin panel](/dev-docs/custom-fields)) or take advantage of the [bootstrap lifecycle](/dev-docs/api/plugins/admin-panel-api#bootstrap) and the [extensions](#extension) system:

</Tabs>

### Email templates

Email templates should be edited through the admin panel, using the [Users and Permissions plugin settings](/user-docs/settings/configuring-users-permissions-plugin-settings#configuring-email-templates).

## Bundlers (experimental)

2 different bundlers can be used with your Strapi application, [webpack](#webpack) and [vite](#vite).

### Webpack

In v4 this is the defacto bundler that Strapi uses to build the admin panel.

:::prerequisites
Make sure to rename the default `webpack.config.example.js` file into `webpack.config.[js|ts]` before customizing webpack.
:::

In order to extend the usage of webpack v5, define a function that extends its configuration inside `./my-app/src/admin/webpack.config.[js|ts]`:

</Tabs>

### Vite

:::caution
This is considered experimental. Please report any issues you encounter.
:::

To use `vite` as a bundler you will need to pass it as an option to the `strapi develop` command:

```bash
strapi develop --watch-admin --bundler=vite
```

To extend the usage of `vite`, define a function that extends its configuration inside `./my-app/src/admin/vite.config.[js|ts]`:

</Tabs>

## Extension

There are 2 use cases to extend the admin panel:

- A plugin developer wants to develop a Strapi plugin that extends the admin panel everytime it's installed in any Strapi application. This can be done by taking advantage of the [Admin Panel API](/dev-docs/api/plugins/admin-panel-api).

- A Strapi user only needs to extend a specific instance of a Strapi application. This can be done by directly updating the `./src/admin/app.js` file, which can import any file located in `./src/admin/extensions`.

## Deployment

The administration is a React front-end application calling an API. The front end and the back end are independent and can be deployed on different servers, which brings us to different scenarios:

- Deploy the entire project on the same server.
- Deploy the administration panel on a server (AWS S3, Azure, etc) different from the API server.

Build configurations differ for each case.

Before deployment, the admin panel needs to be built, by running the following command from the project's root directory:

</Tabs>

This will replace the folder's content located at `./build`. Visit [http://localhost:1337/admin](http://localhost:1337/admin) to make sure customizations have been taken into account.

### Same server

Deploying the admin panel and the API on the same server is the default behavior. The build configuration will be automatically set. The server will start on the defined port and the administration panel will be accessible through `http://yourdomain.com:1337/admin`.

:::tip
You might want to [change the path to access the administration panel](#access-url).
:::

### Different servers

To deploy the front end and the back end on different servers, use the following configuration:

</Tabs>

After running `yarn build` with this configuration, the `build` folder will be created/overwritten. Use this folder to serve it from another server with the domain of your choice (e.g. `http://yourfrontend.com`).

The administration URL will then be `http://yourfrontend.com` and every request from the panel will hit the backend at `http://yourbackend.com`.

:::note
If you add a path to the `url` option, it won't prefix your app. To do so, use a proxy server like Nginx (see [optional software guides](/dev-docs/deployment#optional-software-guides)).
:::



# Strapi Content API
Source: https://docs-v4.strapi.io/dev-docs/api/content-api

# Strapi APIs to access your content

Once you've created and configured a Strapi project, created a data structure with the [Content-Type Builder](/user-docs/content-type-builder) and started adding data through the [Content Manager](/user-docs/content-manager), you likely would like to access your content.

From a front-end application, your content can be accessed through Strapi's Content API, which is exposed:
- by default through the [REST API](/dev-docs/api/rest)
- and also through the [GraphQL API](/dev-docs/api/graphql) if you installed the Strapi built-in [GraphQL plugin](/dev-docs/plugins/graphql).

REST and GraphQL APIs represent the top-level layers of the Content API exposed to external applications. Strapi also provides 2 lower-level APIs:

- The [Entity Service API](/dev-docs/api/entity-service) is the recommended API to interact with your application's database within the [backend server](/dev-docs/customization) or through [plugins](/dev-docs/plugins). The Entity Service is the layer that handles Strapi's complex data structures like components and dynamic zones, which the lower-level layers are not aware of.
- The [Query Engine API](/dev-docs/api/query-engine) interacts with the database layer at a lower level and is used under the hood to execute database queries. It gives unrestricted internal access to the database layer, but should be used only if the Entity Service API does not cover your use case.

```mermaid
  flowchart BT
      database[(Database)] <--> queryEngine[Query Engine API]
      subgraph Strapi backend
          direction BT
          queryEngine <--> entityService[Entity Service API]
          entityService <--> content([Your content])
          content <--> rest[REST API]
          content <--> graphql[GraphQL API]
      end
      rest <==> frontend{{Your frontend application}}
      graphql <==> frontend
      click rest "/dev-docs/api/rest"
      click graphql "/dev-docs/api/graphql"
      click entityService "/dev-docs/api/entity-service"
      click queryEngine "/dev-docs/api/query-engine"
```

<br/>

This documentation section includes reference information about the following Strapi APIs and some integration guides with 3rd party technologies:

:::note Plugin APIs
[Plugins](/dev-docs/plugins) also have their dedicated APIs: the Server API and the Admin Panel API. These plugin-related APIs are offered to develop plugins and allow a plugin to interact either with the back-end server of Strapi ([Server API](/dev-docs/api/plugins/server-api)) or with the admin panel of Strapi ([Admin Panel API](/dev-docs/api/plugins/admin-panel-api)).
:::



# Entity Service API
Source: https://docs-v4.strapi.io/dev-docs/api/entity-service

# Entity Service API

:::prerequisites
Before diving deeper into the Entity Service API documentation, it is recommended that you read the following introductions:
- the [backend customization introduction](/dev-docs/backend-customization),
- and the [Content API introduction](/dev-docs/api/content-api).
:::

The Strapi backend provides an Entity Service API, built on top of the [Query Engine API](/dev-docs/api/query-engine/). The Entity Service is the layer that handles Strapi's complex data structures like [components](/dev-docs/backend-customization/models#components) and [dynamic zones](/dev-docs/backend-customization/models#dynamic-zones), and uses the Query Engine API under the hood to execute database queries.

:::strapi Entity Service API vs. Query Engine API



# Components and Dynamic Zones
Source: https://docs-v4.strapi.io/dev-docs/api/entity-service/components-dynamic-zones

# Components and dynamic zones

The [Entity Service](/dev-docs/api/entity-service) is the layer that handles [components](/dev-docs/backend-customization/models#components) and [dynamic zones](/dev-docs/backend-customization/models#dynamic-zones) logic. With the Entity Service API, components and dynamic zones can be [created](#creation) and [updated](#update) while creating or updating entries.

## Creation

A [component](/dev-docs/backend-customization/models#components) can be created while creating an entry with the Entity Service API:

```js
strapi.entityService.create('api::article.article', {
  data: {
    myComponent: {
      foo: 'bar',
    },
  },
});
```

A [dynamic zone](/dev-docs/backend-customization/models#dynamic-zones) (i.e. a list of components) can be created while creating an entry with the Entity Service API:

```js
strapi.entityService.create('api::article.article', {
  data: {
    myDynamicZone: [
      {
        __component: 'compo.type',
        foo: 'bar',
      },
      {
        __component: 'compo.type2',
        foo: 'bar',
      },
    ],
  },
});
```

## Update

A [component](/dev-docs/backend-customization/models#components) can be updated while updating an entry with the Entity Service API. If a component `id` is specified, the component is updated, otherwise the old one is deleted and a new one is created:

```js
strapi.entityService.update('api::article.article', 1, {
  data: {
    myComponent: {
      id: 1, // will update component with id: 1 (if not specified, would have deleted it and created a new one)
      foo: 'bar',
    },
  },
});
```

A [dynamic zone](/dev-docs/backend-customization/models#dynamic-zones) (i.e. a list of components) can be updated while updating an entry with the Entity Service API. If a component `id` is specified, the component is updated, otherwise the old one is deleted and a new one is created:

```js
strapi.entityService.update('api::article.article', 1, {
  data: {
    myDynamicZone: [
      {
        // will update
        id: 2,
        __component: 'compo.type',
        foo: 'bar',
      },
      {
        // will add a new & delete old ones
        __component: 'compo.type2',
        foo: 'bar2',
      },
    ],
  },
});
```



# CRUD operations
Source: https://docs-v4.strapi.io/dev-docs/api/entity-service/crud

# CRUD operations

The [Entity Service API](/dev-docs/api/entity-service) is built on top of the the [Query Engine API](/dev-docs/api/query-engine) and uses it to perform CRUD operations on entities.

The `uid` parameter used in function calls for this API is a `string` built with the following format: `[category]::[content-type]` where `category` is one of: `admin`, `plugin` or `api`.

Examples:
- A correct `uid` to get users of the Strapi admin panel is `admin::user`.
- A possible `uid` for the Upload plugin could be `plugin::upload.file`.
- As the `uid`s for user-defined custom content-types follow the `api::[content-type]` syntax, if a content-type `article` exists, it is referenced by `api::article.article`.

:::tip
Run the [`strapi content-types:list`](/dev-docs/cli#strapi-content-types-list) command in a terminal to display all possible content-types' `uid`s for a specific Strapi instance.
:::

## findOne()

Finds the first entry matching the parameters.

Syntax: `findOne(uid: string, id: ID, parameters: Params)` ⇒ `Entry`

### Parameters

| Parameter  | Description | Type |
| ---------- | --------------- | --------------- |
| `fields`   | Attributes to return | `String[]`  |
| `populate` | Relations, components and dynamic zones to [populate](/dev-docs/api/entity-service/populate) | [`PopulateParameter`](/dev-docs/api/entity-service/populate) |

### Example

```js
const entry = await strapi.entityService.findOne('api::article.article', 1, {
  fields: ['title', 'description'],
  populate: { category: true },
});
```

## findMany()

Finds entries matching the parameters.

Syntax: `findMany(uid: string, parameters: Params)` ⇒ `Entry[]`

### Parameters

| Parameter   | Description | Type   |
| ----------- | ------ | -------------- |
| `fields`  | Attributes to return   | `String[]`  |
| `filters` | [Filters](/dev-docs/api/entity-service/filter) to use   | [`FiltersParameters`](/dev-docs/api/entity-service/filter)             |
| `start`   | Number of entries to skip (see [pagination](/dev-docs/api/entity-service/order-pagination#pagination))   | `Number`  |
| `limit`   | Number of entries to return (see [pagination](/dev-docs/api/entity-service/order-pagination#pagination)) | `Number`  |
| `sort`   | [Order](/dev-docs/api/entity-service/order-pagination) definition  | [`OrderByParameter`](/dev-docs/api/entity-service/order-pagination) |
| `populate`  | Relations, components and dynamic zones to [populate](/dev-docs/api/entity-service/populate)  | [`PopulateParameter`](/dev-docs/api/entity-service/populate)         |
| `publicationState` | Publication state, can be:<ul><li>`live` to return only published entries</li><li>`preview` to return both draft entries & published entries (default)</li></ul>   | `PublicationStateParameter`  |

:::note
For single types, "findMany" returns the entry data as an object instead of an array of entries.
:::

### Example

```js
const entries = await strapi.entityService.findMany('api::article.article', {
  fields: ['title', 'description'],
  filters: { title: 'Hello World' },
  sort: { createdAt: 'DESC' },
  populate: { category: true },
});
```

<br/>

:::tip
To retrieve only draft entries, combine the `preview` publication state and the `publishedAt` fields:

```js
const entries = await strapi.entityService.findMany('api::article.article', {
  publicationState: 'preview',
  filters: {
    publishedAt: {
      $null: true,
    },
  },
});

:::

## create()

Creates one entry and returns it

Syntax: `create(uid: string, parameters: Params)` ⇒ `Entry`

### Parameters

| Parameter  | Description | Type |
| ---------- | ----------- | ---------- |
| `fields`   | Attributes to return | `String[]`  |
| `populate` | Relations, components and dynamic zones to [populate](/dev-docs/api/entity-service/populate) | [`PopulateParameter`](/dev-docs/api/entity-service/populate) |
| `data`     | Input data  | `Object` |

### Example

```js
const entry = await strapi.entityService.create('api::article.article', {
  data: {
    title: 'My Article',
  },
});
```

## update()

Updates one entry and returns it.

:::note
`update()` only performs a partial update, so existing fields that are not included won't be replaced.
:::

Syntax: `update(uid: string, id: ID, parameters: Params)` ⇒ `Entry`

### Parameters

| Parameter  | Description | Type |
| ---------- | ------------- | ---------- |
| `fields`   | Attributes to return | `String[]`  |
| `populate` | Relations, components and dynamic zones to [populate](/dev-docs/api/entity-service/populate) | [`PopulateParameter`](/dev-docs/api/entity-service/populate) |
| `data`     | Input data  | `object`  |

### Example

```js
const entry = await strapi.entityService.update('api::article.article', 1, {
  data: {
    title: 'xxx',
  },
});
```

## delete()

Deletes one entry and returns it.

Syntax: `delete(uid: string, id: ID, parameters: Params)` ⇒ `Entry`

### Parameters

| Parameter  | Description | Type |
| ---------- | --------- | -------- |
| `fields`   | Attributes to return | `String[]`  |
| `populate` | Relations, components and dynamic zones to [populate](/dev-docs/api/entity-service/populate) | [`PopulateParameter`](/dev-docs/api/entity-service/populate) |

### Example

```js
const entry = await strapi.entityService.delete('api::article.article', 1);
```



# Filtering
Source: https://docs-v4.strapi.io/dev-docs/api/entity-service/filter

# Filtering

The [Entity Service API](/dev-docs/api/entity-service) offers the ability to filter results found with its [findMany()](/dev-docs/api/entity-service/crud#findmany) method.

Results are filtered with the `filters` parameter that accepts [logical operators](#logical-operators) and [attribute operators](#attribute-operators). Every operator should be prefixed with `$`.

## Logical operators

### `$and`

All nested conditions must be `true`.

**Example**

```js
const entries = await strapi.entityService.findMany('api::article.article', {
  filters: {
    $and: [
      {
        title: 'Hello World',
      },
      {
        createdAt: { $gt: '2021-11-17T14:28:25.843Z' },
      },
    ],
  },
});
```

`$and` will be used implicitly when passing an object with nested conditions:

```js
const entries = await strapi.entityService.findMany('api::article.article', {
  filters: {
    title: 'Hello World',
    createdAt: { $gt: '2021-11-17T14:28:25.843Z' },
  },
});
```

### `$or`

One or many nested conditions must be `true`.

**Example**

```js
const entries = await strapi.entityService.findMany('api::article.article', {
  filters: {
    $or: [
      {
        title: 'Hello World',
      },
      {
        createdAt: { $gt: '2021-11-17T14:28:25.843Z' },
      },
    ],
  },
});
```

### `$not`

Negates the nested conditions.

**Example**

```js
const entries = await strapi.entityService.findMany('api::article.article', {
  filters: {
    $not: {
      title: 'Hello World',
    },
  },
});
```

:::note
`$not` can be used as:

- a logical operator (e.g. in `filters: { $not: { // conditions… }}`)
- [an attribute operator](#not-2) (e.g. in `filters: { attribute-name: $not: { … } }`).
:::

:::tip
`$and`, `$or` and `$not` operators are nestable inside of another `$and`, `$or` or `$not` operator.
:::

## Attribute Operators

:::caution
Using these operators may give different results depending on the database's implementation, as the comparison is handled by the database and not by Strapi.
:::

### `$not`

Negates the nested condition(s).

**Example**

```js
const entries = await strapi.entityService.findMany('api::article.article', {
  filters: {
    title: {
      $not: {
        $contains: 'Hello World',
      },
    },
  },
});
```

### `$eq`

Attribute equals input value.

**Example**

```js
const entries = await strapi.entityService.findMany('api::article.article', {
  filters: {
    title: {
      $eq: 'Hello World',
    },
  },
});
```

`$eq` can be omitted:

```js
const entries = await strapi.entityService.findMany('api::article.article', {
  filters: {
    title: 'Hello World',
  },
});
```

### `$eqi`

Attribute equals input value (case-insensitive).

**Example**

```js
const entries = await strapi.entityService.findMany('api::article.article', {
  filters: {
    title: {
      $eqi: 'HELLO World',
    },
  },
});
```

### `$ne`

Attribute does not equal input value.

**Example**

```js
const entries = await strapi.entityService.findMany('api::article.article', {
  filters: {
    title: {
      $ne: 'ABCD',
    },
  },
});
```

### `$nei`

Attribute does not equal input value (case-insensitive).

**Example**

```js
const entries = await strapi.entityService.findMany('api::article.article', {
  filters: {
    title: {
      $nei: 'abcd',
    },
  },
});
```

### `$in`

Attribute is contained in the input list.

**Example**

```js
const entries = await strapi.entityService.findMany('api::article.article', {
  filters: {
    title: {
      $in: ['Hello', 'Hola', 'Bonjour'],
    },
  },
});
```

`$in` can be omitted when passing an array of values:

```js
const entries = await strapi.entityService.findMany('api::article.article', {
  filters: {
    title: ['Hello', 'Hola', 'Bonjour'],
  },
});
```

### `$notIn`

Attribute is not contained in the input list.

**Example**

```js
const entries = await strapi.entityService.findMany('api::article.article', {
  filters: {
    title: {
      $notIn: ['Hello', 'Hola', 'Bonjour'],
    },
  },
});
```

### `$lt`

Attribute is less than the input value.

**Example**

```js
const entries = await strapi.entityService.findMany('api::article.article', {
  filters: {
    rating: {
      $lt: 10,
    },
  },
});
```

### `$lte`

Attribute is less than or equal to the input value.

**Example**

```js
const entries = await strapi.entityService.findMany('api::article.article', {
  filters: {
    rating: {
      $lte: 10,
    },
  },
});
```

### `$gt`

Attribute is greater than the input value.

**Example**

```js
const entries = await strapi.entityService.findMany('api::article.article', {
  filters: {
    rating: {
      $gt: 5,
    },
  },
});
```

### `$gte`

Attribute is greater than or equal to the input value.

**Example**

```js
const entries = await strapi.entityService.findMany('api::article.article', {
  filters: {
    rating: {
      $gte: 5,
    },
  },
});
```

### `$between`

Attribute is between the 2 input values, boundaries included (e.g., `$between[1, 3]` will also return `1` and `3`).

**Example**

```js
const entries = await strapi.entityService.findMany('api::article.article', {
  filters: {
    rating: {
      $between: [1, 20],
    },
  },
});
```

### `$contains`

Attribute contains the input value (case-sensitive).

**Example**

```js
const entries = await strapi.entityService.findMany('api::article.article', {
  filters: {
    title: {
      $contains: 'Hello',
    },
  },
});
```

### `$notContains`

Attribute does not contain the input value (case-sensitive).

**Example**

```js
const entries = await strapi.entityService.findMany('api::article.article', {
  filters: {
    title: {
      $notContains: 'Hello',
    },
  },
});
```

### `$containsi`

Attribute contains the input value. `$containsi` is not case-sensitive, while [$contains](#contains) is.

**Example**

```js
const entries = await strapi.entityService.findMany('api::article.article', {
  filters: {
    title: {
      $containsi: 'hello',
    },
  },
});
```

### `$notContainsi`

Attribute does not contain the input value. `$notContainsi` is not case-sensitive, while [$notContains](#notcontains) is.

**Example**

```js
const entries = await strapi.entityService.findMany('api::article.article', {
  filters: {
    title: {
      $notContainsi: 'hello',
    },
  },
});
```

### `$startsWith`

Attribute starts with input value.

**Example**

```js
const entries = await strapi.entityService.findMany('api::article.article', {
  filters: {
    title: {
      $startsWith: 'ABCD',
    },
  },
});
```

### `$endsWith`

Attribute ends with input value.

**Example**

```js
const entries = await strapi.entityService.findMany('api::article.article', {
  filters: {
    title: {
      $endsWith: 'ABCD',
    },
  },
});
```

### `$null`

Attribute is `null`.

**Example**

```js
const entries = await strapi.entityService.findMany('api::article.article', {
  filters: {
    title: {
      $null: true,
    },
  },
});
```

### `$notNull`

Attribute is not `null`.

**Example**

```js
const entries = await strapi.entityService.findMany('api::article.article', {
  filters: {
    title: {
      $notNull: true,
    },
  },
});
```



# Ordering & Pagination
Source: https://docs-v4.strapi.io/dev-docs/api/entity-service/order-pagination

# Ordering & Pagination

The [Entity Service API](/dev-docs/api/entity-service) offers the ability to [order](#ordering) and [paginate](#pagination) results found with its [findMany()](/dev-docs/api/entity-service/crud#findmany) method.

## Ordering

To order results returned by the Entity Service API, use the `sort` parameter. Results can be ordered based on a [single](#single) or on [multiple](#multiple) attribute(s) and can also use [relational ordering](#relational-ordering).

### Single

To order results by a single field, pass it to the `sort` parameter either:

- as a `string` to sort with the default ascending order, or
- as an `object` to define both the field name and the order (i.e. `'asc'` for ascending order or `'desc'` for descending order)

```js
strapi.entityService.findMany('api::article.article', {
  sort: 'id',
});

// single with direction
strapi.entityService.findMany('api::article.article', {
  sort: { id: 'desc' },
});
```

### Multiple

To order results by multiple fields, pass the fields as an array to the `sort` parameter either:

- as an array of strings to sort multiple fields using the default ascending order, or
- as an array of objects to define both the field name and the order (i.e. `'asc'` for ascending order or `'desc'` for descending order)

```js
strapi.entityService.findMany('api::article.article', {
  sort: ['publishDate', 'name'],
});

// multiple with direction
strapi.entityService.findMany('api::article.article', {
  sort: [{ title: 'asc' }, { publishedAt: 'desc' }],
});
```

### Relational ordering

Fields can also be sorted based on fields from relations:

```js
strapi.entityService.findMany('api::article.article', {
  sort: {
    author: {
      name: 'asc',
    },
  },
});
```

## Pagination

Results can be paginated using 2 different strategies (see [REST API documentation](/dev-docs/api/rest/sort-pagination#pagination) for more details):

- pagination by page, when defining the `page` and `pageSize` parameters,
- and pagination by offset, when defining the `start` and `limit` parameters.

2 different functions can be used to paginate results with the Entity Service API and accept different pagination strategies: 

| Function name | Possible pagination method(s)                               |
| ------------- | ----------------------------------------------------------- |
| `findMany()`  | Offset pagination only                                      |
| `findPage()`  | <ul><li>Offset pagination</li><li>Page pagination</li></ul> |

</Tabs>

</TabItem>
</Tabs>



# Populating
Source: https://docs-v4.strapi.io/dev-docs/api/entity-service/populate

# Populating

The [Entity Service API](/dev-docs/api/entity-service) does not populate relations, components or dynamic zones by default.

## Basic populating

To populate all the root level relations, use `populate: '*'`:

```js
const entries = await strapi.entityService.findMany('api::article.article', {
  populate: '*',
});
```

Populate various component or relation fields by passing an array of attribute names:

```js
const entries = await strapi.entityService.findMany('api::article.article', {
  populate: ['componentA', 'relationA'],
});
```

## Advanced populating

An object can be passed for more advanced populating:

```js
const entries = await strapi.entityService.findMany('api::article.article', {
  populate: {
    relationA: true,
    repeatableComponent: {
      fields: ['fieldA'],
      filters: {},
      sort: 'fieldA:asc',
      populate: {
        relationB: true,
      },
    },
  },
});
```

Complex populating can be achieved by using the [`filters` parameter](/dev-docs/api/entity-service/filter) and select or populate nested relations or components:

```js
const entries = await strapi.entityService.findMany('api::article.article', {
  populate: {
    relationA: {
      filters: {
        name: {
          $contains: 'Strapi',
        },
      },
    },

    repeatableComponent: {
      fields: ['someAttributeName'],
      sort: ['someAttributeName'],
      populate: {
        componentRelationA: true,
      },
    },
  },
});
```

## Populate fragments

When dealing with polymorphic data structures (dynamic zones, polymorphic relations, etc...), it is possible to use populate fragments to have a better granularity on the populate strategy.

```js
const entries = await strapi.entityService.findMany('api::article.article', {
  populate: {
    dynamicZone: {
      on: {
        'components.foo': {
          fields: ['title'],
          filters: { title: { $contains: 'strapi' } },
        },
        'components.bar': {
          fields: ['name'],
        },
      },
    },

    morphAuthor: {
      on: {
        'plugin::users-permissions.user': {
          fields: ['username'],
        },
        'api::author.author': {
          fields: ['name'],
        },
      },
    },
  },
});
```



# GraphQL API
Source: https://docs-v4.strapi.io/dev-docs/api/graphql

# GraphQL API

:::prerequisites
To use the GraphQL API, install the [GraphQL](/dev-docs/plugins/graphql.md) plugin.
:::

The GraphQL API allows performing queries and mutations to interact with the [content-types](/dev-docs/backend-customization/models#content-types) through Strapi's [GraphQL plugin](/dev-docs/plugins/graphql.md). Results can be [filtered](#filters), [sorted](#sorting) and [paginated](#pagination).

## Unified response format

Responses are unified with the GraphQL API in that:

- queries and mutations that return information for a single entry mainly use a `XxxEntityResponse` type
- queries and mutations that return i️nformation for multiple entries mainly use a `XxxEntityResponseCollection` type, which includes `meta` information (with [pagination](#pagination)) in addition to the data itself

Responses can also include an `error` (see [error handling documentation](/dev-docs/error-handling.md)).

```graphql title="Example: Response formats for queries and mutations with an example 'Article' content-type"
type ArticleEntityResponse {
    data: ArticleEntity
}

type ArticleEntityResponseCollection {
    data: [ArticleEntityResponse!]!
    meta: ResponseCollectionMeta!
}

query {
    article(...): ArticleEntityResponse # find one
    articles(...): ArticleEntityResponseCollection # find many
}

mutation {
    createArticle(...): ArticleEntityResponse # create
    updateArticle(...): ArticleEntityResponse # update
    deleteArticle(...): ArticleEntityResponse # delete
}
```

## Queries

Queries in GraphQL are used to fetch data without modifying it.

We assume that the [Shadow CRUD](/dev-docs/plugins/graphql#shadow-crud) feature is enabled. For each model, the GraphQL plugin auto-generates queries and mutations that mimics basic CRUD operations (findMany, findOne, create, update, delete).

### Fetch a single entry

Single entries can be found by their `id`.

```graphql title="Example query: Find the entry with id 1"
query {
  document(id: 1) {
    data {
      id
      attributes {
        title
        categories {
          data {
            id
            attributes {
              name
            }
          }
        }
      }
    }
  }
}
```

### Fetch multiple entries

```graphql title="Example query: Find all documents and populate 'categories' relation with the 'name' attribute"
query {
  documents {
    data {
      id
      attributes {
        title
        categories {
          data {
            id
            attributes {
                name
            }
          }
        }
      }
    }
    meta {
      pagination {
        page
        pageSize
        total
        pageCount
      }
    }
  }
}
```

### Fetch dynamic zone data

Dynamic zones are union types in graphql so you need to use fragments to query the fields.

```graphql
query {
  restaurants {
    data {
      attributes {
        dynamiczone {
          __typename
          ...on ComponentDefaultClosingperiod {
            label
          }
        }
      }
    }
  }
}
```

## Mutations

Mutations in GraphQL are used to modify data (e.g. create, update, delete data).

### Create a new entry

```graphql
mutation createArticle {
  createArticle(data: { title: "Hello"}) {
    data {
      id
      attributes {
        title
      }
    }
  }
}
```

The implementation of the mutations also supports relational attributes. For example, you can create a new `User` and attach many `Restaurant` to it by writing your query like this:

```graphql
mutation {
  createUser(
    data: {
      username: "John"
      email: "john@doe.com"
      restaurants: ["1", "2"]
    }
  ) {
    data {
      id
      attributes {
        username
        email
        restaurants {
          data {
            id 
            attributes {
              name
              description
              price
            }
          }
        }
      }
    }
  }
}
```

### Update an existing entry

```graphql
mutation updateArticle {
  updateArticle(id: "1", data: { title: "Hello" }) {
    data {
      id
      attributes {
        title
      }
    }
  }
}
```

You can also update relational attributes by passing an ID or an array of IDs (depending on the relationship).

```graphql
mutation {
  updateRestaurant(
    id: "5b5b27f8164f75c29c728110"
    data: {
      chef: "1" // User ID
    }
  }) {
    data {
      id
      attributes {
        chef {
          data {
            attributes {
              username
              email
            }
          }
        }
      }
    }
  }
}
```

### Delete an entry

```graphql
mutation deleteArticle {
  deleteArticle(id: 1) {
    data {
      id
      attributes {
        title
      }
    }
  }
}
```

## Filters

Queries can accept a `filters` parameter with the following syntax:

`filters: { field: { operator: value } }`

Logical operators (`and`, `or`, `not`) can also be used and accept arrays of objects.

The following operators are available:

| Operator       | Description                        |
| -------------- | ---------------------------------- |
| `eq`           | Equal                              |
| `ne`           | Not equal                          |
| `lt`           | Less than                          |
| `lte`          | Less than or equal to              |
| `gt`           | Greater than                       |
| `gte`          | Greater than or equal to           |
| `in`           | Included in an array               |
| `notIn`        | Not included in an array           |
| `contains`     | Contains, case sensitive           |
| `notContains`  | Does not contain, case sensitive   |
| `containsi`    | Contains, case insensitive         |
| `notContainsi` | Does not contain, case insensitive |
| `null`         | Is null                            |
| `notNull`      | Is not null                        |
| `between`      | Is between                         |
| `startsWith`   | Starts with                        |
| `endsWith`     | Ends with                          |
| `and`          | Logical `and`                      |
| `or`           | Logical `or`                       |
| `not`          | Logical `not`                      |

```graphql title="Example query with filters"
{
  documents(filters: { name: { eq: "test" }, or: [{ price: { gt: 10 }}, { title: { startsWith: "Book" }}] }) {
    data {
      id
    }
  }
}
```

## Sorting

Queries can accept a `sort` parameter with the following syntax:

- to sort based on a single value: `sort: "value"` 
- to sort based on multiple values: `sort: ["value1", "value2"]`

The sorting order can be defined with `:asc` (ascending order, default, can be omitted) or `:desc` (for descending order).

```graphql title="Example request: Sorting on title by ascending order"
{
  documents(sort: "title") {
    data {
      id
    }
  }
}
```

```graphql title="Example request: Sorting on title by descending order"
{
  documents(sort: "title:desc") {
    data {
      id
    }
  }
}
```

```graphql title="Example request: Sorting on title by ascending order, then on price by descending order"
{
  documents(sort: ["title:asc", "price:desc"]) {
    data {
      id
    }
  }
}
```

## Pagination

Queries can accept a `pagination` parameter. Results can be paginated either by page or by offset.

:::note
Pagination methods can not be mixed. Always use either `page` with `pageSize` **or** `start` with `limit`.
:::

### Pagination by page

| Parameter              | Description | Default |
| ---------------------- | ----------- | ------- |
| `pagination[page]`     | Page number | 1       |
| `pagination[pageSize]` | Page size   | 10      |

```graphql title="Example query: Pagination by page"
{
  documents(pagination: { page: 1, pageSize: 10 }) {
    data {
      id
    }
    meta {
      pagination {
        page
        pageSize
        pageCount
        total
      }
    }
  }
}
```

### Pagination by offset

| Parameter           | Description                  | Default | Maximum |
| ------------------- | ---------------------------- | ------- | ------- |
| `pagination[start]` | Start value                  | 0       | -       |
| `pagination[limit]` | Number of entities to return | 10      | -1      |

```graphql title="Example query: Pagination by offset"
{
  documents(pagination: { start: 20, limit: 30 }) {
    data {
      id
    }
    meta {
      pagination {
        start
        limit
      }
    }
  }
}
```

:::tip
The default and maximum values for `pagination[limit]` can be [configured in the `./config/plugins.js`](/dev-docs/configurations/plugins#graphql-configuration) file with the `graphql.config.defaultLimit` and `graphql.config.maxLimit` keys.
:::



# Admin Panel API for plugins
Source: https://docs-v4.strapi.io/dev-docs/api/plugins/admin-panel-api

# Admin Panel API for plugins

A Strapi [plugin](/dev-docs/plugins) can interact with both the [back end](/dev-docs/api/plugins/server-api) and the front end of a Strapi application. The Admin Panel API is about the front end part, i.e. it allows a plugin to customize Strapi's [admin panel](/user-docs/intro).

The admin panel is a [React](https://reactjs.org/) application that can embed other React applications. These other React applications are the admin parts of each Strapi plugin.

:::prerequisites
You have [created a Strapi plugin](/dev-docs/plugins/development/create-a-plugin).
:::

The Admin Panel API includes:

- an [entry file](#entry-file) which exports the required interface,
- [lifecycle functions](#lifecycle-functions) and the `registerTrad()` [async function](#async-function),
- and several [specific APIs](#available-actions) for your plugin to interact with the admin panel.

:::note
The whole code for the admin panel part of your plugin could live in the `/strapi-admin.js|ts` or `/admin/src/index.js|ts` file. However, it's recommended to split the code into different folders, just like the [structure](/dev-docs/plugins/development/plugin-structure) created by the `strapi generate plugin` CLI generator command.
:::

## Entry file

The entry file for the Admin Panel API is `[plugin-name]/admin/src/index.js`. This file exports the required interface, with the following functions available:

| Function type      | Available functions                                                     |
| ------------------- | ------------------------------------------------------------------------ |
| Lifecycle functions | <ul><li> [register](#register)</li><li>[bootstrap](#bootstrap)</li></ul> |
| Async function      | [registerTrads](#registertrads)                                          |

## Lifecycle functions

### register()

**Type:** `Function`

This function is called to load the plugin, even before the app is actually [bootstrapped](#bootstrap). It takes the running Strapi application as an argument (`app`).

Within the register function, a plugin can:

* [register itself](#registerplugin) so it's available to the admin panel
* add a new link to the main navigation (see [Menu API](#menu-api))
* [create a new settings section](#createsettingsection)
* define [injection zones](#injection-zones-api)
* [add reducers](#reducers-api)

#### registerPlugin()

**Type:** `Function`

Registers the plugin to make it available in the admin panel.

This function returns an object with the following parameters:

| Parameter        | Type                     | Description                                                                                        |
| ---------------- | ------------------------ | -------------------------------------------------------------------------------------------------- |
| `id`             | String                   | Plugin id                                                                                          |
| `name`           | String                   | Plugin name                                                                                        |
| `injectionZones` | Object                   | Declaration of available [injection zones](#injection-zones-api)                                       |

:::note
Some parameters can be imported from the `package.json` file.
:::

**Example:**

```js title="my-plugin/admin/src/index.js"

// Auto-generated component

  register(app) {
    app.addMenuLink({
      to: `/plugins/${pluginId}`,
      icon: PluginIcon,
      intlLabel: {
        id: `${pluginId}.plugin.name`,
        defaultMessage: 'My plugin',
      },
      Component: async () => {
        const component = await import(/* webpackChunkName: "my-plugin" */ './pages/App');

        return component;
      },
      permissions: [], // array of permissions (object), allow a user to access a plugin depending on its permissions
    });
    app.registerPlugin({
      id: pluginId,
      name,
    });
  },
};
```

### bootstrap()

**Type**: `Function`

Exposes the bootstrap function, executed after all the plugins are [registered](#register).

Within the bootstrap function, a plugin can:

* extend another plugin, using `getPlugin('plugin-name')`,
* register hooks (see [Hooks API](#hooks-api))
* [add links to a settings section](#settings-api)

**Example:**

```js
module.exports = () => {
  return {
    // ...
    bootstrap(app) {
      // execute some bootstrap code
      app.injectContentManagerComponent('editView', 'right-links', { name: 'my-compo', Component: () => 'my-compo' })
    },
  };
};
```

## Async function

While [`register()`](#register) and [`bootstrap()`](#bootstrap) are lifecycle functions, `registerTrads()` is an async function.

### registerTrads()

**Type**: `Function`

To reduce the build size, the admin panel is only shipped with 2 locales by default (`en` and `fr`). The `registerTrads()` function is used to register a plugin's translations files and to create separate chunks for the application translations. It does not need to be modified.

<details>
<summary>Example: Register a plugin's translation files</summary>

```jsx

  async registerTrads({ locales }) {
    const importedTrads = await Promise.all(
      locales.map(locale => {
        return import(
          /* webpackChunkName: "[pluginId]-[request]" */ `./translations/${locale}.json`
        )
          .then(({ default: data }) => {
            return {
              data: prefixPluginTranslations(data, pluginId),
              locale,
            };
          })
          .catch(() => {
            return {
              data: {},
              locale,
            };
          });
      })
    );

    return Promise.resolve(importedTrads);
  },
};
```

</details>

## Available actions

The Admin Panel API allows a plugin to take advantage of several small APIs to perform actions. Use this table as a reference:

| Action                                   | API to use                              | Function to use                                   | Related lifecycle function  |
| ---------------------------------------- | --------------------------------------- | ------------------------------------------------- | --------------------------- |
| Add a new link to the main navigation    | [Menu API](#menu-api)                   | [`addMenuLink()`](#menu-api)                      | [`register()`](#register)   |
| Create a new settings section            | [Settings API](#settings-api)           | [`createSettingSection()`](#createsettingsection) | [`register()`](#register)   |
| Declare an injection zone                | [Injection Zones API](#injection-zones-api) | [`registerPlugin()`](#registerplugin)             | [`register()`](#register)   |
| Add a reducer                            | [Reducers API](#reducers-api)                                       | [`addReducers()`](#reducers-api)                      | [`register()`](#register)   |
| Create a hook                          | [Hooks API](#hooks-api)                 | [`createHook()`](#hooks-api)                    | [`register()`](#register)   |
| Add a single link to a settings section  | [Settings API](#settings-api)           | [`addSettingsLink()`](#addsettingslink)             | [`bootstrap()`](#bootstrap) |
| Add multiple links to a settings section | [Settings API](#settings-api)           | [`addSettingsLinks()`](#addsettingslinks)           | [`bootstrap()`](#bootstrap) |
| Inject a Component in an injection zone  | [Injection Zones API](#injection-zones-api) | [`injectComponent()`](#injection-zones-api)           | [`bootstrap()`](#register)  |
| Register a hook                          | [Hooks API](#hooks-api)                 | [`registerHook()`](#hooks-api)                    | [`bootstrap()`](#bootstrap)   |

:::tip Replacing the WYSIWYG
The WYSIWYG editor can be replaced by taking advantage of [custom fields](/dev-docs/custom-fields), for instance using the [CKEditor custom field plugin](https://market.strapi.io/plugins/@ckeditor-strapi-plugin-ckeditor).
:::

:::info
The admin panel supports dotenv variables.

All variables defined in a `.env` file and prefixed by `STRAPI_ADMIN_` are available while customizing the admin panel through `process.env`.
:::

### Menu API

The Menu API allows a plugin to add a new link to the main navigation through the `addMenuLink()` function with the following parameters:

| Parameter     | Type             | Description                                                                                                                                                                                                              |
| ------------- | ---------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| `to`          | String           | Path the link should point to                                                                                                                                                                                            |
| `icon`        | React Component       | Icon to display in the main navigation                                                                                                                                                                                   |
| `intlLabel`   | Object           | Label for the link, following the [React Int'l](https://formatjs.io/docs/react-intl) convention, with:<ul><li>`id`: id used to insert the localized label</li><li>`defaultMessage`: default label for the link</li></ul> |
| `Component`   | Async function   | Returns a dynamic import of the plugin entry point                                                                                                                                                                      |
| `permissions` | Array of Objects |  Permissions declared in the `permissions.js` file of the plugin                                                                                                                                                                                                                         |

:::note
`intlLabel.id` are ids used in translation files (`[plugin-name]/admin/src/translations/[language].json`)
:::

**Example:**

```jsx title="my-plugin/admin/src/index.js"

  register(app) {
    app.addMenuLink({
      to: '/plugins/my-plugin',
      icon: PluginIcon,
      intlLabel: {
        id: 'my-plugin.plugin.name',
        defaultMessage: 'My plugin',
      },
      Component: () => 'My plugin',
      permissions: [], // permissions to apply to the link
    });
    app.registerPlugin({ ... });
  },
  bootstrap() {},
};
```

### Settings API

The Settings API allows:

* [creating a new setting section](#createsettingsection)
* adding [a single link](#addsettingslink) or [multiple links at once](#addsettingslinks) to existing settings sections

:::note
Adding a new section happens in the [register](#register) lifecycle while adding links happens during the [bootstrap](#bootstrap) lifecycle.
:::

All functions accept links as objects with the following parameters:

| Parameter     | Type             | Description                                                                                                                                                                                                              |
| ------------- | ---------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| `id`          | String           | React id                                                                                                                                                                                                                 |
| `to`          | String           | Path the link should point to                                                                                                                                                                                            |
| `intlLabel`   | Object           | Label for the link, following the [React Int'l](https://formatjs.io/docs/react-intl) convention, with:<ul><li>`id`: id used to insert the localized label</li><li>`defaultMessage`: default label for the link</li></ul> |
| `Component`   | Async function   | Returns a dynamic import of the plugin entry point                                                                                                                                                                       |
| `permissions` | Array of Objects | Permissions declared in the `permissions.js` file of the plugin                                                                                                                                                          |

#### createSettingSection()

**Type**: `Function`

Create a new settings section.

The function takes 2 arguments:

| Argument        | Type             | Description                                                                                                                                                                                                                                                                                                                   |
| --------------- | ---------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| first argument  | Object           | Section label:<ul><li>`id` (String): section id</li><li>`intlLabel` (Object): localized label for the section, following the [React Int'l](https://formatjs.io/docs/react-intl) convention, with:<ul><li>`id`: id used to insert the localized label</li><li>`defaultMessage`: default label for the section</li></ul></li></ul> |
| second argument | Array of Objects | Links included in the section                                                                                                                                                                                                                                                                                                 |

:::note
`intlLabel.id` are ids used in translation files (`[plugin-name]/admin/src/translations/[language].json`)
:::

**Example:**

```jsx title="my-plugin/admin/src/index.js"

const myComponent = async () => {
  const component = await import(
    /* webpackChunkName: "users-providers-settings-page" */ './pages/Providers'
  );

  return component;
};

  register(app) {
    app.createSettingSection(
      { id: String, intlLabel: { id: String, defaultMessage: String } }, // Section to create
      [
        // links
        {
          intlLabel: { id: String, defaultMessage: String },
          id: String,
          to: String,
          Component: myComponent,
          permissions: Object[],
        },
      ]
    );
  },
};
```

#### addSettingsLink()

**Type**: `Function`

Add a unique link to an existing settings section.

**Example:**

```jsx title="my-plugin/admin/src/index.js"

const myComponent = async () => {
  const component = await import(
    /* webpackChunkName: "users-providers-settings-page" */ './pages/Providers'
  );

  return component;
};

  bootstrap(app) {
		// Adding a single link
		app.addSettingsLink(
		 'global', // id of the section to add the link to
			{
				intlLabel: { id: String, defaultMessage: String },
				id: String,
				to: String,
				Component: myComponent,
				permissions: Object[]
			}
    )
  }
}
```

#### addSettingsLinks()

**Type**: `Function`

Add multiple links to an existing settings section.

**Example:**

```jsx title="my-plugin/admin/src/index.js"

const myComponent = async () => {
  const component = await import(
    /* webpackChunkName: "users-providers-settings-page" */ './pages/Providers'
  );

  return component;
};

  bootstrap(app) {
    // Adding several links at once
    app.addSettingsLinks(
      'global', // id of the section to add the link in
        [{
          intlLabel: { id: String, defaultMessage: String },
          id: String,
          to: String,
          Component: myComponent,
          permissions: Object[]
        }]
    )
  }
}
```

### Injection Zones API

Injection zones refer to areas of a view's layout where a plugin allows another to inject a custom React component (e.g. a UI element like a button).

Plugins can use:

* Strapi's [predefined injection zones](#using-predefined-injection-zones) for the Content Manager,
* or custom injection zones, created by a plugin

:::note
Injection zones are defined in the [register()](#register) lifecycle but components are injected in the [bootstrap()](#bootstrap) lifecycle.
:::

#### Using predefined injection zones

<!-- TODO: link to the proper page once CM section of user guide is converted -->
Strapi admin panel comes with predefined injection zones so components can be added to the UI of the [Content Manager](/user-docs/intro):

<!-- TODO: maybe add screenshots once the design system is ready? -->

| View      | Injection zone name & Location                                                                                                                                            |
| --------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| List view | <ul><li>`actions`: sits between Filters and the cogs icon</li><li>`deleteModalAdditionalInfos()`: sits at the bottom of the modal displayed when deleting items</li></ul> |
| Edit view | <ul><li>`informations`: sits at the top right of the edit view</li><li>`right-links`: sits between "Configure the view" and "Edit" buttons</li></ul>                       |

#### Creating a custom injection zone

To create a custom injection zone, declare it as a `` React component with an `area` prop that takes a string with the following naming convention: `plugin-name.viewName.injectionZoneName`.

#### Injecting components

A plugin has 2 different ways of injecting a component:

* to inject a component from a plugin into another plugin's injection zones, use the `injectComponent()` function
* to specifically inject a component into one of the Content Manager's [predefined injection zones](#using-predefined-injection-zones), use the `injectContentManagerComponent()` function instead

Both the `injectComponent()` and `injectContentManagerComponent()` methods accept the following arguments:

| Argument        | Type   | Description                                                                                                                                                                   |
| --------------- | ------ | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| first argument  | String | The view where the component is injected
| second argument | String | The zone where the component is injected
| third argument  | Object | An object with the following keys:<ul><li>`name` (string): the name of the component</li><li>`Component` (function or class): the React component to be injected</li></ul> |

<details>
<summary>Example: Inject a component in the informations box of the Edit View of the Content Manager:</summary>

```jsx title="my-plugin/admin/src/index.js"

  bootstrap(app) {
    app.injectContentManagerComponent('editView', 'informations', {
      name: 'my-plugin-my-compo',
      Component: () => 'my-compo',
    });
  }
}
```

</details>

<details>
<summary>Example: Creating a new injection zone and injecting it from a plugin to another one:</summary>

```jsx title="my-plugin/admin/src/injectionZones.js"
// Use the injection zone in a view

const HomePage = () => {
  return (
    <main>
      <h1>This is the homepage</h1>
	    
    </main>
  );
};
```

```jsx title="my-plugin/admin/src/index.js"
// Declare this injection zone in the register lifecycle of the plugin

  register() {
    app.registerPlugin({
      // ...
      injectionZones: {
        homePage: {
          right: []
        }
      }
    });
  },
}
```

```jsx title="my-other-plugin/admin/src/index.js"
// Inject the component from a plugin in another plugin

  register() {
    // ...
  },
  bootstrap(app) {
    app.getPlugin('my-plugin').injectComponent('homePage', 'right', {
      name: 'my-other-plugin-component',
      Component: () => 'This component is injected',
    });
  }
};
```

</details>

#### Accessing data with the `useCMEditViewDataManager` React hook

Once an injection zone is defined, the component to be injected in the Content Manager can have access to all the data of the Edit View through the `useCMEditViewDataManager` React hook.

<details>
<summary>Example of a basic component using the 'useCMEditViewDataManager' hook</summary>

```js

const MyCompo = () => {
  const {
    createActionAllowedFields: [], // Array of fields that the user is allowed to edit
    formErrors: {}, // Object errors
    readActionAllowedFields: [], // Array of field that the user is allowed to edit
    slug: 'api::address.address', // Slug of the content-type
    updateActionAllowedFields: [],
    allLayoutData: {
      components: {}, // components layout
      contentType: {}, // content-type layout
    },
    initialData: {},
    isCreatingEntry: true,
    isSingleType: true,
    status: 'resolved',
    layout: {}, // Current content-type layout
    hasDraftAndPublish: true,
    modifiedData: {},
    onPublish: () => {},
    onUnpublish: () => {},
    addComponentToDynamicZone: () => {},
    addNonRepeatableComponentToField: () => {},
    addRelation: () => {},
    addRepeatableComponentToField: () => {},
    moveComponentDown: () => {},
    moveComponentField: () => {},
    moveComponentUp: () => {},
    moveRelation: () => {},
    onChange: () => {},
    onRemoveRelation: () => {},
    removeComponentFromDynamicZone: () => {},
    removeComponentFromField: () => {},
    removeRepeatableField: () => {},
  } = useCMEditViewDataManager()

  return null
}
```

</details>

### Reducers API

Reducers are [Redux](https://redux.js.org/) reducers that can be used to share state between components. Reducers can be useful when:

* Large amounts of application state are needed in many places in the application.
* The application state is updated frequently.
* The logic to update that state may be complex.

Reducers can be added to a plugin interface with the `addReducers()` function during the [`register`](#register) lifecycle.

A reducer is declared as an object with this syntax:

**Example:**

```js title="my-plugin/admin/src/index.js"

const reducers = {
  // Reducer Syntax
  [`${pluginId}_exampleReducer`]: exampleReducer
}

  register(app) {
    app.addReducers(reducers)
  },
  bootstrap() {},
};

```

### Hooks API

The Hooks API allows a plugin to create and register hooks, i.e. places in the application where plugins can add personalized behavior.

Hooks should be registered during the [bootstrap](#bootstrap) lifecycle of a plugin.

Hooks can then be run in series, in waterfall or in parallel:

* `runHookSeries` returns an array corresponding to the result of each function executed, ordered
* `runHookParallel` returns an array corresponding to the result of the promise resolved by the function executed, ordered
* `runHookWaterfall` returns a single value corresponding to all the transformations applied by the different functions starting with the initial value `args`.

<details>
<summary>Example: Create a hook in a plugin and use it in another plugin</summary>

```jsx title="my-plugin/admin/src/index.js"
// Create a hook in a plugin

  register(app) {
    app.createHook('My-PLUGIN/MY_HOOK');
  }
}

```

```jsx title="my-other-plugin/admin/src/index.js"
// Use the hook in another plugin

  bootstrap(app) {
    app.registerHook('My-PLUGIN/MY_HOOK', (...args) => {
      console.log(args)

      // important: return the mutated data
      return args
    });

    app.registerPlugin({...})
  }
}
```

</details>

#### Predefined hook

Strapi includes a predefined `Admin/CM/pages/ListView/inject-column-in-table` hook that can be used to add or mutate a column of the List View of the [Content Manager](/user-docs/intro).

<details>
<summary>Example: 'Admin/CM/pages/ListView/inject-column-in-table' hook, as used by the Internationalization plugin to add the 'Content available in' column</summary>

```jsx title="./plugins/my-plugin/admin/src/index.js"

  bootstrap(app) {
    app.registerHook(
      'Admin/CM/pages/ListView/inject-column-in-table',
      ({ displayedHeaders, layout }) => {
        const isFieldLocalized = get(
          layout,
          'contentType.pluginOptions.i18n.localized',
          false
        );
        if (!isFieldLocalized) {
          return { displayedHeaders, layout };
        }
        return {
          layout,
          displayedHeaders: [
            ...displayedHeaders,
            {
              key: '__locale_key__', // Needed for the table
              fieldSchema: { type: 'string' }, // Schema of the attribute
              metadatas: {
                label: 'Content available in', // Label of the header,
                sortable: true | false, // Define if the column is sortable
              }, // Metadatas for the label
              // Name of the key in the data we will display
              name: 'locales',
              // Custom renderer: props => Object.keys(props).map(key => <p key={key}>key</p>)
              cellFormatter,
            },
          ],
        };
      }
    );
  },
}
```

</details>



# Server API for plugins
Source: https://docs-v4.strapi.io/dev-docs/api/plugins/server-api

# Server API for plugins

A Strapi [plugin](/dev-docs/plugins) can interact with both the back end and the [front end](/dev-docs/api/plugins/admin-panel-api) of a Strapi application. The Server API is about the back-end part, i.e. how the plugin interacts with the server part of a Strapi application.

:::prerequisites
You have [created a Strapi plugin](/dev-docs/plugins/development/create-a-plugin).
:::

The Server API includes:

- an [entry file](#entry-file) which export the required interface,
- [lifecycle functions](#lifecycle-functions),
- a [configuration](#configuration) API,
- the ability to add [cron](#cron) jobs,
- and the ability to [customize all elements of the back-end server](#backend-customization).

Once you have declared and exported the plugin interface, you will be able to [use the plugin interface](#usage).

:::note
The whole code for the server part of your plugin could live in the `/strapi-server.js|ts` or `/server/index.js|ts` file. However, it's recommended to split the code into different folders, just like the [structure](/dev-docs/plugins/development/plugin-structure) created by the `strapi generate plugin` CLI generator command.
:::

## Entry file

To tap into the Server API, create a `strapi-server.js` file at the root of the plugin package folder. This file exports the required interface, with the following parameters available:

| Parameter type         | Available parameters                                                                                                                                                                                           |
| ---------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| Lifecycle functions    | <ul><li> [register](#register)</li><li>[bootstrap](#bootstrap)</li><li>[destroy](#destroy)</li></ul>                                                                                                           |
| Configuration          | <ul><li>[config](#configuration) object   </li> <li>[Cron](#cron)</li></ul>                                                                                                                                                                             |
| Backend customizations | <ul><li>[contentTypes](#content-types)</li><li>[routes](#routes)</li><li>[controllers](#controllers)</li><li>[services](#services)</li><li>[policies](#policies)</li><li>[middlewares](#middlewares)</li></ul> |

## Lifecycle functions

### register()

This function is called to load the plugin, before the application is [bootstrapped](#bootstrap), in order to register [permissions](/dev-docs/plugins/users-permissions), the server part of [custom fields](/dev-docs/custom-fields#registering-a-custom-field-on-the-server), or database migrations.

**Type**: `Function`

**Example:**

```js title="./src/plugins/my-plugin/strapi-server.js"

module.exports = () => ({
  register({ strapi }) {
    // execute some register code
  },
});
```

### bootstrap()

The [bootstrap](/dev-docs/configurations/functions#bootstrap) function is called right after the plugin has [registered](#register).

**Type**: `Function`

**Example:**

```js title="./src/plugins/my-plugin/strapi-server.js"

module.exports = () => ({
  bootstrap({ strapi }) {
    // execute some bootstrap code
  },
});
```

### destroy()

The [destroy](/dev-docs/configurations/functions#destroy) lifecycle function is called to cleanup the plugin (close connections, remove listeners, etc.) when the Strapi instance is destroyed.

**Type**: `Function`

**Example:**

```js title="./src/plugins/my-plugin/strapi-server.js"

module.exports = () => ({
  destroy({ strapi }) {
    // execute some destroy code
  },
});
```

## Configuration

`config` stores the default plugin configuration. It loads and validates the configuration inputted from the user within the [`./config/plugins.js` configuration file](/dev-docs/configurations/plugins).

**Type**: `Object`

| Parameter   | Type                                           | Description                                                                                                                                              |
| ----------- | ---------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `default`   | Object, or Function that returns an Object | Default plugin configuration, merged with the user configuration                                                                                         |
| `validator` | Function                                       | <ul><li>Checks if the results of merging the default plugin configuration with the user configuration is valid</li><li>Throws errors when the resulting configuration is invalid</li></ul> |

**Example:**

```js title="./src/plugins/my-plugin/strapi-server.js or ./src/plugins/my-plugin/server/index.js"

const config = require('./config');

module.exports = () => ({
  config: {
    default: ({ env }) => ({ optionA: true }),
    validator: (config) => { 
      if (typeof config.optionA !== 'boolean') {
        throw new Error('optionA has to be a boolean');
      }
    },
  },
});
```

Once defined, the configuration can be accessed:

- with `strapi.plugin('plugin-name').config('some-key')` for a specific configuration property,
- or with `strapi.config.get('plugin.plugin-name')` for the whole configuration object.

:::tip
Run `yarn strapi console` or `npm run strapi console` to access the strapi object in a live console.
:::

## Cron

The `cron` object allows you to add cron jobs to the Strapi instance.

```js title="./src/plugins/my-plugin/strapi-server.js"
module.exports = () => ({
  bootstrap({ strapi }) {
    strapi.cron.add({
      // runs every second
      myJob: {
        task: ({ strapi }) => {
          console.log("hello from plugin");
        },
        options: {
          rule: "* * * * * *",
        },
      },
    });
  },
});
```

To remove a CRON job you can call the remove function on the `strapi.cron` object and pass in the key corresponding to the CRON job you want to remove.

:::note
Cron jobs that are using the key as the rule can not be removed.
:::

```js
strapi.cron.remove("myJob");
```

### List cron jobs

To list all the cron jobs that are currently running you can call the `jobs` array on the `strapi.cron` object.

```js
strapi.cron.jobs
```

## Backend customization

All elements of the back-end server of Strapi can be customized through a plugin using the Server API.

:::prerequisites
To better understand this section, ensure you have read through the [back-end customization](/dev-docs/backend-customization) documentation of a Strapi application.
:::

### Content-types

An object with the [content-types](/dev-docs/backend-customization/models) the plugin provides.

**Type**: `Object`

:::note
Content-Types keys in the `contentTypes` object should re-use the `singularName` defined in the [`info`](/dev-docs/backend-customization/models#model-information) key of the schema.
:::

**Example:**

```js title="./src/plugins/my-plugin/strapi-server.js"

"use strict";

module.exports = require('./server');
```

```js title="path: ./src/plugins/my-plugin/server/index.js"

const contentTypes = require('./content-types');

module.exports = () => ({
  contentTypes,
});
```

```js title="path: ./src/plugins/my-plugin/server/content-types/index.js"

const contentTypeA = require('./content-type-a');
const contentTypeB = require('./content-type-b');

module.exports = {
  'content-type-a': { schema: contentTypeA }, // should re-use the singularName of the content-type
  'content-type-b': { schema: contentTypeB },
};
```

```js title="path: ./src/plugins/my-plugin/server/content-types/content-type-a.js"

module.exports = {
  kind: 'collectionType',
  collectionName: 'content-type',
  info: {
    singularName: 'content-type-a', // kebab-case mandatory
    pluralName: 'content-type-as', // kebab-case mandatory
    displayName: 'Content Type A',
    description: 'A regular content-type',
  },
  options: {
    draftAndPublish: true,
  },
  pluginOptions: {
    'content-manager': {
      visible: false,
    },
    'content-type-builder': {
      visible: false,
    }
  },
  attributes: {
    name: {
      type: 'string',
      min: 1,
      max: 50,
      configurable: false,
    },
  }
};
```

### Routes

An array of [routes](/dev-docs/backend-customization/routes) configuration.

**Type**: `Object[]`

**Examples:**

</Tabs>

### Controllers

An object with the [controllers](/dev-docs/backend-customization/controllers) the plugin provides.

**Type**: `Object`

**Example:**

```js title="./src/plugins/my-plugin/strapi-server.js"

"use strict";

module.exports = require('./server');
```

```js title="./src/plugins/my-plugin/server/index.js"

const controllers = require('./controllers');

module.exports = () => ({
  controllers,
});
```

```js title="./src/plugins/my-plugin/server/controllers/index.js"

const controllerA = require('./controller-a');
const controllerB = require('./controller-b');

module.exports = {
  controllerA,
  controllerB,
};
```

```js title="./src/plugins/my-plugin/server/controllers/controller-a.js"

module.exports = ({ strapi }) => ({
  doSomething(ctx) {
    ctx.body = { message: 'HelloWorld' };
  },
});
```

### Services

An object with the [services](/dev-docs/backend-customization/services) the plugin provides.

Services should be functions taking `strapi` as a parameter.

**Type**: `Object`

**Example:**

```js title="./src/plugins/my-plugin/strapi-server.js"

"use strict";

module.exports = require('./server');
```

```js title="./src/plugins/my-plugin/server/index.js"

const services = require('./services');

module.exports = () => ({
  services,
});
```

```js title="./src/plugins/my-plugin/server/services/index.js"

const serviceA = require('./service-a');
const serviceB = require('./service-b');

module.exports = {
  serviceA,
  serviceB,
};
```

```js title="./src/plugins/my-plugin/server/services/service-a.js"

module.exports = ({ strapi }) => ({
  someFunction() {
    return [1, 2, 3];
  },
});
```

### Policies

An object with the [policies](/dev-docs/backend-customization/policies) the plugin provides.

**Type**: `Object`

**Example:**

```js title="./src/plugins/my-plugin/strapi-server.js"

"use strict";

module.exports = require('./server');
```

```js title="./src/plugins/my-plugin/server/index.js"

const policies = require('./policies');

module.exports = () => ({
  policies,
});
```

```js title="./src/plugins/my-plugin/server/policies/index.js"

const policyA = require('./policy-a');
const policyB = require('./policy-b');

module.exports = {
  policyA,
  policyB,
};
```

```js title="./src/plugins/my-plugin/server/policies/policy-a.js"

module.exports = (policyContext, config, { strapi }) => {
    if (ctx.state.user && ctx.state.user.isActive) {
      return true;
    }

    return false;
};
```

### Middlewares

An object with the [middlewares](/dev-docs/configurations/middlewares) the plugin provides.

**Type**: `Object`

**Example:**

```js title="./src/plugins/my-plugin/server/middlewares/your-middleware.js"

/** 
 * The your-middleware.js file 
 * declares a basic middleware function and exports it.
 */
'use strict';
module.exports = async (ctx, next) => {
  console.log("your custom logic")
  await next();
}
```

```js title="./src/plugins/my-plugin/server/middlewares/index.js"

/**
 * The middleware function previously created
 * is imported from its file and
 * exported by the middlewares index.
 */
'use strict';
const yourMiddleware = require('./your-middleware');

module.exports = {
  yourMiddleware
};
```

```js title="./src/plugins/my-plugin/server/register.js"

/**
 * The middleware is called from 
 * the plugin's register lifecycle function.
 */
'use strict';
const middlewares = require('./middlewares');

module.exports = ({ strapi }) => {
  strapi.server.use(middlewares.yourMiddleware);
};
```

## Usage

Once a plugin is exported and loaded into Strapi, its features are accessible in the code through getters. The Strapi instance (`strapi`) exposes both top-level getters and global getters:

- top-level getters imply chaining functions<br/>(e.g., `strapi.plugin('the-plugin-name').controller('the-controller-name'`),
- global getters are syntactic sugar that allows direct access using a feature's uid<br/>(e.g., `strapi.controller('plugin::plugin-name.controller-name')`).

```js
// Access an API or a plugin controller using a top-level getter 
strapi.api['api-name'].controller('controller-name')
strapi.plugin('plugin-name').controller('controller-name')

// Access an API or a plugin controller using a global getter
strapi.controller('api::api-name.controller-name')
strapi.controller('plugin::plugin-name.controller-name')
```

<details>
<summary> Top-level getter syntax examples</summary>

```js
strapi.plugin('plugin-name').config
strapi.plugin('plugin-name').routes
strapi.plugin('plugin-name').controller('controller-name')
strapi.plugin('plugin-name').service('service-name')
strapi.plugin('plugin-name').contentType('content-type-name')
strapi.plugin('plugin-name').policy('policy-name')
strapi.plugin('plugin-name').middleware('middleware-name')
```

</details>

<details>
<summary> Global getter syntax examples</summary>

```js
strapi.controller('plugin::plugin-name.controller-name');
strapi.service('plugin::plugin-name.service-name');
strapi.contentType('plugin::plugin-name.content-type-name');
strapi.policy('plugin::plugin-name.policy-name');
strapi.middleware('plugin::plugin-name.middleware-name');
```

</details>

:::strapi Entity Service API
To interact with the content-types, use the [Entity Service API](/dev-docs/api/entity-service).
:::



# Query Engine API
Source: https://docs-v4.strapi.io/dev-docs/api/query-engine

# Query Engine API

:::prerequisites
Before diving deeper into the Query Engine API documentation, it is recommended that you read the following introductions:
- the [backend customization introduction](/dev-docs/backend-customization),
- and the [Content API introduction](/dev-docs/api/content-api).
:::

The Strapi backend provides a Query Engine API to interact with the database layer at a lower level. The Query Engine API should mostly be used by plugin developers and developers adding custom business logic to their applications.

👉  In most use cases, it's recommended to use the [Entity Service API](/dev-docs/api/entity-service/) instead of the Query Engine API.

:::strapi Entity Service API vs. Query Engine API



# Bulk Operations
Source: https://docs-v4.strapi.io/dev-docs/api/query-engine/bulk-operations

# Bulk Operations

:::caution
To avoid performance issues, bulk operations are not allowed on relations.
:::

## createMany()

Creates multiple entries.

Syntax: `createMany(parameters) => { count: number, ids: id[] }`

### Parameters

| Parameter | Type             | Description         |
| --------- | ---------------- | ------------------- |
| `data`    | Array of objects | Array of input data |

:::caution
* MySQL will only return an array of one id containing the last inserted id, not the entire list.
* Prior to Strapi v4.9.0, `createMany()` only returns the `count`. 
:::

### Example

```js
await strapi.db.query("api::blog.article").createMany({
  data: [
    {
      title: "ABCD",
    },
    {
      title: "EFGH",
    },
  ],
});

// { count: 2 , ids: [1,2]}
```

## updateMany()

Updates multiple entries matching the parameters.

Syntax: `updateMany(parameters) => { count: number }`

### Parameters

| Parameter | Type                                                      | Description                                             |
| --------- | --------------------------------------------------------- | ------------------------------------------------------- |
| `where`   | [`WhereParameter`](/dev-docs/api/query-engine/filtering/) | [Filters](/dev-docs/api/query-engine/filtering/) to use |
| `data`    | Object                                                    | Input data                                              |

### Example

```js
await strapi.db.query("api::shop.article").updateMany({
  where: {
    price: 20,
  },
  data: {
    price: 18,
  },
});

// { count: 42 }
```

## deleteMany()

Deletes multiple entries matching the parameters.

Syntax: `deleteMany(parameters) => { count: number }`

### Parameters

| Parameter | Type                                                      | Description                                             |
| --------- | --------------------------------------------------------- | ------------------------------------------------------- |
| `where`   | [`WhereParameter`](/dev-docs/api/query-engine/filtering/) | [Filters](/dev-docs/api/query-engine/filtering/) to use |

### Example

```js
await strapi.db.query("api::blog.article").deleteMany({
  where: {
    title: {
      $startsWith: "v3",
    },
  },
});

// { count: 42 }
```

## Aggregations

### count()

Counts entries matching the parameters.

Syntax: `count(parameters) => number`

#### Parameters

| Parameter | Type                                                      | Description                                             |
| --------- | --------------------------------------------------------- | ------------------------------------------------------- |
| `where`   | [`WhereParameter`](/dev-docs/api/query-engine/filtering/) | [Filters](/dev-docs/api/query-engine/filtering/) to use |

```js
const count = await strapi.db.query("api::blog.article").count({
  where: {
    title: {
      $startsWith: "v3",
    },
  },
});

// 12
```



# Filtering
Source: https://docs-v4.strapi.io/dev-docs/api/query-engine/filtering

# Filtering

The [Query Engine API](/dev-docs/api/query-engine/) offers the ability to filter results found with its [findMany()](/dev-docs/api/query-engine/single-operations#findmany) method.

Results are filtered with the `where` parameter that accepts [logical operators](#logical-operators) and [attribute operators](#attribute-operators). Every operator should be prefixed with `$`.

## Logical operators

### `$and`

All nested conditions must be `true`.

**Example**

```js
const entries = await strapi.db.query('api::article.article').findMany({
  where: {
    $and: [
      {
        title: 'Hello World',
      },
      {
        createdAt: { $gt: '2021-11-17T14:28:25.843Z' },
      },
    ],
  },
});
```

`$and` is used implicitly when passing an object with nested conditions:

```js
const entries = await strapi.db.query('api::article.article').findMany({
  where: {
    title: 'Hello World',
    createdAt: { $gt: '2021-11-17T14:28:25.843Z' },
  },
});
```

### `$or`

One or many nested conditions must be `true`.

**Example**

```js
const entries = await strapi.db.query('api::article.article').findMany({
  where: {
    $or: [
      {
        title: 'Hello World',
      },
      {
        createdAt: { $gt: '2021-11-17T14:28:25.843Z' },
      },
    ],
  },
});
```

### `$not`

Negates the nested conditions.

**Example**

```js
const entries = await strapi.db.query('api::article.article').findMany({
  where: {
    $not: {
      title: 'Hello World',
    },
  },
});
```

:::note
`$not` can be used:

- as a logical operator (e.g. in `where: { $not: { // conditions… }}`)
- or [as an attribute operator](#not-2) (e.g. in `where: { attribute-name: $not: { … } }`).
:::

:::tip
`$and`, `$or` and `$not` operators are nestable inside of another `$and`, `$or` or `$not` operator.
:::

## Attribute Operators

:::caution
Using these operators may give different results depending on the database's implementation, as the comparison is handled by the database and not by Strapi.
:::

### `$not`

Negates nested condition(s).

**Example**

```js
const entries = await strapi.db.query('api::article.article').findMany({
  where: {
    title: {
      $not: {
        $contains: 'Hello World',
      },
    },
  },
});
```

### `$eq`

Attribute equals input value.

**Example**

```js
const entries = await strapi.db.query('api::article.article').findMany({
  where: {
    title: {
      $eq: 'Hello World',
    },
  },
});
```

`$eq` can be omitted:

```js
const entries = await strapi.db.query('api::article.article').findMany({
  where: {
    title: 'Hello World',
  },
});
```

### `$eqi`

Attribute equals input value (case-insensitive).

**Example**

```js
const entries = await strapi.db.query('api::article.article').findMany({
  where: {
    title: {
      $eqi: 'HELLO World',
    },
  },
});
```

### `$ne`

Attribute does not equal input value.

**Example**

```js
const entries = await strapi.db.query('api::article.article').findMany({
  where: {
    title: {
      $ne: 'ABCD',
    },
  },
});
```

### `$nei`

Attribute does not equal input value (case-insensitive).

**Example**

```js
const entries = await strapi.db.query('api::article.article').findMany({
  where: {
    title: {
      $nei: 'abcd',
    },
  },
});
```

### `$in`

Attribute is contained in the input list.

**Example**

```js
const entries = await strapi.db.query('api::article.article').findMany({
  where: {
    title: {
      $in: ['Hello', 'Hola', 'Bonjour'],
    },
  },
});
```

`$in` can be omitted when passing an array of values:

```js
const entries = await strapi.db.query('api::article.article').findMany({
  where: {
    title: ['Hello', 'Hola', 'Bonjour'],
  },
});
```

### `$notIn`

Attribute is not contained in the input list.

**Example**

```js
const entries = await strapi.db.query('api::article.article').findMany({
  where: {
    title: {
      $notIn: ['Hello', 'Hola', 'Bonjour'],
    },
  },
});
```

### `$lt`

Attribute is less than the input value.

**Example**

```js
const entries = await strapi.db.query('api::article.article').findMany({
  where: {
    rating: {
      $lt: 10,
    },
  },
});
```

### `$lte`

Attribute is less than or equal to the input value.

**Example**

```js
const entries = await strapi.db.query('api::article.article').findMany({
  where: {
    rating: {
      $lte: 10,
    },
  },
});
```

### `$gt`

Attribute is greater than the input value.

**Example**

```js
const entries = await strapi.db.query('api::article.article').findMany({
  where: {
    rating: {
      $gt: 5,
    },
  },
});
```

### `$gte`

Attribute is greater than or equal to the input value.

**Example**

```js
const entries = await strapi.db.query('api::article.article').findMany({
  where: {
    rating: {
      $gte: 5,
    },
  },
});
```

### `$between`

Attribute is between the 2 input values, boundaries included (e.g., `$between[1, 3]` will also return `1` and `3`).

**Example**

```js
const entries = await strapi.db.query('api::article.article').findMany({
  where: {
    rating: {
      $between: [1, 20],
    },
  },
});
```

### `$contains`

Attribute contains the input value (case-sensitive).

**Example**

```js
const entries = await strapi.db.query('api::article.article').findMany({
  where: {
    title: {
      $contains: 'Hello',
    },
  },
});
```

### `$notContains`

Attribute does not contain the input value (case-sensitive).

**Example**

```js
const entries = await strapi.db.query('api::article.article').findMany({
  where: {
    title: {
      $notContains: 'Hello',
    },
  },
});
```

### `$containsi`

Attribute contains the input value. `$containsi` is not case-sensitive, while [$contains](#contains) is.

**Example**

```js
const entries = await strapi.db.query('api::article.article').findMany({
  where: {
    title: {
      $containsi: 'hello',
    },
  },
});
```

### `$notContainsi`

Attribute does not contain the input value. `$notContainsi` is not case-sensitive, while [$notContains](#notcontains) is.

**Example**

```js
const entries = await strapi.db.query('api::article.article').findMany({
  where: {
    title: {
      $notContainsi: 'hello',
    },
  },
});
```

### `$startsWith`

Attribute starts with input value.

**Example**

```js
const entries = await strapi.db.query('api::article.article').findMany({
  where: {
    title: {
      $startsWith: 'ABCD',
    },
  },
});
```

### `$endsWith`

Attribute ends with input value.

**Example**

```js
const entries = await strapi.db.query('api::article.article').findMany({
  where: {
    title: {
      $endsWith: 'ABCD',
    },
  },
});
```

### `$null`

Attribute is `null`.

**Example**

```js
const entries = await strapi.db.query('api::article.article').findMany({
  where: {
    title: {
      $null: true,
    },
  },
});
```

### `$notNull`

Attribute is not `null`.

**Example**

```js
const entries = await strapi.db.query('api::article.article').findMany({
  where: {
    title: {
      $notNull: true,
    },
  },
});
```



# Ordering & Pagination
Source: https://docs-v4.strapi.io/dev-docs/api/query-engine/order-pagination

# Ordering & Paginating

The [Query Engine API](/dev-docs/api/query-engine) offers the ability to [order](#ordering) and [paginate](#pagination) results.

## Ordering

To order results returned by the Query Engine, use the `orderBy` parameter. Results can be ordered based on a [single](#single) or on [multiple](#multiple) attributes and can also use [relational ordering](#relational-ordering).

### Single

```js
strapi.db.query('api::article.article').findMany({
  orderBy: 'id',
});

// single with direction
strapi.db.query('api::article.article').findMany({
  orderBy: { id: 'asc' },
});
```

### Multiple

```js
strapi.db.query('api::article.article').findMany({
  orderBy: ['id', 'name'],
});

// multiple with direction
strapi.db.query('api::article.article').findMany({
  orderBy: [{ title: 'asc' }, { publishedAt: 'desc' }],
});
```

### Relational ordering

```js
strapi.db.query('api::article.article').findMany({
  orderBy: {
    author: {
      name: 'asc',
    },
  },
});
```

## Pagination

To paginate results returned by the Query Engine API, use the `offset` and `limit` parameters:

```js
strapi.db.query('api::article.article').findMany({
  offset: 15, 
  limit: 10,
});
```



# Populating
Source: https://docs-v4.strapi.io/dev-docs/api/query-engine/populating

# Populating

Relations and components have a unified API for populating them.

To populate all the root level relations, use `populate: true`:

```js
strapi.db.query('api::article.article').findMany({
  populate: true,
});
```

Select which data to populate by passing an array of attribute names:

```js
strapi.db.query('api::article.article').findMany({
  populate: ['componentA', 'relationA'],
});
```

An object can be passed for more advanced usage:

```js
strapi.db.query('api::article.article').findMany({
  populate: {
    componentB: true,
    dynamiczoneA: true,
    relation: someLogic || true,
  },
});
```

Complex populating can also be achieved by applying `where` filters and select or populate nested relations:

```js
strapi.db.query('api::article.article').findMany({
  where: {
    relationA: {
      name: {
        $contains: 'Strapi',
      },
    },
  },

  repeatableComponent: {
    select: ['someAttributeName'],
    orderBy: ['someAttributeName'],
    populate: {
      componentRelationA: true,
      dynamiczoneA: true,
    },
  },
});
```

When dealing with polymorphic data structures (dynamic zones, polymorphic relations, etc...), it is possible to use populate fragments to have a better granularity on the populate strategy.

```js
strapi.db.query('api::article.article').findMany('api::article.article', {
  populate: {
    dynamicZone: {
      on: {
        'components.foo': {
          select: ['title'],
          where: { title: { $contains: 'strapi' } },
        },
        'components.bar': {
          select: ['name'],
        },
      },
    },

    morphAuthor: {
      on: {
        'plugin::users-permissions.user': {
          select: ['username'],
        },
        'api::author.author': {
          select: ['name'],
        },
      },
    },
  },
});
```



# Single Operations
Source: https://docs-v4.strapi.io/dev-docs/api/query-engine/single-operations

# Single Operations

## findOne()

:::note
 Only use the Query Engine's findOne if the [Entity Service findOne](/dev-docs/api/entity-service/crud#findone) can't cover your use case.
:::
Finds the first entry matching the parameters.

Syntax: `findOne(parameters) ⇒ Entry`

### Parameters

| Parameter  | Type   | Description   |
| ---------- | -------------- | --------- |
| `select`   | String, or Array of strings | [Attributes](/dev-docs/backend-customization/models#model-attributes) to return |
| `where`    | [`WhereParameter`](/dev-docs/api/query-engine/filtering/) | [Filters](/dev-docs/api/query-engine/filtering/) to use   |
| `offset`   | Integer   | Number of entries to skip   |
| `orderBy`  | [`OrderByParameter`](/dev-docs/api/query-engine/order-pagination/) | [Order](/dev-docs/api/query-engine/order-pagination/) definition |
| `populate` | [`PopulateParameter`](/dev-docs/api/query-engine/populating/) | Relations to [populate](/dev-docs/api/query-engine/populating/) |

### Example

```js
const entry = await strapi.db.query('api::blog.article').findOne({
  select: ['title', 'description'],
  where: { title: 'Hello World' },
  populate: { category: true },
});
```

## findMany()

:::note
 Only use the Query Engine's findMany if the [Entity Service findMany](/dev-docs/api/entity-service/crud#findmany) can't cover your use case.
:::

Finds entries matching the parameters.

Syntax: `findMany(parameters) ⇒ Entry[]`

### Parameters

| Parameter | Type                           | Description                                |
| --------- | ------------------------------ | ------------------------------------------ |
| `select`   | String, or Array of strings | [Attributes](/dev-docs/backend-customization/models#model-attributes) to return |
| `where`    | [`WhereParameter`](/dev-docs/api/query-engine/filtering/)  | [Filters](/dev-docs/api/query-engine/filtering/) to use |
| `limit`   | Integer  | Number of entries to return  |
| `offset`   | Integer  | Number of entries to skip |
| `orderBy`  | [`OrderByParameter`](/dev-docs/api/query-engine/order-pagination/) | [Order](/dev-docs/api/query-engine/order-pagination/) definition |
| `populate` | [`PopulateParameter`](/dev-docs/api/query-engine/populating/)      | Relations to [populate](/dev-docs/api/query-engine/populating/)

### Example

```js
const entries = await strapi.db.query('api::blog.article').findMany({
  select: ['title', 'description'],
  where: { title: 'Hello World' },
  orderBy: { publishedAt: 'DESC' },
  populate: { category: true },
});
```

## findWithCount()

Finds and counts entries matching the parameters.

Syntax: `findWithCount(parameters) => [Entry[], number]`

### Parameters

| Parameter | Type                           | Description                                |
| --------- | ------------------------------ | ------------------------------------------ |
| `select`   | String, or Array of strings | [Attributes](/dev-docs/backend-customization/models#model-attributes) to return |
| `where`    | [`WhereParameter`](/dev-docs/api/query-engine/filtering/)          | [Filters](/dev-docs/api/query-engine/filtering/) to use |
| `limit`     | Integer    | Number of entries to return    |
| `offset`   | Integer  | Number of entries to skip  |
| `orderBy`  | [`OrderByParameter`](/dev-docs/api/query-engine/order-pagination/) | [Order](/dev-docs/api/query-engine/order-pagination/) definition |
| `populate` | [`PopulateParameter`](/dev-docs/api/query-engine/populating/)      | Relations to [populate](/dev-docs/api/query-engine/populating/)
|

### Example

```js
const [entries, count] = await strapi.db.query('api::blog.article').findWithCount({
  select: ['title', 'description'],
  where: { title: 'Hello World' },
  orderBy: { title: 'DESC' },
  populate: { category: true },
});
```

## create()

:::note
 Only use the Query Engine's create if the [Entity Service create](/dev-docs/api/entity-service/crud#create) can't cover your use case.
:::

Creates one entry and returns it.

Syntax: `create(parameters) => Entry`

### Parameters

| Parameter | Type                           | Description                                |
| --------- | ------------------------------ | ------------------------------------------ |
| `select`   | String, or Array of strings | [Attributes](/dev-docs/backend-customization/models#model-attributes) to return |
| `populate` | [`PopulateParameter`](/dev-docs/api/query-engine/populating/)  | Relations to [populate](/dev-docs/api/query-engine/populating/) |
| `data`  | Object   | Input data  |

### Example

```js
const entry = await strapi.db.query('api::blog.article').create({
  data: {
    title: 'My Article',
  },
});
```

## update()

:::note
 Only use the Query Engine's update if the [Entity Service update](/dev-docs/api/entity-service/crud#update) can't cover your use case.
:::

Updates one entry and returns it.

Syntax: `update(parameters) => Entry`

### Parameters

| Parameter | Type                           | Description                                |
| --------- | ------------------------------ | ------------------------------------------ |
| `select`   | String, or Array of strings | [Attributes](/dev-docs/backend-customization/models#model-attributes) to return |
| `populate` | [`PopulateParameter`](/dev-docs/api/query-engine/populating/)      | Relations to [populate](/dev-docs/api/query-engine/populating/)
| `where`    | [`WhereParameter`](/dev-docs/api/query-engine/filtering/)          | [Filters](/dev-docs/api/query-engine/filtering/) to use  |
| `data`  | Object     | Input data   |

### Example

```js
const entry = await strapi.db.query('api::blog.article').update({
  where: { id: 1 },
  data: {
    title: 'xxx',
  },
});
```

## delete()

:::note
 Only use the Query Engine's delete if the [Entity Service delete](/dev-docs/api/entity-service/crud#delete) can't cover your use case.
:::

Deletes one entry and returns it.

Syntax: `delete(parameters) => Entry`

### Parameters

| Parameter | Type                           | Description                                |
| --------- | ------------------------------ | ------------------------------------------ |
| `select`   | String, or Array of strings | [Attributes](/dev-docs/backend-customization/models#model-attributes) to return |
| `populate` | [`PopulateParameter`](/dev-docs/api/query-engine/populating/)      | Relations to [populate](/dev-docs/api/query-engine/populating/)
| `where`    | [`WhereParameter`](/dev-docs/api/query-engine/filtering/)          | [Filters](/dev-docs/api/query-engine/filtering/) to use    |

### Example

```js
const entry = await strapi.db.query('api::blog.article').delete({
  where: { id: 1 },
});
```



# REST API reference
Source: https://docs-v4.strapi.io/dev-docs/api/rest

# REST API

The REST API allows accessing the [content-types](/dev-docs/backend-customization/models) through API endpoints. Strapi automatically creates [API endpoints](#endpoints) when a content-type is created. [API parameters](/dev-docs/api/rest/parameters) can be used when querying API endpoints to refine the results.

:::caution
All content types are private by default and need to be either made public or queries need to be authenticated with the proper permissions. See the [Quick Start Guide](/dev-docs/quick-start#step-3-set-roles--permissions), the user guide for the [Users & Permissions plugin](/user-docs/users-roles-permissions/configuring-end-users-roles), and [API tokens configuration documentation](/dev-docs/configurations/api-tokens) for more details.
:::

:::note
By default, the REST API responses only include top-level fields and does not populate any relations, media fields, components, or dynamic zones. Use the [`populate` parameter](/dev-docs/api/rest/populate-select) to populate specific fields. Ensure that the find permission is given to the field(s) for the relation(s) you populate.
:::

:::strapi Upload plugin API
The Upload plugin (which handles media found in the [Media Library](/user-docs/media-library)) has a specific API described in the [Upload plugin documentation](/dev-docs/plugins/upload).
:::

## Endpoints

For each Content-Type, the following endpoints are automatically generated:

</Tabs>

<details>

<summary>Examples:</summary>

</Tabs>
</details>

:::note
[Components](/dev-docs/backend-customization/models#components) don't have API endpoints.
:::

:::tip
API endpoints are prefixed with `/api` by default. This can be changed by setting a different value for the `rest.prefix` configuration parameter (see [API calls configuration](/dev-docs/configurations/api)).
:::

## Requests

Requests return a response as an object which usually includes the following keys:

- `data`: the response data itself, which could be:
  - a single entry, as an object with the following keys:
    - `id` (number)
    - `attributes` (object)
    - `meta` (object)
  - a list of entries, as an array of objects
  - a custom response

- `meta` (object): information about pagination, publication state, available locales, etc.

- `error` (object, _optional_): information about any [error](/dev-docs/error-handling) thrown by the request

:::note
Some plugins (including Users & Permissions and Upload) may not follow this response format.
:::

</ApiCall>

</SideBySideColumn>

</SideBySideContainer>

</ApiCall>

</SideBySideColumn>

</SideBySideContainer>

</ApiCall>

</SideBySideColumn>
</SideBySideContainer>

</ApiCall>

</SideBySideColumn>
</SideBySideContainer >

</ApiCall>

</SideBySideColumn>
</SideBySideContainer>



# Filters, Locale, and Publication State
Source: https://docs-v4.strapi.io/dev-docs/api/rest/filters-locale-publication

# REST API: Filtering, Locale, and Publication State

The [REST API](/dev-docs/api/rest) offers the ability to filter results found with its ["Get entries"](/dev-docs/api/rest#get-entries) method.<br/>
Using optional Strapi features can provide some more filters:

- If the [Internationalization (i18n) plugin](/dev-docs/plugins/i18n.md) is enabled on a content-type, it's possible to filter by locale.
- If the [Draft & Publish](/user-docs/content-manager/saving-and-publishing-content) is enabled, it's possible to filter based on a `live` or `preview` state.

:::tip

</ApiCall>

<details>
<summary>
</SideBySideContainer>

</ApiCall>

<details>
<summary>
</SideBySideContainer>

</ApiCall>

<details>
<summary>
</SideBySideContainer>

</ApiCall>

<details>
<summary>
</SideBySideContainer>

## Locale

:::prerequisites

- The [Internationalization (i18n) plugin](/dev-docs/plugins/i18n.md) should be installed.
- [Localization should be enabled for the content-type](/user-docs/content-type-builder/creating-new-content-type.md#creating-a-new-content-type).
:::

The `locale` API parameter can be used to get entries from a specific locale (see [i18n plugin documentation](/dev-docs/plugins/i18n.md#getting-localized-entries-with-the-locale-parameter)).

</ApiCall>

<details>
<summary>
</SideBySideContainer>

:::tip
To retrieve only draft entries, combine the `preview` publication state and the `publishedAt` fields:

`GET /api/articles?publicationState=preview&filters[publishedAt][$null]=true`

<details>
<summary></summary>

```js
const qs = require('qs');
const query = qs.stringify({
  publicationState: 'preview',
  filters: {
    publishedAt: {
      $null: true,
    },
  },
}, {
  encodeValuesOnly: true, // prettify URL
});

await request(`/api/articles?${query}`);
```

</details>
:::



# REST API Guides
Source: https://docs-v4.strapi.io/dev-docs/api/rest/guides/intro

# REST API Guides

The [REST API reference](/dev-docs/api/rest) documentation is meant to provide a quick reference for all the endpoints and parameters available.

## Guides

The following guides, officially maintained by the Strapi Documentation team, cover dedicated topics and provide detailed explanations (guides indicated with 🧠) or step-by-step instructions (guides indicated with 🛠️) for some use cases:

## Additional resources 

Additional tutorials and guides can be found in the following blog posts:



# How to populate creator fields
Source: https://docs-v4.strapi.io/dev-docs/api/rest/guides/populate-creator-fields

# 🛠️ How to populate creator fields such as `createdBy` and `updatedBy`

The creator fields `createdBy` and `updatedBy` are removed from the [REST API](/dev-docs/api/rest) response by default. These 2 fields can be returned in the REST API by activating the `populateCreatorFields` parameter at the content-type level.

:::note

The `populateCreatorFields` property is not available to the GraphQL API.

Only the following fields will be populated: `id`, `firstname`, `lastname`, `username`, `preferedLanguage`, `createdAt`, and `updatedAt`.
:::

To add `createdBy` and `updatedBy` to the API response:

1. Open the content-type `schema.json` file.
2. Add `"populateCreatorFields": true` to the `options` object:

  ```json
  "options": {
      "draftAndPublish": true,
      "populateCreatorFields": true
    },
  ```

3. Save the `schema.json`.
4. Create a new route middleware either using the [generate CLI](/dev-docs/cli.md) or by manually creating a new file in `./src/api/[content-type-name]/middlewares/[your-middleware-name].js`
5. Add the following piece of code, you can modify this example to suit your needs:

  ```js title="./src/api/test/middlewares/defaultTestPopulate.js"
  "use strict";

  module.exports = (config, { strapi }) => {
    return async (ctx, next) => {
      if (!ctx.query.populate) {
        ctx.query.populate = ["createdBy", "updatedBy"];
      }

      await next();
    };
  };
  ```

6. Modify your default route factory to enable this middleware on the specific routes you want this population to apply to and replacing the content-type/middleware name with yours:

  ```js title="./src/api/test/routes/test.js"
  "use strict";

  const { createCoreRouter } = require("@strapi/strapi").factories;

  module.exports = createCoreRouter("api::test.test", {
    config: {
      find: {
        middlewares: ["api::test.default-test-populate"],
      },
      findOne: {
        middlewares: ["api::test.default-test-populate"],
      },
    },
  });
  ```

REST API requests with no `populate` parameter will include the `createdBy` or `updatedBy` fields by default.



# Understanding populate
Source: https://docs-v4.strapi.io/dev-docs/api/rest/guides/understanding-populate

# 🧠 Understanding the `populate` parameter for the REST API

When querying content-types with Strapi's [REST API](/dev-docs/api/rest), by default, responses only include top-level fields and do not include any relations, media fields, components, or dynamic zones.

Populating in the context of the Strapi REST API means including additional content with your response by returning more fields than the ones returned by default. You use the [`populate` parameter](#population) to achieve this.

:::info
Throughout this guide, examples are built with real data queried from the server included with the [FoodAdvisor](https://github.com/strapi/foodadvisor) example application. To test examples by yourself, setup FoodAdvisor, start the server in the `/api/` folder, and ensure that proper `find` permissions are given for the queried content-types before sending your queries.
:::

The present guide will cover detailed explanations for the following use cases:

- populate [all fields and relations, 1 level deep](#populate-all-relations-and-fields-1-level-deep),
- populate [some fields and relations, 1 level deep](#populate-1-level-deep-for-specific-relations),
- populate [some fields and relations, several levels deep](#populate-several-levels-deep-for-specific-relations),
- populate [components](#populate-components),
- populate [dynamic zones](#populate-dynamic-zones).

:::info 
Populating several levels deep is often called "deep populate".
:::

:::strapi Advanced use case: Populating creator fields
In addition to the various ways of using the `populate` parameter in your queries, you can also build a custom controller as a workaround to populate creator fields (e.g., `createdBy` and `updatedBy`). This is explained in the dedicated [How to populate creator fields](/dev-docs/api/rest/guides/populate-creator-fields) guide.
:::

## Populate all relations and fields, 1 level deep

You can return all relations, media fields, components and dynamic zones with a single query. For relations, this will only work 1 level deep, to prevent performance issues and long response times.

To populate everything 1 level deep, add the `populate=*` parameter to your query.

The following diagram compares data returned by the [FoodAdvisor](https://github.com/strapi/foodadvisor) example application with and without populating everything 1 level deep:

![Diagram with populate use cases with FoodAdvisor data ](/img/assets/rest-api/populate-foodadvisor-diagram1.png)

Let's compare and explain what happens with and without this query parameter:

### Example: Without `populate`

Without the populate parameter, a `GET` request to `/api/articles` only returns the default attributes and does not return any media fields, relations, components or dynamic zones.

The following example is the full response for all 4 entries from the `articles` content-types.

Notice how the response only includes the `title`, `slug`, `createdAt`, `updatedAt`, `publishedAt`, and `locale` fields, and the field content of the article as handled by the CKEditor plugin (`ckeditor_content`, truncated for brevity):

</ApiCall>

### Example: With `populate=*`

With the `populate=*` parameter, a `GET` request to `/api/articles` also returns all media fields, first-level relations, components and dynamic zones.

The following example is the full response for the first of all 4 entries from the `articles` content-types (the data from articles with ids 2, 3, and 4 is truncated for brevity).

Scroll down to see that the response size is much bigger than without populate. The response now includes additional fields (see highlighted lines) such as:
* the `image` media field (which stores all information about the article cover, including all its different formats), 
* the first-level fields of the `blocks` dynamic zone and the `seo` component,
* the `category` relation and its fields,
* and even some information about the articles translated in other languages, as shown by the `localizations` object.

:::tip
To populate deeply nested components, see the [populate components](#populate-components) section.
:::

<br />

</ApiCall>

## Populate specific relations and fields

You can also populate specific relations and fields, by explicitly defining what to populate. This requires that you know the name of fields and relations to populate.

Relations and fields populated this way can be 1 or several levels deep. The following diagram compares data returned by the [FoodAdvisor](https://github.com/strapi/foodadvisor) example application when you populate [1 level deep](#populate-1-level-deep-for-specific-relations) vs. [2 levels deep](#populate-several-levels-deep-for-specific-relations):

![Diagram with populate use cases with FoodAdvisor data ](/img/assets/rest-api/populate-foodadvisor-diagram2.png)

<details>
<summary>Populate as an object vs. populate as an array: Using the interactive query builder</summary>

The syntax for advanced query parameters can be quite complex to build manually. We recommend you use our [interactive query builder](/dev-docs/api/rest/interactive-query-builder) tool to generate the URL.

Using this tool, you will write clean and readable requests in a familiar (JavaScript) format, which should help you understand the differences between different queries and different ways of populating. For instance, populating 2 levels deep implies using populate as an object, while populating several relations 1 level deep implies using populate as an array:

</Columns>

</details>

### Populate 1 level deep for specific relations

You can populate specific relations 1 level deep by using the populate parameter as an array.

Since the REST API uses the [LHS bracket notation](https://christiangiacomi.com/posts/rest-design-principles/#lhs-brackets) (i.e., with square brackets `[]`), the parameter syntaxes to populate 1 level deep would look like the following:

| How many relations to populate | Syntax example    |
|-------------------------------|--------------------|
| Only 1 relation |  `populate[0]=a-relation-name`   |
| Several relations | `populate[0]=relation-name&populate[1]=another-relation-name&populate[2]=yet-another-relation-name` |

Let's compare and explain what happens with and without populating relations 1 level deep when sending queries to the [FoodAdvisor](https://github.com/strapi/foodadvisor) example application:

#### Example: Without `populate`

Without the populate parameter, a `GET` request to `/api/articles` only returns the default attributes.

The following example is the full response for all 4 entries from the `articles` content-type.

Notice that the response does not include any media fields, relations, components or dynamic zones:

<br/>

</ApiCall>

#### Example: With `populate[0]=category`

With `populate[0]=category` added to the request, we explicitly ask to include some information about `category`, which is a relation field that links the `articles` and the `categories` content-types.

The following example is the full response for all 4 entries from the `articles` content-type.

Notice that the response now includes additional data with the `category` field for each article (see highlighted lines):

</ApiCall>

### Populate several levels deep for specific relations

You can also populate specific relations several levels deep. For instance, when you populate a relation which itself populates another relation, you are populating 2 levels deep. Populating 2 levels deep is the example covered in this guide.

:::caution
There is no limit on the number of levels that can be populated. However, the deeper the populates, the more the request will take time to be performed.
:::

Since the REST API uses the [LHS bracket notation](https://christiangiacomi.com/posts/rest-design-principles/#lhs-brackets), (i.e., with square brackets `[]`), for instance if you want to populate a relation nested inside another relation, the parameter syntax would look like the following:

`populate[first-level-relation-to-populate][populate][0]=second-level-relation-to-populate`

:::tip
The syntax for advanced query parameters can be quite complex to build manually. We recommend you use our [interactive query builder](/dev-docs/api/rest/interactive-query-builder) tool to generate the URL. For instance, the `/api/articles?populate[category][populate][0]=restaurants` URL used in the following examples has been generated by converting the following object using our tool:

```json
{
  populate: {
    category: {
      populate: ['restaurants'],
    },
  },
}
```

:::

The [FoodAdvisor](https://github.com/strapi/foodadvisor) example application includes various levels of relations between content-types. For instance:

- an `article` content-type includes a relation with the `category` content-type,
- but a `category` can also be assigned to any `restaurant` content-type.

With a single `GET` request to `/api/articles` and the appropriate populate parameters, you can return information about articles, restaurants, and categories simultaneously.

Let's compare and explain the responses returned with `populate[0]=category` (1 level deep) and `populate[category][populate][0]=restaurants` (2 levels deep) when sending queries to FoodAdvisor:

#### Example: With 1-level deep population

When we only populate 1 level deep, asking for the categories associated to articles, we can get the following example response (highlighted lines show the `category` relations field):

</ApiCall>

#### Example: With 2-level deep population

When we populate 2 levels deep, asking for the categories associated to articles, but also for restaurants associated to these categories, we can get the following example response.

Notice that we now have the `restaurants` relation field included with the response inside the `category` relation (see highlighted lines):

</ApiCall>

### Populate components

Components and dynamic zones are not included in responses by default and you need to explicitly populate each dynamic zones, components, and their nested components.

Since the REST API uses the [LHS bracket notation](https://christiangiacomi.com/posts/rest-design-principles/#lhs-brackets), (i.e., with square brackets `[]`), you need to pass all elements in a `populate` array. Nested fields can also be passed, and the parameter syntax could look like the following:

`populate[0]=a-first-field&populate[1]=a-second-field&populate[2]=a-third-field&populate[3]=a-third-field.a-nested-field&populate[4]=a-third-field.a-nested-component.a-nested-field-within-the-component`

:::tip
The syntax for advanced query parameters can be quite complex to build manually. We recommend you use our [interactive query builder](/dev-docs/api/rest/interactive-query-builder) tool to generate the URL. For instance, the `/api/articles?populate[0]=seo&populate[1]=seo.metaSocial&populate[2]=seo.metaSocial.image` URL used in the following examples has been generated by converting the following object using our tool:

```json
{
  populate: [
    'seoData',
    'seoData.sharedImage',
    'seoData.sharedImage.media',
  ],
},
```

:::

The [FoodAdvisor](https://github.com/strapi/foodadvisor) example application includes various components and even components nested inside other components. For instance:

- an `article` content-type includes a `seo` component 

</ApiCall>

#### Example: 1st level and 2nd level component

When we populate 2 levels deep, asking both for the `seo` component and the `metaSocial` component nested inside `seo`, we can get the following example response.

Notice that we now have the `metaSocial` component-related data included with the response (see highlighted lines):

</ApiCall>

### Populate dynamic zones

Dynamic zones are highly dynamic content structures by essence.
When populating dynamic zones, you can choose between the following 2 strategies:

| Strategy name                                        | Use case                                             |
| ---------------------------------------------------- | ------------------------------------------------------------- |
| [Shared population](#shared-population-strategy)     | Apply a unique behavior to all the dynamic zone's components. |
| [Detailed population](#detailed-population-strategy) | Explicitly define what to populate with the response.         |

#### Shared population strategy

With the shared population strategy, you apply the same population to all the components of a dynamic zone.

For instance, in the [FoodAdvisor](https://github.com/strapi/foodadvisor) example application:

- A `blocks` dynamic zone exists the `article` content-type 

</ApiCall>

##### Example: Populating the dynamic zone and applying a shared strategy to its components

When we populate the `blocks` dynamic zone and apply a shared population strategy to all its components with `[populate]=*`, we not only include components fields but also their 1st-level relations, as shown in the highlighted lines of the following example response:

</ApiCall>

#### Detailed population strategy

With the detailed population strategy, you can define per-component populate queries using the `on` property.

For instance, in the [FoodAdvisor](https://github.com/strapi/foodadvisor) example application:

- A `blocks` dynamic zone exists the `article` content-type 

</ApiCall>

##### Example: Detailed population strategy

When we populate the `blocks` dynamic zone and apply a detailed population strategy, we explicitly define which data to populate.

In the following example response, highlighted lines show differences with the shared population strategy:

- We deeply populate the `articles` relation of the `relatedArticles` component, and even the `image` media field of the related article.

- But because we have only asked to populate everything for the `CtaCommandLine` component and have not defined anything for the `faq` component, no data from the `faq` component is returned.

</ApiCall>



# Interactive Query Builder
Source: https://docs-v4.strapi.io/dev-docs/api/rest/interactive-query-builder

# Build your query URL with Strapi's interactive tool

A wide range of parameters can be used and combined to query your content with the [REST API](/dev-docs/api/rest), which can result in long and complex query URLs.

Strapi's codebase uses [the `qs` library](https://github.com/ljharb/qs) to parse and stringify nested JavaScript objects. It's recommended to use `qs` directly to generate complex query URLs instead of creating them manually.

You can use the following interactive query builder tool to generate query URLs automatically:

1. Replace the values in the _Endpoint_ and _Endpoint Query Parameters_ fields with content that fits your needs.
2. Click the **Copy to clipboard** button to copy the automatically generated _Query String URL_ which is updated as you type.

:::info Parameters usage
Please refer to the [REST API parameters table](/dev-docs/api/rest/parameters) and read the corresponding parameters documentation pages to better understand parameters usage.
:::

<br />

<br />
 
<br />

:::note
The default endpoint path is prefixed with `/api/` and should be kept as-is unless you configured a different API prefix using [the `rest.prefix` API configuration option](/dev-docs/configurations/api).<br/> For instance, to query the `books` collection type using the default API prefix, type `/api/books` in the _Endpoint_ field.
:::

:::caution Disclaimer
The `qs` library and the interactive query builder provided on this page:
- might not detect all syntax errors,
- are not aware of the parameters and values available in a Strapi project,
- and do not provide autocomplete features.

Currently, these tools are only provided to transform the JavaScript object in an inline query string URL. Using the generated query URL does not guarantee that proper results will get returned with your API.
:::



# Interactive Query Builder
Source: https://docs-v4.strapi.io/dev-docs/api/rest/interactive-query-builder

# Build your query URL with Strapi's interactive tool

A wide range of parameters can be used and combined to query your content with the [REST API](/dev-docs/api/rest), which can result in long and complex query URLs.

Strapi's codebase uses [the `qs` library](https://github.com/ljharb/qs) to parse and stringify nested JavaScript objects. It's recommended to use `qs` directly to generate complex query URLs instead of creating them manually.

You can use the following interactive query builder tool to generate query URLs automatically:

1. Replace the values in the _Endpoint_ and _Endpoint Query Parameters_ fields with content that fits your needs.
2. Click the **Copy to clipboard** button to copy the automatically generated _Query String URL_ which is updated as you type.

:::info Parameters usage
Please refer to the [REST API parameters table](/dev-docs/api/rest/parameters) and read the corresponding parameters documentation pages to better understand parameters usage.
:::

<br />

<br />
 
<br />

:::note
The default endpoint path is prefixed with `/api/` and should be kept as-is unless you configured a different API prefix using [the `rest.prefix` API configuration option](/dev-docs/configurations/api).<br/> For instance, to query the `books` collection type using the default API prefix, type `/api/books` in the _Endpoint_ field.
:::

:::caution Disclaimer
The `qs` library and the interactive query builder provided on this page:
- might not detect all syntax errors,
- are not aware of the parameters and values available in a Strapi project,
- and do not provide autocomplete features.

Currently, these tools are only provided to transform the JavaScript object in an inline query string URL. Using the generated query URL does not guarantee that proper results will get returned with your API.
:::



# Parameters
Source: https://docs-v4.strapi.io/dev-docs/api/rest/parameters

# REST API parameters

API parameters can be used with the [REST API](/dev-docs/api/rest) to filter, sort, and paginate results and to select fields and relations to populate. Additionally, specific parameters related to optional Strapi features can be used, like the publication state and locale of a content-type.

The following API parameters are available:

| Operator           | Type          | Description                                           |
| ------------------ | ------------- | ----------------------------------------------------- |
| `populate`         | String or Object | [Populate relations, components, or dynamic zones](/dev-docs/api/rest/populate-select#population) |
| `fields`           | Array         | [Select only specific fields to display](/dev-docs/api/rest/populate-select#field-selection) |
| `filters`          | Object        | [Filter the response](/dev-docs/api/rest/filters-locale-publication#filtering) |
| `locale`           | String or Array  | [Select one or multiple locales](/dev-docs/api/rest/filters-locale-publication#locale) |
| `publicationState` | String        | [Select the Draft & Publish state](/dev-docs/api/rest/filters-locale-publication#publication-state)<br/><br/>Only accepts the following values:<ul><li>`live`(default)</li><li>`preview`</li></ul> |
| `sort`             | String or Array  | [Sort the response](/dev-docs/api/rest/sort-pagination.md#sorting) |
| `pagination`       | Object        | [Page through entries](/dev-docs/api/rest/sort-pagination.md#pagination) |

Query parameters use the [LHS bracket syntax](https://christiangiacomi.com/posts/rest-design-principles/#lhs-brackets) (i.e. they are encoded using square brackets `[]`).

:::tip
A wide range of REST API parameters can be used and combined to query your content, which can result in long and complex query URLs.<br/>👉 You can use Strapi's [interactive query builder](/dev-docs/api/rest/interactive-query-builder) tool to build query URLs more conveniently. 🤗
:::

:::warning
In Strapi 4.13+, sending invalid query parameters will result in an error status instead of ignoring them. Please ensure that you are only querying fields that:
- are in the correct format for the parameter
- are not private or password fields
- you have read permission on

If you need your API to have the old behavior of ignoring invalid parameters, you will need to customize your controller to only sanitize and not validate.
:::



# Parameters
Source: https://docs-v4.strapi.io/dev-docs/api/rest/parameters

# REST API parameters

API parameters can be used with the [REST API](/dev-docs/api/rest) to filter, sort, and paginate results and to select fields and relations to populate. Additionally, specific parameters related to optional Strapi features can be used, like the publication state and locale of a content-type.

The following API parameters are available:

| Operator           | Type          | Description                                           |
| ------------------ | ------------- | ----------------------------------------------------- |
| `populate`         | String or Object | [Populate relations, components, or dynamic zones](/dev-docs/api/rest/populate-select#population) |
| `fields`           | Array         | [Select only specific fields to display](/dev-docs/api/rest/populate-select#field-selection) |
| `filters`          | Object        | [Filter the response](/dev-docs/api/rest/filters-locale-publication#filtering) |
| `locale`           | String or Array  | [Select one or multiple locales](/dev-docs/api/rest/filters-locale-publication#locale) |
| `publicationState` | String        | [Select the Draft & Publish state](/dev-docs/api/rest/filters-locale-publication#publication-state)<br/><br/>Only accepts the following values:<ul><li>`live`(default)</li><li>`preview`</li></ul> |
| `sort`             | String or Array  | [Sort the response](/dev-docs/api/rest/sort-pagination.md#sorting) |
| `pagination`       | Object        | [Page through entries](/dev-docs/api/rest/sort-pagination.md#pagination) |

Query parameters use the [LHS bracket syntax](https://christiangiacomi.com/posts/rest-design-principles/#lhs-brackets) (i.e. they are encoded using square brackets `[]`).

:::tip
A wide range of REST API parameters can be used and combined to query your content, which can result in long and complex query URLs.<br/>👉 You can use Strapi's [interactive query builder](/dev-docs/api/rest/interactive-query-builder) tool to build query URLs more conveniently. 🤗
:::

:::warning
In Strapi 4.13+, sending invalid query parameters will result in an error status instead of ignoring them. Please ensure that you are only querying fields that:
- are in the correct format for the parameter
- are not private or password fields
- you have read permission on

If you need your API to have the old behavior of ignoring invalid parameters, you will need to customize your controller to only sanitize and not validate.
:::



# Populate and Select
Source: https://docs-v4.strapi.io/dev-docs/api/rest/populate-select

# REST API: Population & Field Selection

The [REST API](/dev-docs/api/rest) by default does not populate any relations, media fields, components, or dynamic zones. Use the [`populate` parameter](#population) to populate specific fields and the [`select` parameter](#field-selection) to return only specific fields with the query results. Ensure that the find permission is given to the field(s) for the relation(s) you populate.

:::tip

</ApiCall>

<details>
<summary>
</SideBySideContainer>

## Population

The REST API by default does not populate any type of fields, so it will not populate relations, media fields, components, or dynamic zones unless you pass a `populate` parameter to populate various field types.

The `populate` parameter can be used alone or [in combination with with multiple operators](#combining-population-with-other-operators) to have much more control over the population.

:::caution
The `find` permission must be enabled for the content-types that are being populated. If a role doesn't have access to a content-type it will not be populated (see [User Guide](/user-docs/users-roles-permissions/configuring-end-users-roles#editing-a-role) for additional information on how to enable `find` permissions for content-types).
:::

:::note
It's currently not possible to return just an array of ids with a request.
:::

:::strapi Populating guides

The [REST API guides](/dev-docs/api/rest/guides/intro) section includes more detailed information about various possible use cases for the populate parameter:

- The [Understanding populate](/dev-docs/api/rest/guides/understanding-populate) guide explains in details how populate works, with diagrams, comparisons, and real-world examples.
- The [How to populate creator fields](/dev-docs/api/rest/guides/populate-creator-fields) guide provides step-by-step instructions on how to add `createdBy` and `updatedBy` fields to your queries responses.

The Strapi Blog also includes a tutorial on [how to populate and filter data with your queries](https://strapi.io/blog/demystifying-strapi-s-populate-and-filtering).
:::

The following table sums up possible populate use cases and their associated parameter syntaxes, and links to sections of the Understanding populate guide which includes more detailed explanations:

| Use case  | Example parameter syntax | Detailed explanations to read |
|-----------| ---------------|-----------------------|
| Populate everything, 1 level deep, including media fields, relations, components, and dynamic zones | `populate=*`| [Populate all relations and fields, 1 level deep](/dev-docs/api/rest/guides/understanding-populate#populate-all-relations-and-fields-1-level-deep) |
| Populate one relation,<br/>1 level deep | `populate[0]=a-relation-name`| [Populate 1 level deep for specific relations](/dev-docs/api/rest/guides/understanding-populate#populate-1-level-deep-for-specific-relations) |
| Populate several relations,<br/>1 level deep | `populate[0]=relation-name&populate[1]=another-relation-name&populate[2]=yet-another-relation-name`| [Populate 1 level deep for specific relations](/dev-docs/api/rest/guides/understanding-populate#populate-1-level-deep-for-specific-relations) |
| Populate some relations, several levels deep | `populate[first-level-relation-to-populate][populate][0]=second-level-relation-to-populate`| [Populate several levels deep for specific relations](/dev-docs/api/rest/guides/understanding-populate#populate-several-levels-deep-for-specific-relations) |
| Populate a component | `populate[0]=component-name`| [Populate components](/dev-docs/api/rest/guides/understanding-populate#populate-components) |
| Populate a component and one of its nested components | `populate[0]=component-name&populate[1]=component-name.nested-component-name`| [Populate components](/dev-docs/api/rest/guides/understanding-populate#populate-components) |
| Populate a dynamic zone (only its first-level elements) | `populate[0]=dynamic-zone-name`| [Populate dynamic zones](/dev-docs/api/rest/guides/understanding-populate#populate-dynamic-zones) |
| Populate a dynamic zone and its nested elements and relations, using a unique, shared population strategy | `populate[dynamic-zone-name][populate]=*`| [Populate dynamic zones](/dev-docs/api/rest/guides/understanding-populate#shared-population-strategy) |
| Populate a dynamic zone and its nested elements and relations, using a precisely defined, detailed population strategy | `populate[dynamic-zone-name][on][dynamic-zone-name.component-name][populate][relation-name][populate][0]=field-name`| [Populate dynamic zones](/dev-docs/api/rest/guides/understanding-populate#detailed-population-strategy) |

:::tip
The easiest way to build complex queries with multiple-level population is to use our [interactive query builder](/dev-docs/api/rest/interactive-query-builder) tool.
:::

### Combining Population with other operators

By utilizing the `populate` operator it is possible to combine other operators such as [field selection](/dev-docs/api/rest/populate-select#field-selection), [filters](/dev-docs/api/rest/filters-locale-publication), and [sort](/dev-docs/api/rest/sort-pagination) in the population queries.

:::caution
The population and pagination operators cannot be combined.
:::

#### Populate with field selection

`fields` and `populate` can be combined.

</ApiCall>

<details>
<summary>

</ApiCall>

<details>
<summary></summary>

```js
const qs = require('qs');
const query = qs.stringify(
  {
    populate: {
      categories: {
        sort: ['name:asc'],
        filters: {
          name: {
            $eq: 'Cars',
          },
        },
      },
    },
  },
  {
    encodeValuesOnly: true, // prettify URL
  }
);

await request(`/api/articles?${query}`);
```

</details>



# Relations
Source: https://docs-v4.strapi.io/dev-docs/api/rest/relations

# Managing relations through the REST API

Defining relations between content-types (that are designated as entities in the database layers) is connecting entities with each other.

Relations between content-types can be managed through the [admin panel](/user-docs/content-manager/managing-relational-fields#managing-multiple-choices-relational-fields) or through [REST](/dev-docs/api/rest) requests sent to the Content API.

Relations can be connected, disconnected or set through the Content API by passing parameters in the body of the request:

|  Parameter name | Description | Type of update |
|-----------------|------------------|----------------|
| [`connect`](#connect)       | Connects new entities.<br /><br />Can be used in combination with `disconnect`.<br /><br />Can be used with [positional arguments](#relations-reordering) to define an order for relations.    | Partial
| [`disconnect`](#disconnect)    | Disconnects entities.<br /><br />Can be used in combination with `connect`. | Partial
| [`set`](#set)           | Set entities to a specific set. Using `set` will overwrite all existing connections to other entities.<br /><br />Cannot be used in combination with `connect` or `disconnect`.  | Full

## `connect`

Using `connect` in the body of a request performs a partial update, connecting the specified relations.

`connect` accepts either a shorthand or a longhand syntax. In the following examples, numbers refers to entity ids:

| Syntax type | Syntax example |
| ------------|----------------|
| shorthand   | `connect: [2, 4]`
| longhand    | ```connect: [{ id: 2 }, { id: 4 }]``` |

You can also use the longhand syntax to [reorder relations](#relations-reordering).

`connect` can be used in combination with [`disconnect`](#disconnect).

:::caution
`connect` can not be used for media attributes (see [Upload plugin documentation](/dev-docs/plugins/upload#examples) for more details).
:::

</MultiLanguageSwitcher>

</TabItem>

</MultiLanguageSwitcher>

</TabItem>
</Tabs>

### Relations reordering

Positional arguments can be passed to the longhand syntax of `connect` to define the order of relations.

The longhand syntax accepts an array of objects, each object containing the `id` of the entry to be connected and an optional `position` object to define where to connect the relation.

:::note Different syntaxes for different relations
The syntaxes described in this documentation are useful for one-to-many, many-to-many and many-ways relations.<br />For one-to-one, many-to-one and one-way relations, the syntaxes are also supported but only the last relation will be used, so it's preferable to use a shorter format (e.g.: `{ data: { category: 2 } }`, see [REST API documentation](/dev-docs/api/rest#requests)).
:::

To define the `position` for a relation, pass one of the following 4 different positional attributes:

| Parameter name and syntax | Description                                                            | Type       |
| ------------------------- | ---------------------------------------------------------------------- | ---------- |
| `before: id`              | Positions the relation before the given `id`.                          | Entry `id` |
| `after: id`               | Positions the relation after the given `id`.                           | Entry `id` |
| `start: true`             | Positions the relation at the start of the existing list of relations. | Boolean    |
| `end: true`               | Positions the relation at the end of the existing list of relations.   | Boolean    |

The `position` argument is optional and defaults to `position: { end: true }`.

:::note Sequential order
Since `connect` is an array, the order of operations is important as they will be treated sequentially (see combined example below).
:::

:::caution
The same relation should not be connected more than once, otherwise it would return a Validation error by the API.
:::

</TabItem>

Omitting the `position` argument (as in `id: 9`) defaults to `position: { end: true }`. All other relations are positioned relative to another existing `id` (using `after` or `before`) or relative to the list of relations (using `start` or `end`). Operations are treated sequentially in the order defined in the `connect` array, so the resulting database record will be the following:

```json
categories: [
  { id: 10 },
  { id: 1 },
  { id: 6 },
  { id: 7 },
  { id: 2 },
  { id: 8 },
  { id: 9 }
]
```

</TabItem>

</Tabs>

## `disconnect`

Using `disconnect` in the body of a request performs a partial update, disconnecting the specified relations.

`disconnect` accepts either a shorthand or a longhand syntax. In the following examples, numbers refers to entity ids:

| Syntax type | Syntax example |
| ------------|----------------|
| shorthand   | `disconnect: [2, 4]`
| longhand    | ```disconnect: [{ id: 2 }, { id: 4 }]``` |

`disconnect` can be used in combination with [`connect`](#connect).

<br />

</TabItem>

</TabItem>
</Tabs>

## `set`

Using `set` performs a full update, replacing all existing relations with the ones specified, in the order specified.

`set` accepts a shorthand or a longhand syntax. In the following examples, numbers refers to entity ids:

| Syntax type | Syntax example                  |
| ----------- | ------------------------------- |
| shorthand   | `set: [2, 4]`                   |
| longhand    | ```set: [{ id: 2 }, { id: 4 }]``` |

As `set` replaces all existing relations, it should not be used in combination with other parameters. To perform a partial update, use [`connect`](#connect) and [`disconnect`](#disconnect).

:::note Omitting set
Omitting any parameter is equivalent to using `set`.<br/>For instance, the following 3 syntaxes are all equivalent:

- `data: { categories: { set: [{ id: 2 }, { id: 4 }] }}`
- `data: { categories: { set: [2, 4] }}`
- `data: { categories: [2, 4] }` (as used in the [REST API documentation](/dev-docs/api/rest#update-an-entry))

:::

</TabItem>

</TabItem>
</Tabs>



# Sort and Pagination
Source: https://docs-v4.strapi.io/dev-docs/api/rest/sort-pagination

# REST API: Sort & Pagination

Entries that are returned by queries to the [REST API](/dev-docs/api/rest) can be sorted and paginated.

:::tip

</ApiCall>

<details>
<summary>
</SideBySideContainer>

</ApiCall>

<details>
<summary>
</SideBySideContainer>

## Pagination

Queries can accept `pagination` parameters. Results can be paginated:

- either by [page](#pagination-by-page) (i.e., specifying a page number and the number of entries per page)
- or by [offset](#pagination-by-offset) (i.e., specifying how many entries to skip and to return)

:::note
Pagination methods can not be mixed. Always use either `page` with `pageSize` **or** `start` with `limit`.
:::

### Pagination by page

To paginate results by page, use the following parameters:

| Parameter               | Type    | Description                                                               | Default |
| ----------------------- | ------- | ------------------------------------------------------------------------- | ------- |
| `pagination[page]`      | Integer | Page number                                                               | 1       |
| `pagination[pageSize]`  | Integer | Page size                                                                 | 25      |
| `pagination[withCount]` | Boolean | Adds the total numbers of entries and the number of pages to the response | true    |

</ApiCall>

<details>
<summary>
</SideBySideContainer>

### Pagination by offset

To paginate results by offset, use the following parameters:

| Parameter               | Type    | Description                                                    | Default |
| ----------------------- | ------- | -------------------------------------------------------------- | ------- |
| `pagination[start]`     | Integer | Start value (i.e. first entry to return)                      | 0       |
| `pagination[limit]`     | Integer | Number of entries to return                                    | 25      |
| `pagination[withCount]` | Boolean | Toggles displaying the total number of entries to the response | `true`  |

:::tip
The default and maximum values for `pagination[limit]` can be [configured in the `./config/api.js`](/dev-docs/configurations/api) file with the `api.rest.defaultLimit` and `api.rest.maxLimit` keys.
:::

</ApiCall>

<details>
<summary>
</SideBySideContainer>



# Back-end customization
Source: https://docs-v4.strapi.io/dev-docs/backend-customization

# Back-end customization

:::strapi Disambiguation: Strapi back end
As a headless CMS, the Strapi software as a whole can be considered as the "back end" of your website or application.
But the Strapi software itself includes 2 different parts:

- The **back-end** part of Strapi is an HTTP server that Strapi runs. Like any HTTP server, the Strapi back end receives requests and send responses. Your content is stored in a database, and the Strapi back end interacts with the database to create, retrieve, update, and delete content.
- The **front-end** part of Strapi is called the admin panel. The admin panel presents a graphical user interface to help you structure and manage the content.

Throughout this developer documentation, 'back end' refers _exclusively_ to the back-end part of Strapi.

The [User Guide](/user-docs/intro) explains how to use the admin panel and the [admin panel customization section](/dev-docs/admin-panel-customization) details the various customization options available for the admin panel.
:::

The Strapi back end runs an HTTP server based on [Koa](https://koajs.com/), a back-end JavaScript framework.

Like any HTTP server, the Strapi back end receives requests and send responses. You can send requests to the Strapi back end to create, retrieve, update, or delete data through the [REST](/dev-docs/api/rest) or [GraphQL](/dev-docs/api/graphql) APIs.

A request can travel through the Strapi back end as follows:

1. The Strapi server receives a [request](/dev-docs/backend-customization/requests-responses).
2. The request hits [global middlewares](/dev-docs/backend-customization/middlewares) that are run in a sequential order.
3. The request hits a [route](/dev-docs/backend-customization/routes).<br/>By default, Strapi generates route files for all the content-types that you create (see [REST API documentation](/dev-docs/api/rest)), and more routes can be added and configured.
4. [Route policies](/dev-docs/backend-customization/policies) act as a read-only validation step that can block access to a route. [Route middlewares](/dev-docs/backend-customization/routes#middlewares) can control the request flow and mutate the request itself before moving forward.
5. [Controllers](/dev-docs/backend-customization/controllers) execute code once a route has been reached. [Services](/dev-docs/backend-customization/services) are optional, additional code that can be used to build custom logic reusable by controllers.
6. The code executed by the controllers and services interacts with the [models](/dev-docs/backend-customization/models) that are a representation of the content data structure stored in the database.<br />Interacting with the data represented by the models is handled by the [Entity Service](/dev-docs/api/entity-service) and [Query Engine](/dev-docs/api/query-engine).
7. The server returns a [response](/dev-docs/backend-customization/requests-responses). The response can travel back through route middlewares and global middlewares before being sent.

Both global and route middlewares include an asynchronous callback function, `await next()`. Depending on what is returned by the middleware, the request will either go through a shorter or longer path through the back end:

* If a middleware returns nothing, the request will continue travelling through the various core elements of the back end (i.e., controllers, services, and the other layers that interact with the database).
* If a middleware returns before calling `await next()`, a response will be immediately sent, skipping the rest of the core elements. Then it will go back down the same chain it came up.

:::info
Please note that all customizations described in the pages of this section are only for the REST API. [GraphQL customizations](/dev-docs/plugins/graphql#customization) are described in the GraphQL plugin documentation.
:::

:::tip Learn by example
If you prefer learning by reading examples and understanding how they can be used in real-world use cases, the [Examples cookbook](/dev-docs/backend-customization/examples) section is another way at looking how the Strapi back end customization works.
:::

## Interactive diagram

The following diagram represents how requests travel through the Strapi back end. You can click on any shape to jump to the relevant page in the documentation.

```mermaid
graph TB
    request[Request] ---> globalMiddlewareA(("Global middleware<br/>before await next()"))
    globalMiddlewareA --"Call next()"--> routePolicy{Route policy}
    globalMiddlewareA --"Returns before next()<br>Goes back up in the middleware chain"-->globalMiddlewareB
    routePolicy --Returns true--> routeMiddlewareA(("Route middleware<br/>before await next()"))
    routePolicy --Returns false or an error-->globalMiddlewareB
    routeMiddlewareA --"Returns before next()<br>Goes back up in the middleware chain"-->routeMiddlewareB
    routeMiddlewareA --"Call next()"--> controllerA{{Controller}}
    controllerA --"Call Service(s)"--> serviceA{{Service}}
    controllerA --"Don't call Service(s)" --> routeMiddlewareB
    serviceA --"Call Entity Service" --> entityService{{Entity Service}}
    serviceA --"Don't call Entity Service" --> controllerB
    entityService --"Call Query Engine"--> queryEngine{{Query Engine}}
    entityService --"Don't call Query Engine" --> serviceB
    queryEngine --> lifecyclesBefore[/Lifecycle<br> beforeX\] 
    lifecyclesBefore[/Lifecycle<br> beforeX\] --> database[(Database)]
    database --> lifecyclesAfter[\Lifecycle<br> afterX/]
    lifecyclesAfter --> serviceB{{"Service<br/>after Entity Service call"}}
    serviceB --> controllerB{{"Controller<br/>after service call"}}
    controllerB --> routeMiddlewareB(("Route middleware<br/>after await next()"))
    routeMiddlewareB --> globalMiddlewareB(("Global middleware<br/>after await next()"))
    globalMiddlewareB --> response[Response]
    linkStyle 3 stroke:green,color:green
    linkStyle 4 stroke:red,color:red
    linkStyle 2 stroke:purple,color:purple
    linkStyle 5 stroke:purple,color:purple
    click request "/dev-docs/backend-customization/requests-responses"
    click globalMiddlewareA "/dev-docs/backend-customization/middlewares"
    click globalMiddlewareB "/dev-docs/backend-customization/middlewares"
    click routePolicy "/dev-docs/backend-customization/routes"
    click routeMiddlewareA "/dev-docs/backend-customization/routes"
    click routeMiddlewareB "/dev-docs/backend-customization/routes"
    click controllerA "/dev-docs/backend-customization/controllers"
    click controllerB "/dev-docs/backend-customization/controllers"
    click serviceA "/dev-docs/backend-customization/services"
    click serviceB "/dev-docs/backend-customization/services"
    click entityService "/dev-docs/api/entity-service/"
    click lifecyclesBefore "/dev-docs/backend-customization/models#lifecycle-hooks"
    click queryEngine "/dev-docs/api/query-engine/"
    click lifecyclesAfter "/dev-docs/backend-customization/models#lifecycle-hooks"
    click response "/dev-docs/backend-customization/requests-responses"
    click queryEngine "/dev-docs/api/query-engine"
```



# Controllers
Source: https://docs-v4.strapi.io/dev-docs/backend-customization/controllers

const imgStyle = {width: '100%', margin: '0'}
const captionStyle = {fontSize: '12px'}

# Controllers

Controllers are JavaScript files that contain a set of methods, called actions, reached by the client according to the requested [route](/dev-docs/backend-customization/routes). Whenever a client requests the route, the action performs the business logic code and sends back the [response](/dev-docs/backend-customization/requests-responses). Controllers represent the C in the model-view-controller (MVC) pattern.

In most cases, the controllers will contain the bulk of a project's business logic. But as a controller's logic becomes more and more complicated, it's a good practice to use [services](/dev-docs/backend-customization/services) to organize the code into re-usable parts.

<figure style={imgStyle}>
  <img src="/img/assets/backend-customization/diagram-controllers-services.png" alt="Simplified Strapi backend diagram with controllers highlighted" />
  <em><figcaption style={captionStyle}>The diagram represents a simplified version of how a request travels through the Strapi back end, with controllers highlighted. The backend customization introduction page includes a complete, <a href="/dev-docs/backend-customization#interactive-diagram">interactive diagram</a>.</figcaption></em>
</figure>

<br/>

:::caution
Before deciding to customize core controllers, please consider creating custom route middlewares (see [routes documentation](/dev-docs/backend-customization/routes)).
:::

## Implementation

Controllers can be [generated or added manually](#adding-a-new-controller). Strapi provides a `createCoreController` factory function that automatically generates core controllers and allows building custom ones or [extend or replace the generated controllers](#extending-core-controllers).

### Adding a new controller

A new controller can be implemented:

- with the [interactive CLI command `strapi generate`](/dev-docs/cli)
- or manually by creating a JavaScript file:
  - in `./src/api/[api-name]/controllers/` for API controllers (this location matters as controllers are auto-loaded by Strapi from there)
  - or in a folder like `./src/plugins/[plugin-name]/server/controllers/` for plugin controllers, though they can be created elsewhere as long as the plugin interface is properly exported in the `strapi-server.js` file (see [Server API for Plugins documentation](/dev-docs/api/plugins/server-api))

</Tabs>

Each controller action can be an `async` or `sync` function.
Every action receives a context object (`ctx`) as a parameter. `ctx` contains the [request context](/dev-docs/backend-customization/requests-responses#requests) and the [response context](/dev-docs/backend-customization/requests-responses#responses).

<details>
<summary>Example: GET /hello route calling a basic controller</summary>

A specific `GET /hello` [route](/dev-docs/backend-customization/routes) is defined, the name of the router file (i.e. `index`) is used to call the controller handler (i.e. `index`). Every time a `GET /hello` request is sent to the server, Strapi calls the `index` action in the `hello.js` controller, which returns `Hello World!`:

</Tabs>

</details>

:::note
When a new [content-type](/dev-docs/backend-customization/models#content-types) is created, Strapi builds a generic controller with placeholder code, ready to be customized.
:::

:::tip Tips
- To see a possible advanced usage for custom controllers, read the [services and controllers](/dev-docs/backend-customization/examples/services-and-controllers) page of the backend customization examples cookbook.
- If you want to implement unit testing to your controllers, this [blog post](https://strapi.io/blog/automated-testing-for-strapi-api-with-jest-and-supertest) should get you covered.
:::

### Sanitization and Validation in controllers

Sanitization means that the object is “cleaned” and returned.

Validation means an assertion is made that the data is already clean and throws an error if something is found that shouldn't be there.

In Strapi:

- validation is applied on query parameters, 
- and only sanitization is applied to input data (create and update body data).

:::warning
It's strongly recommended you sanitize (v4.8.0+) and/or validate (v4.13.0+) your incoming request query utilizing the new `sanitizeQuery` and `validateQuery` functions to prevent the leaking of private data.
:::

#### Sanitization when utilizing controller factories

Within the Strapi factories the following functions are exposed that can be used for sanitization and validation:

| Function Name    | Parameters                 | Description                                                                          |
| ---------------- | -------------------------- | ------------------------------------------------------------------------------------ |
| `sanitizeQuery`  | `ctx`                      | Sanitizes the request query                                                          |
| `sanitizeOutput` | `entity`/`entities`, `ctx` | Sanitizes the output data where entity/entities should be an object or array of data |
| `sanitizeInput`  | `data`, `ctx`              | Sanitizes the input data                                                             |
| `validateQuery`  | `ctx`                      | Validates the request query (throws an error on invalid params)                      |
| `validateInput`  | `data`, `ctx`              | (EXPERIMENTAL) Validates the input data (throws an error on invalid data)            |

These functions automatically inherit the sanitization settings from the model and sanitize the data accordingly based on the content-type schema and any of the content API authentication strategies, such as the Users & Permissions plugin or API tokens.

:::warning
Because these methods use the model associated with the current controller, if you query data that is from another model (i.e., doing a find for "menus" within a "restaurant" controller method), you must instead use the `@strapi/utils` tools, such as `sanitize.contentAPI.query` described in [Sanitizing Custom Controllers](#sanitize-validate-custom-controllers), or else the result of your query will be sanitized against the wrong model.
:::

</Tabs>

#### Sanitization and validation when building custom controllers {#sanitize-validate-custom-controllers}

Within custom controllers, there are 5 primary functions exposed via the `@strapi/utils` package that can be used for sanitization and validation:

| Function Name                | Parameters                    | Description                                                                                                                                           |
| ---------------------------- | ----------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------- |
| `sanitize.contentAPI.input`  | `data`, `schema`, `auth`      | Sanitizes the request input including non-writable fields, removing restricted relations, and other nested "visitors" added by plugins                |
| `sanitize.contentAPI.output` | `data`, `schema`, `auth`      | Sanitizes the response output including restricted relations, private fields, passwords, and other nested "visitors" added by plugins                 |
| `sanitize.contentAPI.query`  | `ctx.query`, `schema`, `auth` | Sanitizes the request query including filters, sort, fields, and populate                                                                             |
| `validate.contentAPI.query`  | `ctx.query`, `schema`, `auth` | Validates the request query including filters, sort, fields (currently not populate)                                                                  |
| `validate.contentAPI.input`  | `data`, `schema`, `auth`      | (EXPERIMENTAL) Validates the request input including non-writable fields, removing restricted relations, and other nested "visitors" added by plugins |

:::note
Depending on the complexity of your custom controllers, you may need additional sanitization that Strapi cannot currently account for, especially when combining the data from multiple sources.
:::

</Tabs>

### Extending core controllers

Default controllers and actions are created for each content-type. These default controllers are used to return responses to API requests (e.g. when `GET /api/articles/3` is accessed, the `findOne` action of the default controller for the "Article" content-type is called). Default controllers can be customized to implement your own logic. The following code examples should help you get started.

:::tip
An action from a core controller can be replaced entirely by [creating a custom action](#adding-a-new-controller) and naming the action the same as the original action (e.g. `find`, `findOne`, `create`, `update`, or `delete`).
:::

:::tip
When extending a core controller, you do not need to re-implement any sanitization as it will already be handled by the core controller you are extending. Where possible it's strongly recommended to extend the core controller instead of creating a custom controller.
:::

<details>
<summary>Collection type examples</summary>

:::tip
The [backend customization examples cookbook](/dev-docs/backend-customization/examples) shows how you can overwrite a default controller action, for instance for the [`create` action](/dev-docs/backend-customization/examples/services-and-controllers#custom-controller).
:::

</Tabs>
</details>

<details>
<summary>Single type examples</summary>

</Tabs>
</details>

## Usage

Controllers are declared and attached to a route. Controllers are automatically called when the route is called, so controllers usually do not need to be called explicitly. However, [services](/dev-docs/backend-customization/services) can call controllers, and in this case the following syntax should be used:

```js
// access an API controller
strapi.controller("api::api-name.controller-name");
// access a plugin controller
strapi.controller("plugin::plugin-name.controller-name");
```

:::tip
To list all the available controllers, run `yarn strapi controllers:list`.
:::



# Backend Customization Examples Cookbook
Source: https://docs-v4.strapi.io/dev-docs/backend-customization/examples

# Backend customization: An examples cookbook using FoodAdvisor

The present section of the documentation is intended for developers who would like to get a deeper understanding of the Strapi back end customization possibilities.

The section is a collection of examples that demonstrate how the core components of the back-end server of Strapi can be used in a real-world project. Front-end code that interacts with the back end may also be part of some examples, but displayed in collapsed blocks by default since front-end code examples are not the main focus of this cookbook.

Examples are meant to extend the features of [FoodAdvisor](https://github.com/strapi/foodadvisor), the official Strapi demo application. FoodAdvisor builds a ready-made restaurants directory powered by a Strapi back end (included in the `/api` folder) and renders a [Next.js](https://nextjs.org/)-powered front-end website (included in the `/client` folder).

:::prerequisites
- 👀 You have read the [Quick Start Guide](/dev-docs/quick-start) and/or understood that Strapi is a **headless CMS**  that helps you create a data structure with the [Content-Type Builder](/user-docs/content-type-builder) and add some content through the [Content Manager](/user-docs/content-manager), then exposes the content through APIs.
- 👀 You have read the [back-end customization introduction](/dev-docs/backend-customization) to get a general understanding of what routes, policies, middlewares, controllers, and services are in Strapi.
- 👷 If you want to test and play with the code examples by yourself, ensure you have cloned the [FoodAdvisor](https://github.com/strapi/foodadvisor) repository, setup the project, and started both the front-end and back-end servers. The Strapi admin panel should be accessible from [`localhost:1337/admin`](http://localhost:1337/admin) and the Next.js-based FoodAdvisor front-end website should be running on [`localhost:3000`](http://localhost:3000).
:::

This section can be read from start to finish, or you might want to jump directly to a specific page to understand how a given core element from the Strapi back end can be used to solve a real-world use case example:

| I want to understand… | Dedicated page |
|------------|---------------|
| How to authenticate my queries | [Authentication flow with JWT](/dev-docs/backend-customization/examples/authentication) |
| How and when to use<br />custom controllers and services | [Custom controllers and services examples](/dev-docs/backend-customization/examples/services-and-controllers) |
| How to use custom policies<br />and send custom errors | [Custom policies examples](/dev-docs/backend-customization/examples/policies) |
| How to configure and use custom routes | [Custom routes examples](/dev-docs/backend-customization/examples/routes) |
| How and when to use<br />custom global middlewares | [Custom middleware example](/dev-docs/backend-customization/examples/middlewares) |



# Authentication flow with JWT
Source: https://docs-v4.strapi.io/dev-docs/backend-customization/examples/authentication

# Examples cookbook: Authentication flow with JWT

:::prerequisites
This page is part of the back end customization examples cookbook. Please ensure you've read its [introduction](/dev-docs/backend-customization/examples).
:::

**💭 Context:**

Out of the box, the front-end website of [FoodAdvisor](https://github.com/strapi/foodadvisor) does not provide any log in functionality. Logging in is done by accessing Strapi's admin panel at [`localhost:1337/admin`](http://localhost:1337/admin`).

</SideBySideContainer>

</SideBySideColumn>
</SideBySideContainer>

**🧑‍💻 Code example:**

:::prerequisites
The code example in this section uses the [formik](https://formik.org/) package. Install it using `yarn add formik` or `npm install formik` and restart the dev server.
:::

To achieve this, in the `/client` folder of the [FoodAdvisor](https://github.com/strapi/foodadvisor) project, you could create a `pages/auth/login.js` file that contains the following example code.  Highlighted lines show the request sent to the `/auth/local` route provided by Strapi's Users & Permissions plugin:

```jsx title="/client/pages/auth/login.js" {21-27}

const Login = () => {
  const { handleSubmit, handleChange } = useFormik({
    initialValues: {
      identifier: '',
      password: '',
    },
    onSubmit: async (values) => {
      /**
       * API URLs in Strapi are by default prefixed with /api,
       * but because the API prefix can be configured
       * with the rest.prefix property in the config/api.js file,
       * we use the getStrapiURL() method to build the proper full auth URL.
       **/
      const res = await fetch(getStrapiURL('/auth/local'), {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(values),
      });
      /**
       * Gets the JWT from the server response
       */
      const { jwt } = await res.json();
      /**
       * Stores the JWT in the localStorage of the browser. 
       * A better implementation would be to do this with an authentication context provider
       * or something more sophisticated, but it's not the purpose of this tutorial.
       */
      localStorage.setItem('token', jwt); 
    },
  });
  /**
   * The following code renders a basic login form 
   * accessible from the localhost:3000/auth/login page.
   */
  return (
    
        </form>
      </div>
    </Layout>
  );
};

```

<br />

:::strapi What's next?
Learn more about how custom [services and controllers](/dev-docs/backend-customization/examples/services-and-controllers) can help you tweak a Strapi-based application.
:::



# Custom middlewares
Source: https://docs-v4.strapi.io/dev-docs/backend-customization/examples/middlewares

# Examples cookbook: Custom global middlewares

:::prerequisites
This page is part of the back end customization examples cookbook. Please ensure you've read its [introduction](/dev-docs/backend-customization/examples).
:::

Out of the box, [FoodAdvisor](https://github.com/strapi/foodadvisor) does not provide any custom middlewares that could use incoming requests and perform some additional logic before executing the controller code.

There are 2 types of middlewares in Strapi: **route middlewares** control access to a route while **global middlewares** have a wider scope (see reference documentation for [middlewares customization](/dev-docs/backend-customization/middlewares)).

Custom route middlewares could be used instead of policies to control access to an endpoint (see [policies cookbook](/dev-docs/backend-customization/examples/policies)) and could modify the context before passing it down to further core elements of the Strapi server. This page will _not_ cover custom route middlewares but rather illustrate a more elaborated usage for **custom global middlewares**.

## Populating an analytics dashboard in Google Sheets with a custom middleware

**💭 Context:**

In essence, a middleware gets executed between a request arriving at the server and the controller function getting executed. So, for instance, a middleware is a good place to perform some analytics. 

</SideBySideContainer>

</SideBySideColumn>

</SideBySideContainer>

**🧑‍💻 Code example:**

1. In the `/api` folder of the [FoodAdvisor](https://github.com/strapi/foodadvisor) project, create a `/restaurant/middlewares/utils.js` file with the following example code:

  <details>
  <summary>Example utility functions that could be used to read, write and update a Google spreadsheet:</summary>

  The following code allows reading, writing, and updating a Google spreadsheet given an API Key read from a JSON file and a spreadsheet ID retrieved from the URL:

  ![Google Spreadsheet URL](/img/assets/backend-customization/tutorial-spreadsheet-url.png)

  Additional information can be found in the official [Google Sheets API documentation](https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets.values?hl=es-419).

  ```jsx title="src/api/restaurant/middlewares/utils.js"

  const { google } = require('googleapis');

  const createGoogleSheetClient = async ({
    keyFile,
    sheetId,
    tabName,
    range,
  }) => {
    async function getGoogleSheetClient() {
      const auth = new google.auth.GoogleAuth({
        keyFile,
        scopes: ['https://www.googleapis.com/auth/spreadsheets'],
      });
      const authClient = await auth.getClient();
      return google.sheets({
        version: 'v4',
        auth: authClient,
      });
    }

    const googleSheetClient = await getGoogleSheetClient();

    const writeGoogleSheet = async (data) => {
      googleSheetClient.spreadsheets.values.append({
        spreadsheetId: sheetId,
        range: `${tabName}!${range}`,
        valueInputOption: 'USER_ENTERED',
        insertDataOption: 'INSERT_ROWS',
        resource: {
          majorDimension: 'ROWS',
          values: data,
        },
      });
    };

    const updateoogleSheet = async (cell, data) => {
      googleSheetClient.spreadsheets.values.update({
        spreadsheetId: sheetId,
        range: `${tabName}!${cell}`,
        valueInputOption: 'USER_ENTERED',
        resource: {
          majorDimension: 'ROWS',
          values: data,
        },
      });
    };

    const readGoogleSheet = async () => {
      const res = await googleSheetClient.spreadsheets.values.get({
        spreadsheetId: sheetId,
        range: `${tabName}!${range}`,
      });

      return res.data.values;
    };

    return {
      writeGoogleSheet,
      updateoogleSheet,
      readGoogleSheet,
    };
  };

  module.exports = {
    createGoogleSheetClient,
  };
  ```

  </details>

2. In the `/api` folder of the FoodAdvisor project, create a custom `analytics` middleware with the following code:

  ```jsx title="src/api/restaurant/middlewares/analytics.js"

  'use strict';

  const { createGoogleSheetClient } = require('./utils');

  const serviceAccountKeyFile = './gs-keys.json';
  // Replace the sheetId value with the corresponding id found in your own URL
  const sheetId = '1P7Oeh84c18NlHp1Zy-5kXD8zgpoA1WmvYL62T4GWpfk';
  const tabName = 'Restaurants';
  const range = 'A2:C';

  const VIEWS_CELL = 'C';

  const transformGSheetToObject = (response) =>
    response.reduce(
      (acc, restaurant) => ({
        ...acc,
        [restaurant[0]]: {
          id: restaurant[0],
          name: restaurant[1],
          views: restaurant[2],
          cellNum: Object.keys(acc).length + 2 // + 2 because we need to consider the header and that the initial length is 0, so our first real row would be 2,
        },
      }),
      {}
    );

  module.exports = (config, { strapi }) => {
    return async (context, next) => {
      // Generating google sheet client
      const { readGoogleSheet, updateoogleSheet, writeGoogleSheet } =
        await createGoogleSheetClient({
          keyFile: serviceAccountKeyFile,
          range,
          sheetId,
          tabName,
        });
      
      // Get the restaurant ID from the params in the URL
      const restaurantId = context.params.id;
      const restaurant = await strapi.entityService.findOne(
        'api::restaurant.restaurant',
        restaurantId
      );

      // Read the spreadsheet to get the current data
      const restaurantAnalytics = await readGoogleSheet();
      
      /** 
       * The returned data comes in the shape [1, "Mint Lounge", 23],
       * and we need to transform it into an object: {id: 1, name: "Mint Lounge", views: 23, cellNum: 2}
       */
      const requestedRestaurant =
        transformGSheetToObject(restaurantAnalytics)[restaurantId];

      if (requestedRestaurant) {
        await updateoogleSheet(
          `${VIEWS_CELL}${requestedRestaurant.cellNum}:${VIEWS_CELL}${requestedRestaurant.cellNum}`,
          [[Number(requestedRestaurant.views) + 1]]
        );
      } else {
        /** If we don't have the restaurant in the spreadsheet already, 
         * we create it with 1 view.
         */
        const newRestaurant = [[restaurant.id, restaurant.name, 1]];
        await writeGoogleSheet(newRestaurant);
      }
    
      // Call next to continue with the flow and get to the controller
      await next();
    };
  };
  ```

3. Configure the routes for the "Restaurants" content-type to execute the custom `analytics` middleware whenever a restaurant page is queried. To do so, use the following code:

  ```jsx title="src/api/restaurant/routes/restaurant.js"

  'use strict';

  const { createCoreRouter } = require('@strapi/strapi').factories;

  module.exports = createCoreRouter('api::restaurant.restaurant', {
    config: {
      findOne: {
        auth: false,
        policies: [],
        middlewares: ['api::restaurant.analytics'],
      },
    },
  });
  ```



# Custom policies
Source: https://docs-v4.strapi.io/dev-docs/backend-customization/examples/policies

# Examples cookbook: Custom policies

:::prerequisites
This page is part of the back end customization examples cookbook. Please ensure you've read its [introduction](/dev-docs/backend-customization/examples).
:::

Out of the box, [FoodAdvisor](https://github.com/strapi/foodadvisor) does not use any custom policies or route middlewares that could control access to content type endpoints.

In Strapi, controlling access to a content-type endpoint can be done either with a policy or route middleware:

- policies are read-only and allow a request to pass or return an error,
- while route middlewares can perform additional logic.

In our example, let's use a policy.

## Creating a custom policy

**💭 Context:**

Let's say we would like to customize the backend of [FoodAdvisor](https://github.com/strapi/foodadvisor) to prevent restaurant owners from creating fake reviews for their businesses using a [form previously created](/dev-docs/backend-customization/examples/services-and-controllers#rest-api-queries-from-the-front-end) on the front-end website.

</SideBySideColumn>

</SideBySideContainer>

**🧑‍💻 Code example:**

In the `/api` folder of the [FoodAdvisor](https://github.com/strapi/foodadvisor) project, create a new `src/api/review/policies/is-owner-review.js` file with the following code:

```jsx title="src/api/review/policies/is-owner-review.js"

module.exports = async (policyContext, config, { strapi }) => {
  const { body } = policyContext.request;
  const { user } = policyContext.state;

  // Return an error if there is no authenticated user with the request
  if (!user) {
    return false;
  }
  /**
   * Queries the Restaurants collection type
   * using the Entity Service API
   * to retrieve information about the restaurant's owner.
   */ 
  const [restaurant] = await strapi.entityService.findMany(
    'api::restaurant.restaurant',
    {
      filters: {
        slug: body.restaurant,
      },
      populate: ['owner'],
    }
  );
  if (!restaurant) {
    return false;
  }

  /**
   * If the user submitting the request is the restaurant's owner,
   * we don't allow the review creation.
   */ 
  if (user.id === restaurant.owner.id) {
    return false;
  }

  return true;
};
```

:::caution
Policies or route middlewares should be declared in the configuration of a route to actually control access. Read more about routes in the [reference documentation](/dev-docs/backend-customization/routes) or see an example in the [routes cookbook](/dev-docs/backend-customization/examples/routes).
:::

## Sending custom errors through policies

**💭 Context:**

Out of the box, [FoodAdvisor](https://github.com/strapi/foodadvisor) sends a default error when a policy refuses access to a route. Let's say we want to customize the error sent when the [previously created custom policy](#creating-a-custom-policy) does not allow creating a review.

</SideBySideColumn>

</SideBySideContainer>

**🧑‍💻 Code example:**

In the `/api` folder of the [FoodAdvisor](https://github.com/strapi/foodadvisor) project, update the [previously created `is-owner-review` custom policy](#creating-a-custom-policy) as follows (highlighted lines are the only modified lines):

```jsx title="src/api/review/policies/is-owner-review.js" showLineNumbers
const { errors } = require('@strapi/utils');
const { PolicyError } = errors;

module.exports = async (policyContext, config, { strapi }) => {
  const { body } = policyContext.request;
  const { user } = policyContext.state;

  // Return an error if there is no authenticated user with the request
  if (!user) {
    return false;
  }
  /**
   * Queries the Restaurants collection type
   * using the Entity Service API
   * to retrieve information about the restaurant's owner.
   */ 
  const filteredRestaurants = await strapi.entityService.findMany(
    'api::restaurant.restaurant',
    {
      filters: {
        slug: body.restaurant,
      },
      populate: ['owner'],
    }
  );

  const restaurant = filteredRestaurants[0];

  if (!restaurant) {
    return false;
  }

  /**
   * If the user submitting the request is the restaurant's owner,
   * we don't allow the review creation.
   */
  if (user.id === restaurant.owner.id) {
    // highlight-start
    /**
     * Throws a custom policy error
     * instead of just returning false
     * (which would result into a generic Policy Error).
     */
    const error = new ApplicationError(
      "The owner of the restaurant cannot submit reviews",
      {
        policy: "is-owner-review",
        errCode: "RESTAURANT_OWNER_REVIEW", // can be useful for identifying different errors on the front end
      }
    );
    error.name = "OwnerReviewError";
    throw error;
    // highlight-end
  }

  return true;
};
```

<details>
<summary>Responses sent with default policy error vs. custom policy error:</summary>

</Tabs>

</details>

<br />

### Using custom errors on the front end

**💭 Context:**

Out of the box, the Next.js-powered front-end website provided with [FoodAdvisor](https://github.com/strapi/foodadvisor) does not display errors or success messages on the front-end website when accessing content. For instance, the website will not inform the user when adding a new review with a [previously created form](/dev-docs/backend-customization/examples/services-and-controllers#rest-api-queries-from-the-front-end) is not possible.

</SideBySideContainer>

**🎯 Goals**:

- Catch the error on the front-end website and display it within a notification.
- Send another notification in case the policy allows the creation of a new review.

**🧑‍💻 Code example:**

In the `/client` folder of the [FoodAdvisor](https://github.com/strapi/foodadvisor) project, you could update the [previously created `new-review` component](/dev-docs/backend-customization/examples/services-and-controllers#rest-api-queries-from-the-front-end) as follows (modified lines are highlighted):

<details>
<summary>Example front-end code to display toast notifications for custom errors or successful review creation:</summary>

```jsx title="/client/components/pages/restaurant/RestaurantContent/Reviews/new-review.js" showLineNumbers

// highlight-start
/** 
 * A notification will be displayed on the front-end using React Hot Toast
 * (See https://github.com/timolins/react-hot-toast).
 * React Hot Toast should be added to your project's dependencies;
 * Use yarn or npm to install it and it will be added to your package.json file.
 */

class UnauthorizedError extends Error {
  constructor(message) {
    super(message);
  }
}
// highlight-end

const NewReview = () => {
  const router = useRouter();

  const { handleSubmit, handleChange, values } = useFormik({
    initialValues: {
      note: '',
      content: '',
    },
    onSubmit: async (values) => {
      // highlight-start
      /**
       * The previously added code is wrapped in a try/catch block.
       */
      try {
        // highlight-end
        const res = await fetch(getStrapiURL('/reviews'), {
          method: 'POST',
          body: JSON.stringify({
            restaurant: router.query.slug,
            ...values,
          }),
          headers: {
            Authorization: `Bearer ${localStorage.getItem('token')}`,
            'Content-Type': 'application/json',
          },
        });

        // highlight-start
        const { data, error } = await res.json();
        /**
         * If the Strapi backend server returns an error,
         * we use the custom error message to throw a custom error.
         * If the request is a success, we display a success message.
         * In both cases, a toast notification is displayed on the front-end.
         */
        if (error) {
          throw new UnauthorizedError(error.message);
        }
        toast.success('Review created!');
        return data;
      } catch (err) {
        toast.error(err.message);
        console.error(err);
      }
    },
    // highlight-end
  });
  return (
    <div className="my-6">
      <h1 className="font-bold text-2xl mb-3">Write your review</h1>
      <form onSubmit={handleSubmit} className="flex flex-col gap-y-4">
        
      </form>
    </div>
  );
};

```

</details>

<br />

:::strapi What's next?
Learn more about how to configure [custom routes](/dev-docs/backend-customization/examples/routes) to use your custom policies, and how these custom routes can be used to tweak a Strapi-based application.
:::



# Custom routes
Source: https://docs-v4.strapi.io/dev-docs/backend-customization/examples/routes

# Examples cookbook: Custom routes

:::prerequisites
This page is part of the back end customization examples cookbook. Please ensure you've read its [introduction](/dev-docs/backend-customization/examples).
:::

**💭 Context:**

Out of the box, [FoodAdvisor](https://github.com/strapi/foodadvisor) does not control access to its content-type endpoints.

Let's say we [previously created a policy](/dev-docs/backend-customization/examples/policies) to restrict access to the "Reviews" content-type to some conditions, for instance to prevent a restaurant's owner to create a review for their restaurants. We must now enable the policy on the route we use to create reviews.

</SideBySideColumn>

</SideBySideContainer>

**🧑‍💻 Code example:**

In the `/api` folder of the [FoodAdvisor](https://github.com/strapi/foodadvisor) project, replace the content of the `api/src/api/review/routes/review.js` file with the following code:

```jsx title="src/api/review/routes/review.js"

'use strict';

const { createCoreRouter } = require('@strapi/strapi').factories;

module.exports = createCoreRouter('api::review.review', {
  config: {
    create: {
      auth: false, // set the route to bypass the normal Strapi authentication system
      policies: ['is-owner-review'], // set the route to use a custom policy
      middlewares: [],
    },
  },
});
```

<br />

:::strapi What's next?
Learn more about how to configure [custom middlewares](/dev-docs/backend-customization/examples/middlewares) to perform additional actions that extend your Strapi-based application.
:::



# Custom services and controllers
Source: https://docs-v4.strapi.io/dev-docs/backend-customization/examples/services-and-controllers

# Examples cookbook: Custom services and controllers

:::prerequisites
This page is part of the back end customization examples cookbook. Please ensure you've read its [introduction](/dev-docs/backend-customization/examples).
:::

From the front-end website of [FoodAdvisor](https://github.com/strapi/foodadvisor), you can browse a list of restaurants accessible at [`localhost:3000/restaurants`](http://localhost:3000/restaurants). Clicking on any restaurant from the list will use the code included in the `/client` folder to display additional information about this restaurant. The content displayed on a restaurant page was created within Strapi's Content Manager and is retrieved by querying Strapi's REST API which uses code included in the `/api` folder.

This page will teach about the following advanced topics:

| Topic | Section |
|------|---------|
| Create a component that interacts with the backend of Strapi | [REST API queries from the front-end](#rest-api-queries-from-the-front-end) |
| Understand how services and controllers can play together    | [Controllers vs. services](#controllers-vs-services)     |
| Create custom services | <ul><li>A [custom service](#custom-service-creating-a-review) that only uses the Entity Service API</li><li>Another more [advanced custom service](#custom-service-sending-an-email-to-the-restaurant-owner) that uses both Entity Service API and a Strapi plugin</li></ul> |
| Use services in a controller | [Custom controller](#custom-controller) |

<br/>

### REST API queries from the front end

</SideBySideContainer>

</SideBySideColumn>

</SideBySideContainer>

**🧑‍💻 Code example:**

In the `/client` folder of the [FoodAdvisor](https://github.com/strapi/foodadvisor) project, you could use the following code examples to:
- create a new `pages/restaurant/RestaurantContent/Reviews/new-review.js` file,
- and update the existing `components/pages/restaurant/RestaurantContent/Reviews/reviews.js`.

<details>
<summary>Example front-end code to add a component for writing reviews and display it on restaurants pages:</summary>

1. Create a new file in the `/client` folder to add a new component for writing reviews with the following code:

  ```jsx title='/client/components/pages/restaurant/RestaurantContent/Reviews/new-review.js'

  import { Button, Input, Textarea } from '@nextui-org/react';
  import { useFormik } from 'formik';
  import { useRouter } from 'next/router';
  import React from 'react';
  import { getStrapiURL } from '../../../../../utils';

  const NewReview = () => {
    const router = useRouter();

    const { handleSubmit, handleChange, values } = useFormik({
      initialValues: {
        note: '',
        content: '',
      },
      onSubmit: async (values) => {
        /**
         * Queries Strapi REST API to reach the reviews endpoint
         * using the JWT previously stored in localStorage to authenticate
         */
        const res = await fetch(getStrapiURL('/reviews'), {
          method: 'POST',
          body: JSON.stringify({
            restaurant: router.query.slug,
            ...values,
          }),
          headers: {
            Authorization: `Bearer ${localStorage.getItem('token')}`,
            'Content-Type': 'application/json',
          },
        });
      },
    });
    /**
     * Renders the form
     */
    return (
      <div className="my-6">
        <h1 className="font-bold text-2xl mb-3">Write your review</h1>
        <form onSubmit={handleSubmit} className="flex flex-col gap-y-4">
          
        </form>
      </div>
    );
  };

  export default NewReview;
  ```

2. Display the new form component on any restaurants page by adding the highlighted lines (7, 8, and 13) to the code used to render restaurant's information:

  ```jsx title='/client/components/pages/restaurant/RestaurantContent/Reviews/reviews.js' showLineNumbers
  import React from 'react';
  import delve from 'dlv';

  import { formatDistance } from 'date-fns';

  import { getStrapiMedia } from '../../../../../utils';
  // highlight-start
  import { Textarea } from '@nextui-org/react';
  import NewReview from './new-review';
  // highlight-end

  const Reviews = ({ reviews }) => {
    return (
      <div className="col-start-2 col-end-2 mt-24">
        // highlight-next-line

</SideBySideColumn>

</SideBySideContainer>

**🧑‍💻 Code example:**

To create such a service, in the `/api` folder of the [FoodAdvisor](https://github.com/strapi/foodadvisor) project, replace the content of the `src/api/review/services/review.js` file with the following code:

```jsx title="src/api/review/services/review.js"
const { createCoreService } = require('@strapi/strapi').factories;

module.exports = createCoreService('api::review.review', ({ strapi }) => ({
  async create(ctx) {
    const user = ctx.state.user;
    const { body } = ctx.request;

    /**
     * Queries the Restaurants collection type
     * using the Entity Service API
     * to retrieve information about the restaurant.
     */
    const restaurants = await strapi.entityService.findMany(
      'api::restaurant.restaurant',
      {
        filters: {
          slug: body.restaurant,
        },
      }
    );

    /**
     * Creates a new entry for the Reviews collection type
     * and populates data with information about the restaurant's owner
     * using the Entity Service API.
     */
    const newReview = await strapi.entityService.create('api::review.review', {
      data: {
        note: body.note,
        content: body.content,
        restaurant: restaurants[0].id,
        author: user.id,
      },
      populate: ['restaurant.owner'],
    });

    return newReview;
  },
}));
```

:::tip Tips
- In a controller's code, the `create` method from this service can be called with `strapi.service('api::review.review').create(ctx)` where `ctx` is the request's [context](/dev-docs/backend-customization/requests-responses).
- The provided example code does not cover error handling. You should consider handling errors, for instance when the restaurant does not exist. Additional information can be found in the [Error handling](/dev-docs/error-handling) documentation.
:::

<br />

### Custom Service: Sending an email to the restaurant owner

**💭 Context:**

Out of the box, [FoodAdvisor](https://github.com/strapi/foodadvisor) does not provide any automated email service feature.

Let's create an `email.js` service file to send an email. We could use it in a [custom controller](#custom-controller) to notify the restaurant owner whenever a new review is created on the front-end website.

:::callout 🤗 Optional service
This service is an advanced code example using the [Email](/dev-docs/plugins/email) plugin and requires understanding how [plugins](/dev-docs/plugins) and [providers](/dev-docs/providers) work with Strapi. If you don't need an email service to notify the restaurant's owner, you can skip this part and jump next to the custom [controller](#custom-controller) example.
:::

</SideBySideContainer>

</SideBySideColumn>

</SideBySideContainer>

**🧑‍💻 Code example:**

To create such a service, in the `/api` folder of the [FoodAdvisor](https://github.com/strapi/foodadvisor) project, create a new `src/api/email/services/email.js` file with the following code:
    
```jsx title="src/api/email/services/email.js"

const { createCoreService } = require('@strapi/strapi').factories;

module.exports = createCoreService('api::email.email', ({ strapi }) => ({
  async send({ to, subject, html }) {
    /**
     * Retrieves email configuration data
     * stored in the Email single type
     * using the Entity Service API.
     */
    const emailConfig = await strapi.entityService.findOne(
      'api::email.email',
      1
    );

    /**
     * Sends an email using:
     * - parameters to pass when invoking the service
     * - the 'from' address previously retrieved with the email configuration
     */
    await strapi.plugins['email'].services.email.send({
      to,
      subject,
      html,
      from: emailConfig.from,
    });
  },
}));
```

:::tip
In a controller's code, the `send` method from this email service can be called with `strapi.service('api::email.email).send(parameters)` where `parameters` is an object with the email's related information (recipient's address, subject, and email body).
:::

<br />

### Custom controller

**💭 Context:**

By default, controllers files in Strapi includes basic boilerplate code that use the `createCoreController` factory function. This exposes basic methods to create, retrieve, update, and delete content when reaching the requested endpoint. The default code for the controllers can be customized to perform any business logic.

Let's customize the default controller for the "Reviews" collection type of [FoodAdvisor](https://github.com/strapi/foodadvisor) with the following scenario: upon a `POST` request to the `/reviews` endpoint, the controller calls previously created services to both [create a review](#custom-service-creating-a-review) and [send an email](#custom-service-sending-an-email-to-the-restaurant-owner) to the restaurant's owner.

</SideBySideColumn>

</SideBySideContainer>

**🧑‍💻 Code example:**

In the `/api` folder of the [FoodAdvisor](https://github.com/strapi/foodadvisor) project, replace the content of the `src/api/review/controllers/review.js` file with one of the following code examples, depending on whether you previously created just [one custom service](#custom-service-creating-a-review) or both custom services for the review creation and the [email notification](#custom-service-sending-an-email-to-the-restaurant-owner):

</Tabs>

<br />

:::strapi What's next?
Learn more about how [custom policies](/dev-docs/backend-customization/examples/policies) can help you tweak a Strapi-based application and restrict access to some resources based on specific conditions.
:::



# Middlewares
Source: https://docs-v4.strapi.io/dev-docs/backend-customization/middlewares

const imgStyle = {width: '100%', margin: '0'}
const captionStyle = {fontSize: '12px'}

# Middlewares customization

:::strapi Different types of middlewares

In Strapi, 2 middleware concepts coexist:

- **Global middlewares** are [configured and enabled](/dev-docs/configurations/middlewares) for the entire Strapi server application. These middlewares can be applied at the application level or at the API level. <br/>The present documentation describes how to implement them.<br/>Plugins can also add global middlewares (see [Server API documentation](/dev-docs/api/plugins/server-api)).

- **Route middlewares** have a more limited scope and are configured and used as middlewares at the route level. They are described in the [routes documentation](/dev-docs/backend-customization/routes#middlewares).

:::

<figure style={imgStyle}>
  <img src="/img/assets/backend-customization/diagram-global-middlewares.png" alt="Simplified Strapi backend diagram with global middlewares highlighted" />
  <em><figcaption style={captionStyle}>The diagram represents a simplified version of how a request travels through the Strapi back end, with global middlewares highlighted. The backend customization introduction page includes a complete, <a href="/dev-docs/backend-customization#interactive-diagram">interactive diagram</a>.</figcaption></em>
</figure>

## Implementation

A new application-level or API-level middleware can be implemented:

- with the [interactive CLI command `strapi generate`](/dev-docs/cli#strapi-generate)
- or manually by creating a JavaScript file in the appropriate folder (see [project structure](/dev-docs/project-structure)):
  - `./src/middlewares/` for application-level middlewares
  - `./src/api/[api-name]/middlewares/` for API-level middlewares
  - `./src/plugins/[plugin-name]/middlewares/` for [plugin middlewares](/dev-docs/api/plugins/server-api#middlewares)

Middlewares working with the REST API are functions like the following:

</Tabs>

Globally scoped custom middlewares should be added to the [middlewares configuration file](/dev-docs/configurations/middlewares#loading-order) or Strapi won't load them.

API level and plugin middlewares can be added into the specific router that they are relevant to like the following:

```js title="./src/api/[api-name]/routes/[collection-name].js or ./src/plugins/[plugin-name]/server/routes/index.js"
module.exports = {
  routes: [
    {
      method: "GET",
      path: "/[collection-name]",
      handler: "[controller].find",
      config: {
        middlewares: ["[middleware-name]"],
        // See the usage section below for middleware naming conventions
      },
    },
  ],
};
```

<details>
<summary>Example of a custom timer middleware</summary>

</Tabs>

</details>

The GraphQL plugin also allows [implementing custom middlewares](/dev-docs/plugins/graphql#middlewares), with a different syntax.

:::tip
To see a possible advanced usage for custom global middlewares, read the [middlewares](/dev-docs/backend-customization/examples/middlewares) page of the backend customization examples cookbook.
:::

## Usage

Middlewares are called different ways depending on their scope:

- use `global::middleware-name` for application-level middlewares
- use `api::api-name.middleware-name` for API-level middlewares
- use `plugin::plugin-name.middleware-name` for plugin middlewares

:::tip
To list all the registered middlewares, run `yarn strapi middlewares:list`.
:::

### Restricting content access with an "is-owner policy"

It is often required that the author of an entry is the only user allowed to edit or delete the entry. In previous versions of Strapi, this was known as an "is-owner policy". With Strapi v4, the recommended way to achieve this behavior is to use a middleware.

Proper implementation largely depends on your project's needs and custom code, but the most basic implementation could be achieved with the following procedure: 

1. From your project's folder, create a middleware with the Strapi CLI generator, by running the `yarn strapi generate` (or `npm run strapi generate`) command in the terminal.
2. Select `middleware` from the list, using keyboard arrows, and press Enter.
3. Give the middleware a name, for instance `isOwner`.
4. Choose `Add middleware to an existing API` from the list.
5. Select which API you want the middleware to apply.
6. Replace the code in the `/src/api/[your-api-name]/middlewares/isOwner.js` file with the following, replacing `api::restaurant.restaurant` in line 22 with the identifier corresponding to the API you choose at step 5 (e.g., `api::blog-post.blog-post` if your API name is `blog-post`):

  ```js showLineNumbers title="src/api/blog-post/middlewares/isOwner.js"
    "use strict";

    /**
     * `isOwner` middleware
     */

    module.exports = (config, { strapi }) => {
      // Add your own logic here.
      return async (ctx, next) => {
        const user = ctx.state.user;
        const entryId = ctx.params.id ? ctx.params.id : undefined;
        let entry = {};

        /** 
         * Gets all information about a given entry,
         * populating every relations to ensure 
         * the response includes author-related information
         */
        if (entryId) {
          entry = await strapi.entityService.findOne(
            // highlight-start
            // replace the next line with your proper content-type identifier
            "api::restaurant.restaurant",
            // highlight-end
            entryId,
            { populate: "*" }
          );
        }

        /**
         * Compares user id and entry author id
         * to decide whether the request can be fulfilled
         * by going forward in the Strapi backend server
         */
        if (user.id !== entry.author.id) {
          return ctx.unauthorized("This action is unauthorized.");
        } else {
          return next();
        }
      };
    };
  ```

7. Ensure the middleware is configured to apply on some routes. In the `config` object found in the `src/api/[your-api–name]/routes/[your-content-type-name].js` file, define the methods (`find`, `findOne`, `read`, `update`, `delete`) for which you would like the middleware to apply, and declare the `isOwner` middleware for these routes.<br /><br />For instance, if you wish to allow GET (i.e., `find` and `findOne` methods) and POST (i.e., `create` method) requests to any user for the `restaurant` content-type in the `restaurant` API, but would like to restrict PUT (i.e., `update` method) and DELETE requests only to the user who created the entry, you could use the following code in the `src/api/restaurant/routes/restaurant.js` file:

    ```js title="src/api/restaurant/routes/restaurant.js"

    /**
     * restaurant router
     */
      
    const { createCoreRouter } = require("@strapi/strapi").factories;

    module.exports = createCoreRouter("api::restaurant.restaurant", {
      config: {
        update: {
          middlewares: ["api::restaurant.is-owner"],
        },
        delete: {
          middlewares: ["api::restaurant.is-owner"],
        },
      },
    });
    ```

:::info
You can find more information about route middlewares in the [routes documentation](/dev-docs/backend-customization/routes).
:::



# Models
Source: https://docs-v4.strapi.io/dev-docs/backend-customization/models

# Models

As Strapi is a headless Content Management System (CMS), creating a data structure for the content is one of the most important aspects of using the software. Models define a representation of the data structure.

There are 2 different types of models in Strapi:

- content-types, which can be collection types or single types, depending on how many entries they manage,
- and components that are data structures re-usable in multiple content-types.

If you are just starting out, it is convenient to generate some models with the [Content-type Builder](/user-docs/content-type-builder) directly in the admin panel. The user interface takes over a lot of validation tasks and showcases all the options available to create the content's data structure. The generated model mappings can then be reviewed at the code level using this documentation.

## Model creation

Content-types and components models are created and stored differently.

### Content-types

Content-types in Strapi can be created:

- with the [Content-type Builder in the admin panel](/user-docs/content-type-builder/introduction-to-content-types-builder.md),
- or with [Strapi's interactive CLI `strapi generate`](/dev-docs/cli#strapi-generate) command.

The content-types use the following files:

- `schema.json` for the model's [schema](#model-schema) definition. (generated automatically, when creating content-type with either method)
- `lifecycles.js` for [lifecycle hooks](#lifecycle-hooks). This file must be created manually.

These models files are stored in `./src/api/[api-name]/content-types/[content-type-name]/`, and any JavaScript or JSON file found in these folders will be loaded as a content-type's model (see [project structure](/dev-docs/project-structure)).

:::note
In [TypeScript](/dev-docs/typescript.md)-enabled projects, schema typings can be generated using the `ts:generate-types` command (e.g., `npm run strapi ts:generate-types` or `yarn strapi ts:generate-types`).
:::

### Components

Component models can't be created with CLI tools. Use the [Content-type Builder](/user-docs/content-type-builder) or create them manually.

Components models are stored in the `./src/components` folder. Every component has to be inside a subfolder, named after the category the component belongs to (see [project structure](/dev-docs/project-structure)).

## Model schema

The `schema.json` file of a model consists of:

- [settings](#model-settings), such as the kind of content-type the model represents or the table name in which the data should be stored,
- [information](#model-information), mostly used to display the model in the admin panel and access it through the REST and GraphQL APIs,
- [attributes](#model-attributes), which describe the data structure of the model,
- and [options](#model-options) used to defined specific behaviors on the model.

### Model settings

General settings for the model can be configured with the following parameters:

| Parameter                                          | Type   | Description                                                                                                            |
| -------------------------------------------- | ------ | ---------------------------------------------------------------------------------------------------------------------- |
| `collectionName`                                  | String | Database table name in which the data should be stored                                                    |
| `kind`<br /><br />_Optional,<br/>only for content-types_ | String | Defines if the content-type is:<ul><li>a collection type (`collectionType`)</li><li>or a single type (`singleType`)</li></ul> |

```json
// ./src/api/[api-name]/content-types/restaurant/schema.json

{
  "kind": "collectionType",
  "collectionName": "Restaurants_v1",
}
```

### Model information

The `info` key in the model's schema describes information used to display the model in the admin panel and access it through the Content API. It includes the following parameters:

<!-- ? with the new design system, do we still use FontAwesome?  -->

| Parameter            | Type   | Description                                                                                                                                 |
| -------------- | ------ | ------------------------------------------------------------------------------------------------------------------------------------------- |
| `displayName`  | String | Default name to use in the admin panel                                                                                                      |
| `singularName` | String | Singular form of the content-type name.<br />Used to generate the API routes and databases/tables collection.<br /><br />Should be kebab-case. |
| `pluralName`   | String | Plural form of the content-type name.<br />Used to generate the API routes and databases/tables collection.<br /><br />Should be kebab-case.    |
| `description`  | String | Description of the model                                                                                                                   |

```json title="./src/api/[api-name]/content-types/restaurant/schema.json"

  "info": {
    "displayName": "Restaurant",
    "singularName": "restaurant",
    "pluralName": "restaurants",
    "description": ""
  },
```

### Model attributes

The data structure of a model consists of a list of attributes. Each attribute has a `type` parameter, which describes its nature and defines the attribute as a simple piece of data or a more complex structure used by Strapi.

Many types of attributes are available:

- scalar types (e.g. strings, dates, numbers, booleans, etc.),
- Strapi-specific types, such as:
  - `media` for files uploaded through the [Media library](/user-docs/content-type-builder/configuring-fields-content-type.md#media)
  - `relation` to describe a [relation](#relations) between content-types
  - `customField` to describe [custom fields](#custom-fields) and their specific keys
  - `component` to define a [component](#components-1) (i.e. a data structure usable in multiple content-types)
  - `dynamiczone` to define a [dynamic zone](#dynamic-zones) (i.e. a flexible space based on a list of components)
  - and the `locale` and `localizations` types, only used by the [Internationalization (i18n) plugin](/dev-docs/plugins/i18n.md)

The `type` parameter of an attribute should be one of the following values:

| Type categories | Available types |
|------|-------|
| String types | <ul><li>`string`</li> <li>`text`</li> <li>`richtext`</li><li>`enumeration`</li> <li>`email`</li><li>`password`</li><li>[`uid`](#uid-type)</li></ul> |
| Date types | <ul><li>`date`</li> <li>`time`</li> <li>`datetime`</li> <li>`timestamp`</li></ul> |
| Number types | <ul><li>`integer`</li><li>`biginteger`</li><li>`float`</li> <li>`decimal`</li></ul> |
| Other generic types |<ul><li>`boolean`</li><li>`json`</li></ul> |
| Special types unique to Strapi |<ul><li>`media`</li><li>[`relation`](#relations)</li><li>[`customField`](#custom-fields)</li><li>[`component`](#components)</li><li>[`dynamiczone`](#dynamic-zones)</li></ul> |
| Internationalization (i18n)-related types<br /><br />_Can only be used if the [i18n plugin](/dev-docs/plugins/i18n.md) is installed_|<ul><li>`locale`</li><li>`localizations`</li></ul> |

:::caution
Never name a custom attribute `locale` because it could interfere with, and break, the [i18n](/dev-docs/plugins/i18n) feature.
:::

#### Validations

Basic validations can be applied to attributes using the following parameters:

| Parameter | Type    | Description                                                                                               | Default |
| -------------- | ------- | --------------------------------------------------------------------------------------------------------- | ------- |
| `required`     | Boolean | If `true`, adds a required validator for this property                                                     | `false` |
| `max`          | Integer | Checks if the value is greater than or equal to the given maximum                                        | -       |
| `min`          | Integer | Checks if the value is less than or equal to the given minimum                                           | -       |
| `minLength`    | Integer | Minimum number of characters for a field input value                                                      | -       |
| `maxLength`    | Integer | Maximum number of characters for a field input value                                                      | -       |
| `private`      | Boolean | If `true`, the attribute will be removed from the server response.<br/><br/>💡 This is useful to hide sensitive data. | `false` |
| `configurable` | Boolean | If `false`, the attribute isn't configurable from the Content-type Builder plugin.                         | `true`  |

```json title="./src/api/[api-name]/content-types/restaurant/schema.json"

{
  // ...
  "attributes": {
    "title": {
      "type": "string",
      "minLength": 3,
      "maxLength": 99,
      "unique": true
    },
    "description": {
      "default": "My description",
      "type": "text",
      "required": true
    },
    "slug": {
      "type": "uid",
      "targetField": "title"
    }
    // ...
  }
}
```

#### Database validations and settings

:::caution 🚧 This API is considered experimental.
These settings should be reserved to an advanced usage, as they might break some features. There are no plans to make these settings stable.
:::

Database validations and settings are custom options passed directly onto the `tableBuilder` Knex.js function during schema migrations. Database validations allow for an advanced degree of control for setting custom column settings. The following options are set in a `column: {}` object per attribute:

| Parameter     | Type    | Description                                                                                   | Default |
| ------------- | ------- | --------------------------------------------------------------------------------------------- | ------- |
| `name`        | string  | Changes the name of the column in the database                                                | -       |
| `defaultTo`   | string  | Sets the database `defaultTo`, typically used with `notNullable`                              | -       |
| `notNullable` | boolean | Sets the database `notNullable`, ensures that columns cannot be null                          | `false` |
| `unsigned`    | boolean | Only applies to number columns, removes the ability to go negative but doubles maximum length | `false` |
| `unique`      | boolean | Enforces database level unique, caution when using with draft & publish feature               | `false` |
| `type`        | string  | Changes the database type, if `type` has arguments, you should pass them in `args`            | -       |
| `args`        | array   | Arguments passed into the Knex.js function that changes things like `type`                    | `[]`    |

```json title="./src/api/[api-name]/content-types/restaurant/schema.json"

{
  // ...
  "attributes": {
    "title": {
      "type": "string",
      "minLength": 3,
      "maxLength": 99,
      "unique": true,
      "column": {
        "unique": true // enforce database unique also
      }
    },
    "description": {
      "default": "My description",
      "type": "text",
      "required": true,
      "column": {
        "defaultTo": "My description", // set database level default
        "notNullable": true // enforce required at database level, even for drafts
      }
    },
    "rating": {
      "type": "decimal",
      "default": 0,
      "column": {
        "defaultTo": 0,
        "type": "decimal", // using the native decimal type but allowing for custom precision
        "args": [
          6,1 // using custom precision and scale
        ]
      }
    }
    // ...
  }
}
```

#### `uid` type

The `uid` type is used to automatically prefill the field value in the admin panel with a unique identifier (UID) (e.g. slugs for articles) based on 2 optional parameters:

- `targetField` (string): If used, the value of the field defined as a target is used to auto-generate the UID.
- `options` (string): If used, the UID is generated based on a set of options passed to [the underlying `uid` generator](https://github.com/sindresorhus/slugify). The resulting `uid` must match the following regular expression pattern: `/^[A-Za-z0-9-_.~]*$`.

#### Relations

Relations link content-types together. Relations are explicitly defined in the [attributes](#model-attributes)  of a model with `type: 'relation'`  and accept the following additional parameters:

| Parameter                         | Description                                                                                                                                     |
| --------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------- |
| `relation`                  | The type of relation among these values:<ul><li>`oneToOne`</li><li>`oneToMany`</li><li>`manyToOne`</li><li>`manyToMany`</li></ul>                   |
| `target`                    | Accepts a string value as the name of the target content-type                                                                                   |
| `mappedBy` and `inversedBy`<br /><br />_Optional_ | In bidirectional relations, the owning side declares the `inversedBy` key while the inversed side declares the `mappedBy` key |

</Tabs>

#### Custom fields

[Custom fields](/dev-docs/custom-fields.md) extend Strapi’s capabilities by adding new types of fields to content-types. Custom fields are explicitly defined in the [attributes](#model-attributes) of a model with `type: customField`.
Custom fields' attributes also accept:

Custom fields' attributes also show the following specificities:

- a `customField` attribute whose value acts as a unique identifier to indicate which registered custom field should be used. Its value follows:
   - either the `plugin::plugin-name.field-name` format if a plugin created the custom field 
   - or the `global::field-name` format for a custom field specific to the current Strapi application
- and additional parameters depending on what has been defined when registering the custom field (see [custom fields documentation](/dev-docs/custom-fields.md)).

```json title="./src/api/[apiName]/[content-type-name]/content-types/schema.json"

{
  // …
  "attributes": {
    "attributeName": { // attributeName would be replaced by the actual attribute name
      "type": "customField",
      "customField": "plugin::color-picker.color",
      "options": {
        "format": "hex"
      }
    }
  }
  // …
}
```

#### Components

Component fields create a relation between a content-type and a component structure. Components are explicitly defined in the [attributes](#model-attributes) of a model with `type: 'component'` and accept the following additional parameters:

| Parameter    | Type    | Description                                                                              |
| ------------ | ------- | ---------------------------------------------------------------------------------------- |
| `repeatable` | Boolean | Could be `true` or `false` depending on whether the component is repeatable or not       |
| `component`  | String  | Define the corresponding component, following this format:<br/>`<category>.<componentName>`  |

```json title="./src/api/[apiName]/restaurant/content-types/schema.json"

{
  "attributes": {
    "openinghours": {
      "type": "component",
      "repeatable": true,
      "component": "restaurant.openinghours"
    }
  }
}
```

#### Dynamic zones

Dynamic zones create a flexible space in which to compose content, based on a mixed list of [components](#components-2).

Dynamic zones are explicitly defined in the [attributes](#model-attributes)  of a model with `type: 'dynamiczone'`. They also accept a `components` array, where each component should be named following this format: `<category>.<componentName>`.

```json title="./src/api/[api-name]/content-types/article/schema.json"

{
  "attributes": {
    "body": {
      "type": "dynamiczone",
      "components": ["article.slider", "article.content"]
    }
  }
}
```

### Model options

The `options` key is used to define specific behaviors and accepts the following parameter:

| Parameter           | Type             | Description                                                                                                                                                                                                                                                                                                        |
|---------------------|------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| `privateAttributes` | Array of strings | Allows treating a set of attributes as private, even if they're not actually defined as attributes in the model. It could be used to remove them from API responses timestamps. <br /><br /> The `privateAttributes` defined in the model are merged with the `privateAttributes` defined in the global Strapi configuration. |
| `draftAndPublish`   | Boolean          | Enables the draft and publish feature. <br /><br /> Default value: `true` (`false` if the content-type is created from the interactive CLI).                                                                                                                                                                                    |

```json title="./src/api/[api-name]/content-types/restaurant/schema.json"

{
  "options": {
    "privateAttributes": ["id", "createdAt"],
    "draftAndPublish": true
  }
}
```

## Lifecycle hooks

Lifecycle hooks are functions that get triggered when Strapi queries are called. They are triggered automatically when managing content through the administration panel or when developing custom code using `queries`·

Lifecycle hooks can be customized declaratively or programmatically.

:::caution
Lifecycles hooks are not triggered when using directly the [knex](https://knexjs.org/) library instead of Strapi functions.
:::

:::tip
Please refer to the [error handling](/dev-docs/error-handling#services-and-models-lifecycles) documentation to learn how to throw errors from lifecycle hooks.
:::

### Available lifecycle events

The following lifecycle events are available:

- `beforeCreate`
- `beforeCreateMany`
- `afterCreate`
- `afterCreateMany`
- `beforeUpdate`
- `beforeUpdateMany`
- `afterUpdate`
- `afterUpdateMany`
- `beforeDelete`
- `beforeDeleteMany`
- `afterDelete`
- `afterDeleteMany`
- `beforeCount`
- `afterCount`
- `beforeFindOne`
- `afterFindOne`
- `beforeFindMany`
- `afterFindMany`

### Hook `event` object

Lifecycle hooks are functions that take an `event` parameter, an object with the following keys:

| Key      | Type              | Description                                                                                                                                                      |
| -------- | ----------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `action` | String            | Lifecycle event that has been triggered (see [list](#available-lifecycle-events))                                                                                |
| `model`  | Array of strings (uid)            | An array of uids of the content-types whose events will be listened to.<br />If this argument is not supplied, events are listened on all content-types. |
| `params` | Object            | Accepts the following parameters:<ul><li>`data`</li><li>`select`</li><li>`where`</li><li>`orderBy`</li><li>`limit`</li><li>`offset`</li><li>`populate`</li></ul> |
| `result` | Object            | _Optional, only available with `afterXXX` events_<br /><br />Contains the result of the action.                                                                      |
| `state`  | Object            | Query state, can be used to share state between `beforeXXX` and `afterXXX` events of a query.                                                               |
<!-- TODO: `state` has not been implemented yet, ask for more info once done -->

### Declarative and programmatic usage

To configure a content-type lifecycle hook, create a `lifecycles.js` file in the `./src/api/[api-name]/content-types/[content-type-name]/` folder.

Each event listener is called sequentially. They can be synchronous or asynchronous.

#### Declarative usage

</Tabs>

#### Programmatic usage

Using the database layer API, it's also possible to register a subscriber and listen to events programmatically:

```js title="./src/index.js"
module.exports = {
  async bootstrap({ strapi }) {
  // registering a subscriber
    strapi.db.lifecycles.subscribe({
      models: [], // optional;

      beforeCreate(event) {
        const { data, where, select, populate } = event.params;

        event.state = 'doStuffAfterWards';
      },

      afterCreate(event) {
        if (event.state === 'doStuffAfterWards') {
        }

        const { result, params } = event;

        // do something to the result
      },
    });

    // generic subscribe for generic handling
    strapi.db.lifecycles.subscribe((event) => {
      if (event.action === 'beforeCreate') {
        // do something
      }
    });
  }
}
```



# Policies
Source: https://docs-v4.strapi.io/dev-docs/backend-customization/policies

const imgStyle = {width: '100%', margin: '0'}
const captionStyle = {fontSize: '12px'}

# Policies

Policies are functions that execute specific logic on each request before it reaches the [controller](/dev-docs/backend-customization/controllers). They are mostly used for securing business logic.

Each [route](/dev-docs/backend-customization/routes) of a Strapi project can be associated to an array of policies. For example, a policy named `is-admin` could check that the request is sent by an admin user, and restrict access to critical routes.

Policies can be global or scoped. [Global policies](#global-policies) can be associated to any route in the project. Scoped policies only apply to a specific [API](#api-policies) or [plugin](#plugin-policies).

<figure style={imgStyle}>
  <img src="/img/assets/backend-customization/diagram-routes.png" alt="Simplified Strapi backend diagram with routes and policies highlighted" />
  <em><figcaption style={captionStyle}>The diagram represents a simplified version of how a request travels through the Strapi back end, with policies and routes highlighted. The backend customization introduction page includes a complete, <a href="/dev-docs/backend-customization#interactive-diagram">interactive diagram</a>.</figcaption></em>
</figure>

## Implementation

A new policy can be implemented:

- with the [interactive CLI command `strapi generate`](/dev-docs/cli#strapi-generate) 
- or manually by creating a JavaScript file in the appropriate folder (see [project structure](/dev-docs/project-structure)):
  - `./src/policies/` for global policies
  - `./src/api/[api-name]/policies/` for API policies
  - `./src/plugins/[plugin-name]/policies/` for plugin policies

<br/>

Global policy implementation example:

</Tabs>

`policyContext` is a wrapper around the [controller](/dev-docs/backend-customization/controllers) context. It adds some logic that can be useful to implement a policy for both REST and GraphQL.

<br/>

:::tip
To see a possible advanced usage for route policies, read the [policies](/dev-docs/backend-customization/examples/policies) page of the backend customization examples cookbook.
:::

Policies can be configured using a `config` object:

</Tabs>

## Usage

To apply policies to a route, add them to its configuration object (see [routes documentation](/dev-docs/backend-customization/routes#policies)).

Policies are called different ways depending on their scope:

- use `global::policy-name` for [global policies](#global-policies)
- use `api::api-name.policy-name` for [API policies](#api-policies)
- use `plugin::plugin-name.policy-name` for [plugin policies](#plugin-policies)

:::tip
To list all the available policies, run `yarn strapi policies:list`.
:::

### Global policies

Global policies can be associated to any route in a project.

</Tabs>

### Plugin policies

[Plugins](/dev-docs/plugins) can add and expose policies to an application. For example, the [Users & Permissions plugin](/user-docs/users-roles-permissions) comes with policies to ensure that the user is authenticated or has the rights to perform an action:

</Tabs>

### API policies

API policies are associated to the routes defined in the API where they have been declared.

</Tabs>

To use a policy in another API, reference it with the following syntax: `api::[apiName].[policyName]`:

</Tabs>



# Requests and Responses
Source: https://docs-v4.strapi.io/dev-docs/backend-customization/requests-responses

const imgStyle = {width: '100%', margin: '0'}
const captionStyle = {fontSize: '12px'}

# Requests and Responses

The Strapi back end server is based on [Koa](https://koajs.com/). When you send requests through the [REST API](/dev-docs/api/rest), a context object (`ctx`) is passed to every element of the Strapi back end (e.g., [policies](/dev-docs/backend-customization/policies), [controllers](/dev-docs/backend-customization/controllers), [services](/dev-docs/backend-customization/services)).

`ctx` includes 3 main objects:

- [`ctx.request`](#ctxrequest) for information about the request sent by the client making an API request,
- [`ctx.state`](#ctxstate) for information about the state of the request within the Strapi back end,
- and [`ctx.response`](#ctxresponse) for information about the response that the server will return.

:::tip
The request's context can also be accessed from anywhere in the code with the [`strapi.requestContext` function](#accessing-the-request-context-anywhere).
:::

:::info
In addition to the concepts and parameters described in the following documentation, you might find additional information in the [Koa request documentation](http://koajs.com/#request), [Koa Router documentation](https://github.com/koajs/router/blob/master/API.md) and [Koa response documentation](http://koajs.com/#response).
:::

<figure style={imgStyle}>
  <img src="/img/assets/backend-customization/diagram-requests-responses.png" alt="Simplified Strapi backend diagram with requests and responses highlighted" />
  <em><figcaption style={captionStyle}>The diagram represents a simplified version of how a request travels through the Strapi back end, with requests and responses highlighted. The backend customization introduction page includes a complete, <a href="/dev-docs/backend-customization#interactive-diagram">interactive diagram</a>.</figcaption></em>
</figure>

## `ctx.request`

The `ctx.request` object contains the following parameters:

| Parameter             | Description                                                                                  | Type     |
| --------------------- | -------------------------------------------------------------------------------------------- | -------- |
| `ctx.request.body`    | Parsed version of the body. | `Object` |
| `ctx.request.files`   | Files sent with the request. | `Array` |
| `ctx.request.headers` | Headers sent with the request. | `Object` |
| `ctx.request.host`    | Host part of the URL, including the port. | `String` |
| `ctx.request.hostname`| Host part of the URL, excluding the port. | `String` |
| `ctx.request.href`    | Complete URL of the requested resource, including the protocol, domain, port (if specified), path, and query parameters. | `String` |
| `ctx.request.ip`      | IP of the person sending the request.| `String` |
| `ctx.request.ips`     | When `X-Forwarded-For` is present and `app.proxy` is enabled, an array of IPs is returned, ordered from upstream to downstream. <br /><br />For example if the value were "client, proxy1, proxy2", you would receive the `["client", "proxy1", "proxy2"]` array. | `Array` |
| `ctx.request.method`  | Request method (e.g., `GET`, `POST`). | `String` |
| `ctx.request.origin`  | URL part before the first `/`. | `String` |
| `ctx.request.params`  | Parameters sent in the URL.<br /><br/>For example, if the internal URL is `/restaurants/:id`, whatever you replace `:id` in the real request becomes accessible through `ctx.request.params.id`. | `Object` |
| `ctx.request.path`    | Path of the requested resource, excluding the query parameters. | `String` |
| `ctx.request.protocol`| Protocol being used (e.g., `https` or `http`). | `String` |
| `ctx.request.query`   | Strapi-specific [query parameters](#ctxrequestquery). | `Object` |
| `ctx.request.subdomains`| Subdomains included in the URL.<br /><br />For example, if the domain is `tobi.ferrets.example.com`, the value is the following array: `["ferrets", "tobi"]`. | `Array` |
| `ctx.request.url`     | Path and query parameters of the requested resource, excluding the protocol, domain, and port. | `String` |

<details>
<summary>Differences between protocol, origin, url, href, path, host, and hostname :</summary>

Given an API request sent to the `https://example.com:1337/api/restaurants?id=123` URL, here is what different parameters of the `ctx.request` object return:

| Parameter  | Returned value                                    |
| ---------- | ------------------------------------------------- |
| `ctx.request.href`     | `https://example.com:1337/api/restaurants?id=123` |
| `ctx.request.protocol` | `https`                                           |
| `ctx.request.host`     | `localhost:1337`                                  |
| `ctx.request.hostname` | `localhost`                                       |
| `ctx.request.origin`   | `https://example.com:1337`                          |
| `ctx.request.url`      | `/api/restaurants?id=123`                         |
| `ctx.request.path`     | `/api/restaurants`                                |

</details>

### `ctx.request.query`

`ctx.request` provides a `query` object that gives access to Strapi query parameters. The following table lists available parameters with a short description and a link to the relevant REST API documentation section (see [REST API parameters](/dev-docs/api/rest/parameters) for more information):

| Parameter | Description                                                                                                                                            | Type                 |
| -------------------------------------| --------------------------------------------------------------------------------------------------------------------------- | -------------------- |
| `ctx.request.query`<br />`ctx.query` | The whole query object.                                                                                                    | `Object`             |
| `ctx.request.query.sort`             | Parameters to [sort the response](/dev-docs/api/rest/sort-pagination.md#sorting)                                            | `String` or `Array`  |
| `ctx.request.query.filters`          | Parameters to [filter the response](/dev-docs/api/rest/filters-locale-publication#filtering)                                | `Object`             |
| `ctx.request.query.populate`         | Parameters to [populate relations, components, or dynamic zones](/dev-docs/api/rest/populate-select#population)             | `String` or `Object` |
| `ctx.request.query.fields`           | Parameters to [select only specific fields to return with the response](/dev-docs/api/rest/populate-select#field-selection) | `Array`              |
| `ctx.request.query.pagination`       | Parameter to [page through entries](/dev-docs/api/rest/sort-pagination.md#pagination)                                       | `Object`             |
| `ctx.request.query.publicationState` | Parameter to [select the Draft & Publish state](/dev-docs/api/rest/filters-locale-publication#publication-state)            | `String`             |
| `ctx.request.query.locale`           | Parameter to [select one or multiple locales](/dev-docs/api/rest/filters-locale-publication#locale)                         | `String` or `Array`  |

## `ctx.state`

The `ctx.state` object gives access to the state of the request within the Strapi back end, including specific values about the [user](#ctxstateuser), [authentication](#ctxstateauth), [route](#ctxstateroute):

| Parameter                  | Description                                                                 | Type     |
| ---------------------------|---------------------------------------------------------------------------- | -------- |
| `ctx.state.isAuthenticated`| Returns whether the current user is authenticated in any way.               | `Boolean` |

### `ctx.state.user`

The `ctx.state.user` object gives access to information about the user performing the request and includes the following parameters:

| Parameter | Description                                                                                  | Type     |
| ----------| -------------------------------------------------------------------------------------------- | -------- |
| `ctx.state.user`| User's information. Only one relation is populated.                   | `Object` |
| `ctx.state.user.role`| The user's role | `Object` |
<!-- which type of "user" are we talking about here? a "U&P"-related user? -->

### `ctx.state.auth`

The `ctx.state.auth` object gives access to information related to the authentication and includes the following parameters:

| Parameter                     | Description                                                                                  | Type     |
| ------------------------------| -------------------------------------------------------------------------------------------- | -------- |
| `ctx.state.auth.strategy`     | Information about the currently used authentication strategy ([Users & Permissions plugin](/dev-docs/plugins/users-permissions) or [API tokens](/dev-docs/configurations/api-tokens)) | `Object` |
| `ctx.state.auth.strategy.name`| Name of the currently used strategy                                                          | `String` |
| `ctx.state.auth.credentials`  | The user's credentials                                                                      | `String` |
<!-- ? ctx.state.auth.strategy seems to include the authenticate and verify functions. should we document them somewhere? -->
<!-- ? not sure what credentials are used for ? -->

### `ctx.state.route`

The `ctx.state.route` object gives access to information related to the current route and includes the following parameters:

| Parameter | Description                                                                                  | Type     |
| ----------| -------------------------------------------------------------------------------------------- | -------- |
| `ctx.state.route.method`| Method used to access the current route. | `String` |
| `ctx.state.route.path`| Path of the current route. | `String` |
| `ctx.state.route.config`| Configuration information about the current route. | `Object` |
| `ctx.state.route.handler`| Handler (controller) of the current route. | `Object` |
| `ctx.state.route.info`| Additional information about the current route, such as the apiName and the API request type. | `Object` |
| `ctx.state.route.info.apiName`| Name of the used API.  | `String` |
| `ctx.state.route.info.type`| Type of the used API. | `String` |

## `ctx.response`

The `ctx.response` object gives access to information related to the response that the server will return and includes the following parameters:

| Parameter | Description                                                                                  | Type     |
| ----------| -------------------------------------------------------------------------------------------- | -------- |
| `ctx.response.body`| Body of the response. | `Any` |
| `ctx.response.status` | Status code of the response. | `Integer` |
| `ctx.response.message`| Status message of the response.<br/><br />By default, `response.message` is associated with `response.status`. | `String` |
| `ctx.response.header`<br />`ctx.response.headers`| Header(s) sent with the response. | `Object` |
| `ctx.response.length`| [`Content-Length`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Length) header value as a number when present, or deduces it from `ctx.body` when possible; otherwise, returns `undefined`. | `Integer` |
| `ctx.response.redirect`<br />`ctx.response.redirect(url, [alt])` | Performs a `302` redirect to the URL. The string "back" is special-cased to provide Referrer support; when Referrer is not present, alt or "/" is used.<br /><br />Example: `ctx.response.redirect('back', '/index.html');` | `Function` |
| `ctx.response.attachment`<br /><br />`ctx.response.attachment([filename], [options])` | Sets [`Content-Disposition`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Disposition) header to "attachment" to signal the client to prompt for download. Optionally specify the filename of the download and some [options](https://github.com/jshttp/content-disposition#options). | `Function` |
| `ctx.response.type`| [`Content-Type`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Type) header, void of parameters such as "charset". | `String` |
| `ctx.response.lastModified`| [`Last-Modified`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Last-Modified) header as a Date, if it exists. | `DateTime` |
| `ctx.response.etag`| Sets the [`ETag`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag) of a response including the wrapped "s.<br/>There is no corresponding `response.etag` getter. | `String` |
<!-- I don't understand what these 5 last lines above mean, just copied and pasted them from the user's PR 🤷 — piwi -->

## Accessing the request context anywhere

:::callout ✨ New in v4.3.9
The `strapi.requestContext` works with Strapi v4.3.9+.
:::

Strapi exposes a way to access the current request context from anywhere in the code (e.g. lifecycle functions).

You can access the request as follows:

```js
const ctx = strapi.requestContext.get();
```

You should only use this inside of functions that will be called in the context of an HTTP request.

```js
// correct

const service = {
  myFunction() {
    const ctx = strapi.requestContext.get();
    console.log(ctx.state.user);
  },
};

// incorrect
const ctx = strapi.requestContext.get();

const service = {
  myFunction() {
    console.log(ctx.state.user);
  },
};
```

**Example:**

```js title="./api/test/content-types/article/lifecycles.js"

module.exports = {
  beforeUpdate() {
    const ctx = strapi.requestContext.get();

    console.log('User info in service: ', ctx.state.user);
  },
};
```

:::note
Strapi uses a Node.js feature called [AsyncLocalStorage](https://nodejs.org/docs/latest-v16.x/api/async_context.html#class-asynclocalstorage) to make the context available anywhere.
:::



# Routes
Source: https://docs-v4.strapi.io/dev-docs/backend-customization/routes

const imgStyle = {width: '100%', margin: '0'}
const captionStyle = {fontSize: '12px'}

# Routes

Requests sent to Strapi on any URL are handled by routes. By default, Strapi generates routes for all the content-types (see [REST API documentation](/dev-docs/api/rest)). Routes can be [added](#implementation) and configured:

- with [policies](#policies), which are a way to block access to a route,
- and with [middlewares](#middlewares), which are a way to control and change the request flow and the request itself.

Once a route exists, reaching it executes some code handled by a controller (see [controllers documentation](/dev-docs/backend-customization/controllers)). To view all existing routes and their hierarchal order, you can run `yarn strapi routes:list` (see [CLI reference](/dev-docs/cli)).

<figure style={imgStyle}>
  <img src="/img/assets/backend-customization/diagram-routes.png" alt="Simplified Strapi backend diagram with routes highlighted" />
  <em><figcaption style={captionStyle}>The diagram represents a simplified version of how a request travels through the Strapi back end, with routes highlighted. The backend customization introduction page includes a complete, <a href="/dev-docs/backend-customization#interactive-diagram">interactive diagram</a>.</figcaption></em>
</figure>

## Implementation

Implementing a new route consists in defining it in a router file within the `./src/api/[apiName]/routes` folder (see [project structure](/dev-docs/project-structure)).

There are 2 different router file structures, depending on the use case:

- configuring [core routers](#configuring-core-routers)
- or creating [custom routers](#creating-custom-routers).

### Configuring core routers

Core routers (i.e. `find`, `findOne`, `create`, `update`, and `delete`) correspond to [default routes](/dev-docs/api/rest#endpoints) automatically created by Strapi when a new [content-type](/dev-docs/backend-customization/models#model-creation) is created.

Strapi provides a `createCoreRouter` factory function that automatically generates the core routers and allows:

- passing in configuration options to each router
- and disabling some core routers to [create custom ones](#creating-custom-routers).

A core router file is a JavaScript file exporting the result of a call to `createCoreRouter` with the following parameters:

| Parameter | Description                                                                                  | Type     |
| ----------| -------------------------------------------------------------------------------------------- | -------- |
| `prefix`  | Allows passing in a custom prefix to add to all routers for this model (e.g. `/test`)        | `String` |
| `only`    | Core routes that will only be loaded<br /><br/>Anything not in this array is ignored.        | `Array` | -->
| `except`  | Core routes that should not be loaded<br/><br />This is functionally the opposite of the `only` parameter. | `Array` |
| `config`  | Configuration to handle [policies](#policies), [middlewares](#middlewares) and [public availability](#public-routes) for the route | `Object` |

<br/>

</Tabs>

<br />

Generic implementation example:

</Tabs>

This only allows a `GET` request on the `/restaurants` path from the core `find` [controller](/dev-docs/backend-customization/controllers) without authentication.

:::tip
To see a possible usage for custom routes, read the [routes](/dev-docs/backend-customization/examples/routes) page of the backend customization examples cookbook.
:::

### Creating custom routers

Creating custom routers consists in creating a file that exports an array of objects, each object being a route with the following parameters:

| Parameter                  | Description                                                                      | Type     |
| -------------------------- | -------------------------------------------------------------------------------- | -------- |
| `method`                   | Method associated to the route (i.e. `GET`, `POST`, `PUT`, `DELETE` or `PATCH`)  | `String` |
| `path`                     | Path to reach, starting with a forward-leading slash (e.g. `/articles`)| `String` |
| `handler`                  | Function to execute when the route is reached.<br/>Should follow this syntax: `<controllerName>.<actionName>` | `String` |
| `config`<br /><br />_Optional_ | Configuration to handle [policies](#policies), [middlewares](#middlewares) and [public availability](#public-routes) for the route<br/><br/>           | `Object` |

<br/>

Dynamic routes can be created using parameters and regular expressions. These parameters will be exposed in the `ctx.params` object. For more details, please refer to the [PathToRegex](https://github.com/pillarjs/path-to-regexp) documentation.

:::caution
Routes files are loaded in alphabetical order. To load custom routes before core routes, make sure to name custom routes appropriately (e.g. `01-custom-routes.js` and `02-core-routes.js`).
:::

<details>

<summary>Example of a custom router using URL parameters and regular expressions for routes</summary>

In the following example, the custom routes file name is prefixed with `01-` to make sure the route is reached before the core routes.

</Tabs>

</details>

## Configuration

Both [core routers](#configuring-core-routers) and [custom routers](#creating-custom-routers) have the same configuration options. The routes configuration is defined in a `config` object that can be used to handle [policies](#policies) and [middlewares](#middlewares) or to [make the route public](#public-routes).

### Policies

[Policies](/dev-docs/backend-customization/policies) can be added to a route configuration:

- by pointing to a policy registered in `./src/policies`, with or without passing a custom configuration
- or by declaring the policy implementation directly, as a function that takes `policyContext` to extend [Koa's context](https://koajs.com/#context) (`ctx`) and the `strapi` instance as arguments (see [policies documentation](/dev-docs/backend-customization/routes))

</Tabs>

</TabItem>

</Tabs>

</TabItem>

</Tabs>

### Middlewares

[Middlewares](/dev-docs/backend-customization/middlewares) can be added to a route configuration:

- by pointing to a middleware registered in `./src/middlewares`, with or without passing a custom configuration
- or by declaring the middleware implementation directly, as a function that takes [Koa's context](https://koajs.com/#context) (`ctx`) and the `strapi` instance as arguments:

</Tabs>

</TabItem>

</Tabs>

</TabItem>

</Tabs>

### Public routes

By default, routes are protected by Strapi's authentication system, which is based on [API tokens](/dev-docs/configurations/api-tokens) or on the use of the [Users & Permissions plugin](/user-docs/plugins/strapi-plugins#users-permissions-plugin).

In some scenarios, it can be useful to have a route publicly available and control the access outside of the normal Strapi authentication system. This can be achieved by setting the `auth` configuration parameter of a route to `false`:

</Tabs>

</TabItem>

</Tabs>

</TabItem>

</Tabs>



# Services
Source: https://docs-v4.strapi.io/dev-docs/backend-customization/services

const imgStyle = {width: '100%', margin: '0'}
const captionStyle = {fontSize: '12px'}

# Services

Services are a set of reusable functions. They are particularly useful to respect the "don’t repeat yourself" (DRY) programming concept and to simplify [controllers](/dev-docs/backend-customization/controllers.md) logic.

<figure style={imgStyle}>
  <img src="/img/assets/backend-customization/diagram-controllers-services.png" alt="Simplified Strapi backend diagram with services highlighted" />
  <em><figcaption style={captionStyle}>The diagram represents a simplified version of how a request travels through the Strapi back end, with services highlighted. The backend customization introduction page includes a complete, <a href="/dev-docs/backend-customization#interactive-diagram">interactive diagram</a>.</figcaption></em>
</figure>

## Implementation

Services can be [generated or added manually](#adding-a-new-service). Strapi provides a `createCoreService` factory function that automatically generates core services and allows building custom ones or [extend or replace the generated services](#extending-core-services).

### Adding a new service

A new service can be implemented:

- with the [interactive CLI command `strapi generate`](/dev-docs/cli#strapi-generate)
- or manually by creating a JavaScript file in the appropriate folder (see [project structure](/dev-docs/project-structure.md)):
  - `./src/api/[api-name]/services/` for API services
  - or `./src/plugins/[plugin-name]/services/` for [plugin services](/dev-docs/api/plugins/server-api#services).

To manually create a service, export a factory function that returns the service implementation (i.e. an object with methods). This factory function receives the `strapi` instance:

</Tabs>

:::strapi Entity Service API
To get started creating your own services, see Strapi's built-in functions in the [Entity Service API](/dev-docs/api/entity-service) documentation.
:::

<details>

<summary>Example of a custom email service (using Nodemailer)</summary>

The goal of a service is to store reusable functions. A `sendNewsletter` service could be useful to send emails from different functions in our codebase that have a specific purpose:

</Tabs>

The service is now available through the `strapi.service('api::restaurant.restaurant').sendNewsletter(...args)` global variable. It can be used in another part of the codebase, like in the following controller:

</Tabs>

</details>

:::note
When a new [content-type](/dev-docs/backend-customization/models.md#content-types) is created, Strapi builds a generic service with placeholder code, ready to be customized.
:::

:::tip
To see a possible advanced usage for custom services, read the [services and controllers](/dev-docs/backend-customization/examples/services-and-controllers) page of the backend customization examples cookbook.
:::

### Extending core services

Core services are created for each content-type and could be used by [controllers](/dev-docs/backend-customization/controllers.md) to execute reusable logic through a Strapi project. Core services can be customized to implement your own logic. The following code examples should help you get started.

:::tip
A core service can be replaced entirely by [creating a custom service](#adding-a-new-service) and naming it the same as the core service (e.g. `find`, `findOne`, `create`, `update`, or `delete`).
:::

<details>
<summary>Collection type examples</summary>

</Tabs>

</details>

<details>

<summary>Single type examples</summary>

</Tabs>

</details>

:::note
The `find()` method from core services can use both types of pagination, by page of by offset (see [REST API](/dev-docs/api/rest/sort-pagination#pagination)).
:::

## Usage

Once a service is created, it's accessible from [controllers](/dev-docs/backend-customization/controllers.md) or from other services:

```js
// access an API service
strapi.service('api::apiName.serviceName').FunctionName();
// access a plugin service
strapi.service('plugin::pluginName.serviceName').FunctionName();
```

In the syntax examples above, `serviceName` is the name of the service file for API services or the name used to export the service file to `services/index.js` for plugin services.

:::tip
To list all the available services, run `yarn strapi services:list`.
:::



# Webhooks
Source: https://docs-v4.strapi.io/dev-docs/backend-customization/webhooks

# Webhooks

Webhook is a construct used by an application to notify other applications that an event occurred. More precisely, webhook is a user-defined HTTP callback. Using a webhook is a good way to tell third party providers to start some processing (CI, build, deployment ...).

The way a webhook works is by delivering information to a receiving application through HTTP requests (typically POST requests).

## User content-type webhooks

To prevent from unintentionally sending any user's information to other applications, Webhooks will not work for the User content-type.
If you need to notify other applications about changes in the Users collection, you can do so by creating [Lifecycle hooks](/dev-docs/backend-customization/models#lifecycle-hooks) using the `./src/index.js` example.

## Available configurations

You can set webhook configurations inside the file `./config/server`.

- `webhooks`
  - `defaultHeaders`: You can set default headers to use for your webhook requests. This option is overwritten by the headers set in the webhook itself.

**Example configuration**

</Tabs>

## Securing your webhooks

Most of the time, webhooks make requests to public URLs, therefore it is possible that someone may find that URL and send it wrong information.

To prevent this from happening you can send a header with an authentication token. Using the Admin panel you would have to do it for every webhook.
Another way is to define `defaultHeaders` to add to every webhook requests.

You can configure these global headers by updating the file at `./config/server`:

</Tabs>

</TabItem>

</Tabs>

</TabItem>

</Tabs>

If you are developing the webhook handler yourself you can now verify the token by reading the headers.

<!--- ### Usage

To access the webhook configuration panel, go to `Settings` > `Webhooks`.

![Webhooks home](/img/assets/concepts/webhooks/home.png)

#### Create a webhook

Click on `Add new webhook` and fill in the form.

![create](/img/assets/concepts/webhooks/create.png)

#### Trigger a webhook

You can test out a webhook with a test event: `trigger-test`. Open the webhook you want to trigger.

![Trigger ](/img/assets/concepts/webhooks/trigger_start.png)

Click on the `Trigger` button.

![Trigger pending](/img/assets/concepts/webhooks/trigger.png)

You will see the trigger request appear and get the result.

![Trigger result](/img/assets/concepts/webhooks/trigger_result.png)

#### Enable or disable a webhook

You can enable or disable a webhook from the list view directly.

![Disable webhook](/img/assets/concepts/webhooks/disable.png)

#### Update a webhook

You can edit any webhook by clicking on the `pen` icon in the webhook list view.

![Update webhook](/img/assets/concepts/webhooks/list.png)

#### Delete a webhook

You can delete a webhook by clicking on the `trash` icon.

![Delete webhook](/img/assets/concepts/webhooks/disable.png) --->

## Available events

By default Strapi webhooks can be triggered by the following events:

| Name              | Description                                           |
| ----------------- | ----------------------------------------------------- |
| [`entry.create`](#entrycreate)   | Triggered when a Content Type entry is created.       |
| [`entry.update`](#entryupdate)    | Triggered when a Content Type entry is updated.       |
| [`entry.delete`](#entrydelete)    | Triggered when a Content Type entry is deleted.       |
| [`entry.publish`](#entrypublish)   | Triggered when a Content Type entry is published.\*   |
| [`entry.unpublish`](#entryunpublish) | Triggered when a Content Type entry is unpublished.\* |
| [`media.create`](#mediacreate)    | Triggered when a media is created.                    |
| [`media.update`](#mediaupdate)    | Triggered when a media is updated.                    |
| [`media.delete`](#mediadelete)    | Triggered when a media is deleted.                    |
| [`review-workflows.updateEntryStage`](#review-workflowsupdateentrystage) | Triggered when content is moved between review stages (see [Review Workflows](/user-docs/settings/review-workflows)).<br />This event is only available with the  edition of Strapi. |
| [`releases.publish`](#releasespublish-) | Triggered when a Release is published (see [Releases](/user-docs/releases/introduction)).<br />This event is only available with the  edition of Strapi and the  plan for Strapi Cloud. |

\*only when `draftAndPublish` is enabled on this Content Type.

## Payloads

:::tip NOTE
Private fields and passwords are not sent in the payload.
:::

### Headers

When a payload is delivered to your webhook's URL, it will contain specific headers:

| Header           | Description                                |
| ---------------- | ------------------------------------------ |
| `X-Strapi-Event` | Name of the event type that was triggered. |

### `entry.create`

This event is triggered when a new entry is created.

**Example payload**

```json
{
  "event": "entry.create",
  "createdAt": "2020-01-10T08:47:36.649Z",
  "model": "address",
  "entry": {
    "id": 1,
    "geolocation": {},
    "city": "Paris",
    "postal_code": null,
    "category": null,
    "full_name": "Paris",
    "createdAt": "2020-01-10T08:47:36.264Z",
    "updatedAt": "2020-01-10T08:47:36.264Z",
    "cover": null,
    "images": []
  }
}
```

### `entry.update`

This event is triggered when an entry is updated.

**Example payload**

```json
{
  "event": "entry.update",
  "createdAt": "2020-01-10T08:58:26.563Z",
  "model": "address",
  "entry": {
    "id": 1,
    "geolocation": {},
    "city": "Paris",
    "postal_code": null,
    "category": null,
    "full_name": "Paris",
    "createdAt": "2020-01-10T08:47:36.264Z",
    "updatedAt": "2020-01-10T08:58:26.210Z",
    "cover": null,
    "images": []
  }
}
```

### `entry.delete`

This event is triggered when an entry is deleted.

**Example payload**

```json
{
  "event": "entry.delete",
  "createdAt": "2020-01-10T08:59:35.796Z",
  "model": "address",
  "entry": {
    "id": 1,
    "geolocation": {},
    "city": "Paris",
    "postal_code": null,
    "category": null,
    "full_name": "Paris",
    "createdAt": "2020-01-10T08:47:36.264Z",
    "updatedAt": "2020-01-10T08:58:26.210Z",
    "cover": null,
    "images": []
  }
}
```

### `entry.publish`

This event is triggered when an entry is published.

**Example payload**

```json
{
  "event": "entry.publish",
  "createdAt": "2020-01-10T08:59:35.796Z",
  "model": "address",
  "entry": {
    "id": 1,
    "geolocation": {},
    "city": "Paris",
    "postal_code": null,
    "category": null,
    "full_name": "Paris",
    "createdAt": "2020-01-10T08:47:36.264Z",
    "updatedAt": "2020-01-10T08:58:26.210Z",
    "publishedAt": "2020-08-29T14:20:12.134Z",
    "cover": null,
    "images": []
  }
}
```

### `entry.unpublish`

This event is triggered when an entry is unpublished.

**Example payload**

```json
{
  "event": "entry.unpublish",
  "createdAt": "2020-01-10T08:59:35.796Z",
  "model": "address",
  "entry": {
    "id": 1,
    "geolocation": {},
    "city": "Paris",
    "postal_code": null,
    "category": null,
    "full_name": "Paris",
    "createdAt": "2020-01-10T08:47:36.264Z",
    "updatedAt": "2020-01-10T08:58:26.210Z",
    "publishedAt": null,
    "cover": null,
    "images": []
  }
}
```

### `media.create`

This event is triggered when you upload a file on entry creation or through the media interface.

**Example payload**

```json
{
  "event": "media.create",
  "createdAt": "2020-01-10T10:58:41.115Z",
  "media": {
    "id": 1,
    "name": "image.png",
    "hash": "353fc98a19e44da9acf61d71b11895f9",
    "sha256": "huGUaFJhmcZRHLcxeQNKblh53vtSUXYaB16WSOe0Bdc",
    "ext": ".png",
    "mime": "image/png",
    "size": 228.19,
    "url": "/uploads/353fc98a19e44da9acf61d71b11895f9.png",
    "provider": "local",
    "provider_metadata": null,
    "createdAt": "2020-01-10T10:58:41.095Z",
    "updatedAt": "2020-01-10T10:58:41.095Z",
    "related": []
  }
}
```

### `media.update`

This event is triggered when you replace a media or update the metadata of a media through the media interface.

**Example payload**

```json
{
  "event": "media.update",
  "createdAt": "2020-01-10T10:58:41.115Z",
  "media": {
    "id": 1,
    "name": "image.png",
    "hash": "353fc98a19e44da9acf61d71b11895f9",
    "sha256": "huGUaFJhmcZRHLcxeQNKblh53vtSUXYaB16WSOe0Bdc",
    "ext": ".png",
    "mime": "image/png",
    "size": 228.19,
    "url": "/uploads/353fc98a19e44da9acf61d71b11895f9.png",
    "provider": "local",
    "provider_metadata": null,
    "createdAt": "2020-01-10T10:58:41.095Z",
    "updatedAt": "2020-01-10T10:58:41.095Z",
    "related": []
  }
}
```

### `media.delete`

This event is triggered only when you delete a media through the media interface.

**Example payload**

```json
{
  "event": "media.delete",
  "createdAt": "2020-01-10T11:02:46.232Z",
  "media": {
    "id": 11,
    "name": "photo.png",
    "hash": "43761478513a4c47a5fd4a03178cfccb",
    "sha256": "HrpDOKLFoSocilA6B0_icA9XXTSPR9heekt2SsHTZZE",
    "ext": ".png",
    "mime": "image/png",
    "size": 4947.76,
    "url": "/uploads/43761478513a4c47a5fd4a03178cfccb.png",
    "provider": "local",
    "provider_metadata": null,
    "createdAt": "2020-01-07T19:34:32.168Z",
    "updatedAt": "2020-01-07T19:34:32.168Z",
    "related": []
  }
}
```

### `review-workflows.updateEntryStage` 

This event is only available with the  edition of Strapi.<br />The event is triggered when content is moved to a new review stage (see [Review Workflows](/user-docs/settings/review-workflows)).

**Example payload**

```json
{
  "event": "review-workflows.updateEntryStage",
  "createdAt": "2023-06-26T15:46:35.664Z",
  "model": "model",
  "uid": "uid",
  "entity": {
    "id": 2
  },
  "workflow": {
    "id": 1,
    "stages": {
      "from": {
        "id": 1,
        "name": "Stage 1"
      },
      "to": {
        "id": 2,
        "name": "Stage 2"
      }
    }
  }
}
```

:::caution Payload format for Strapi v4.11.4+
The payload format for the `review-workflows.updateEntryStage` webhook changed between Strapi v4.11.3 and Strapi v4.11.4. Please notice the payload format differences in the following examples and update your integration code accordingly:

<details>
<summary>Payload formats for Strapi v4.11.3 vs. Strapi v4.11.4</summary>

In Strapi v4.11.3 the webhook payload has the following structure:

```json
{
  "event": "review-workflows.updateEntryStage",
  "createdAt": "2023-06-30T11:40:00.658Z",
  "model": "model",
  "uid": "uid",
  "entry": {
    "entityId": 2,
    "workflow": {
      "id": 1,
      "stages": {
        "from": 1,
        "to": 2
      }
    }
  }
}
```

In Strapi v4.11.4 the webhook payload has the following structure:

```json
{
  "event": "review-workflows.updateEntryStage",
  "createdAt": "2023-06-26T15:46:35.664Z",
  "model": "model",
  "uid": "uid",
  "entity": {
    "id": 2
  },
  "workflow": {
    "id": 1,
    "stages": {
      "from": {
        "id": 1,
        "name": "Stage 1"
      },
      "to": {
        "id": 2,
        "name": "Stage 2"
      }
    }
  }
}
```

</details>
:::

### `releases.publish` 

The event is triggered when a [release](/user-docs/releases/introduction) is published.

**Example payload**

```json

{
  "event": "releases.publish",
  "createdAt": "2024-02-21T16:45:36.877Z",
  "isPublished": true,
  "release": {
    "id": 2,
    "name": "Fall Winter highlights",
    "releasedAt": "2024-02-21T16:45:36.873Z",
    "scheduledAt": null,
    "timezone": null,
    "createdAt": "2024-02-21T15:16:22.555Z",
    "updatedAt": "2024-02-21T16:45:36.875Z",
    "actions": {
      "count": 1
    }
  }
}



# Command Line Interface
Source: https://docs-v4.strapi.io/dev-docs/cli

# Command Line Interface (CLI)

Strapi comes with a full featured Command Line Interface (CLI) which lets you scaffold and manage your project in seconds. The CLI works with both the `yarn` and `npm` package managers.

:::caution
Interactive commands such as `strapi admin:create-user` don't display prompts with `npm`. A fix for the `npm` package manager is anticipated by March 2023. In the meantime, consider using the `yarn` package manager.
:::

:::note
It is recommended to install Strapi locally only, which requires prefixing all of the following `strapi` commands with the package manager used for the project setup (e.g `npm run strapi help` or `yarn strapi help`) or a dedicated node package executor (e.g. `npx strapi help`).

To pass options with `npm` use the syntax: `npm run strapi <command> -- --<option>`.

To pass options with `yarn` use the syntax: `yarn run strapi <command> --<option>`
:::

## strapi new

Create a new project.

```bash
strapi new <name>

options: [--no-run|--use-npm|--debug|--quickstart|--dbclient=<dbclient> --dbhost=<dbhost> --dbport=<dbport> --dbname=<dbname> --dbusername=<dbusername> --dbpassword=<dbpassword> --dbssl=<dbssl> --dbauth=<dbauth> --dbforce]
```

- **strapi new &#60;name&#62;**<br/>
  Generates a new project called **&#60;name&#62;** and installs the default plugins through the npm registry.

- **strapi new &#60;name&#62; --debug**<br/>
  Will display the full error message if one is fired during the database connection.

- **strapi new &#60;name&#62; --quickstart**<br/>
  Use the quickstart system to create your app.

- **strapi new &#60;name&#62; --quickstart --no-run**<br/>
  Use the quickstart system to create your app, and do not start the application after creation.

- **strapi new &#60;name&#62; --dbclient=&#60;dbclient&#62; --dbhost=&#60;dbhost&#62; --dbport=&#60;dbport&#62; --dbname=&#60;dbname&#62; --dbusername=&#60;dbusername&#62; --dbpassword=&#60;dbpassword&#62; --dbssl=&#60;dbssl&#62; --dbauth=&#60;dbauth&#62; --dbforce**<br/>

  Generates a new project called **&#60;name&#62;** and skip the interactive database configuration and initialize with these options.

  - **&#60;dbclient&#62;** can be `postgres`, `mysql`.
  - **--dbforce** Allows you to overwrite content if the provided database is not empty. Only available for `postgres`, `mysql`, and is optional.

## strapi develop

**Alias**: `dev`

Start a Strapi application with autoReload enabled.

Strapi modifies/creates files at runtime and needs to restart when new files are created. To achieve this, `strapi develop` adds a file watcher and restarts the application when necessary.

Strapi also adds middlewares to support HMR (Hot Module Replacement) for the administration panel. This allows you to customize the administration panel without having to restart the application or run a separate server. This is only added when you use the `--watch-admin` command.

```bash
strapi develop
```

| Option             | Type   | Description                                                                                                      | Default   |
| ------------------ | :----: | ---------------------------------------------------------------------------------------------------------------- | --------- |
| `--bundler`        | string | Specifies the bundler to use, either `webpack` or `vite`x                                                        | `webpack` |
| `-d, --debug`      | -      | Enable debugging mode with verbose logs                                                                          | false     |
| `--ignore-prompts` | -      | Ignore all prompts                                                                                               | false     |
| `--open`           | -      | Open the admin in your browser                                                                                   | true      |
| `--polling`        | -      | Watch for file changes in network directories                                                                    | false     |
| `--silent`         | -      | Don't log anything                                                                                               | false     |
| `--watch-admin`    | -      | Watch the admin panel for hot changes                                                                            | false     |
| `--no-build`       | -      | [DEPRECATED] Starts your application with the autoReload enabled and skip the administration panel build process | -         |
| `--browser`        | string | [DEPRECATED] Provide a browser name to use instead of the default one                                            | -         |

:::warning
You should never use this command to run a Strapi application in production.
:::

:::caution
Using the `vite` option as a bundler is considered experimental.
:::

## strapi start

Start a Strapi application with autoReload disabled.

This command is to run a Strapi application without restarts and file writes, primarily for use in production.
Certain features such as the Content-type Builder are disabled in the `strapi start` mode because they require application restarts. The `start` command can be prefaced with [environment variables](/dev-docs/configurations/environment.md#strapi-s-environment-variables) to customize the application start.

## strapi build

Builds your admin panel.

```bash
strapi build
```

| Option              | Type   | Description                                                         | Default   |
| ------------------- | :----: | ------------------------------------------------------------------- | --------- |
| `--bundler`         | string | Specifies the bundler you'd like to use, either `webpack` or `vite` | `webpack` |
| `-d, --debug`       | -      | Enable debugging mode with verbose logs                             | false     |
| `--minify`          | -      | Minify the output                                                   | true      |
| `--no-optimization` | -      | [DEPRECATED]: use minify instead                                    | -         |
| `--silent`          | -      | Don't log anything                                                  | false     |
| `--sourcemaps`      | -      | Produce sourcemaps                                                  | false     |
| `--stats`           | -      | Print build statistics to the console                               | false     |

:::caution
Using the `vite` option as a bundler is considered experimental.
:::

## strapi watch-admin

:::note
This has been deprecated, the admin panel is watched as part of the `develop` command.
:::

Starts the admin server. Strapi should already be running with `strapi develop`.

```sh
strapi watch-admin
options: [--browser <name>]
```

## strapi login

Logs in to Strapi Cloud (see [Cloud CLI](/cloud/cli/cloud-cli#strapi-login) documentation).

## strapi logout

Logs out of Strapi Cloud (see [Cloud CLI](/cloud/cli/cloud-cli#strapi-logout) documentation).

## strapi deploy

Deploys to Strapi Cloud (see [Cloud CLI](/cloud/cli/cloud-cli#strapi-deploy) documentation).

## strapi export

[Exports your project data](/dev-docs/data-management). The default settings create a `.tar` file, compressed using `gzip` and encrypted using `aes-128-ecb`.

```bash
strapi export
```

The exported file is automatically named using the format `export_YYYYMMDDHHMMSS` with the current date and timestamp. Alternately, you can specify the filename using the `-f` or `--file` flag. The following table provides all of the available options as command line flags:

| Option              |  Type  | Description                                                                                                                |
| ------------------- | :----: | -------------------------------------------------------------------------------------------------------------------------- |
| `‑‑no‑encrypt`      |   -    | Disables file encryption and disables the `key` option.                                                                    |
| `‑‑no‑compress`     |   -    | Disables file compression.                                                                                                 |
| `-k`, <br/>`--key`  | string | Passes the encryption key as part of the `export` command. <br/> The `--key` option can't be combined with `--no-encrypt`. |
| `-f`, <br/>`--file` | string | Specifies the export filename. Do not include a file extension.                                                            |
| `--exclude`         | string | Exclude data using comma-separated data types. The available types are: `content`, `files`, and `config`.                  |
| `--only`            | string | Include only these data. The available types are: `content`, `files`, and `config`.                                        |
| `-h`, <br/>`--help` |   -    | Displays help for the `strapi export` command.                                                                             |

**Examples**

```bash title="Examples of strapi export:"
# export your data with the default options and the filename myData, which results in a file named myData.tar.gz.enc.
strapi export -f myData

# export your data without encryption.
strapi export --no-encrypt
```

## strapi import

[Imports data](/dev-docs/data-management) into your project. The imported data must originate from another Strapi application. You must pass the `--file` option to specify the filename and location for the import action.

```bash
strapi import
```

| Option         | Type   | Description                                                               |
| -------------- | ------ | ------------------------------------------------------------------------- |
| `-k,` `--key`  | string | Provide the encryption key in the command instead of a subsequent prompt. |
| `-f`, `--file` | string | Path and filename with extension for the data to be imported.             |
| `-h`, `--help` | -      | Display the `strapi import` help commands.                                |

**Examples**

```bash title="Example of strapi import:"

# import your data with the default parameters and pass an encryption key:
strapi import -f your-filepath-and-filename --key my-key
```

## strapi transfer

[Transfers data](/dev-docs/data-management/transfer) between 2 Strapi instances. This command is primarily intended for use between a local instance and a remote instance or 2 remote instances. The `transfer` command requires a Transfer token, which is generated in the destination instance Admin panel. See the [User Guide](/user-docs/settings/transfer-tokens) for detailed documentation on creating Transfer tokens.

:::caution
The destination Strapi instance should be running with the `start` command and not the `develop` command.
:::

| Option                       | Description                                                                                                                                       |
| ---------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------- |
| `--to [destinationURL]`      | Full URL of the `/admin` endpoint on the destination Strapi instance<br />(e.g. `--to https://my-beautiful-strapi-website/admin`)                 |
| `--to-token [transferToken]` | Transfer token for the remote Strapi destination                                                                                                  |
| `--from [sourceURL]`         | Full URL of the `/admin` endpoint of the remote Strapi instance to pull data from<br />(e.g., `--from https://my-beautiful-strapi-website/admin`) |
| `‑‑from‑token`               | Transfer token from the Strapi source instance.                                                                                                   |
| `--force`                    | Automatically answer "yes" to all prompts, including potentially destructive requests, and run non-interactively.                                 |
| `--exclude`                  | Exclude data using comma-separated data types. The available types are: `content`, `files`, and `config`.                                         |
| `--only`                     | Include only these data. The available types are: `content`, `files`, and `config`.                                                               |
| `-h`, `--help`               | Displays the commands for `strapi transfer`.                                                                                                      |

:::caution
Either `--to` or `--from` is required, but it's not currently allowed to enter both or neither.
:::

**Example**

```bash
strapi transfer --to http://example.com/admin --to-token my-transfer-token
```

## strapi report

Prints out debug information useful for debugging and required when reporting an issue.

| Option                 | Description                   |
| ---------------------- | ----------------------------- |
| `-u`, `--uuid`         | Includes the project UUID     |
| `-d`, `--dependencies` | Includes project dependencies |
| `--all`                | Logs all the data             |

**Examples**

To include the project UUID and dependencies in the output:

```bash
strapi report --uuid --dependencies
```

To log everything, use the `--all` option:

```bash
strapi report --all
```

## strapi configuration:dump

**Alias**: `config:dump`

Dumps configurations to a file or stdout to help you migrate to production.

The dump format will be a JSON array.

```bash title="strapi configuration:dump"

Options:
  -f, --file <file>  Output file, default output is stdout
  -p, --pretty       Format the output JSON with indentation and line breaks (default: false)
```

**Examples**

- `strapi configuration:dump -f dump.json`
- `strapi config:dump --file dump.json`
- `strapi config:dump > dump.json`

All these examples are equivalent.

:::caution
When configuring your application you often enter credentials for third party services (e.g authentication providers). Be aware that those credentials will also be dumped into the output of this command.
In case of doubt, you should avoid committing the dump file into a versioning system. Here are some methods you can explore:

- Copy the file directly to the environment you want and run the restore command there.
- Put the file in a secure location and download it at deploy time with the right credentials.
- Encrypt the file before committing and decrypt it when running the restore command.

:::

## strapi configuration:restore

**Alias**: `config:restore`

Restores a configuration dump into your application.

The input format must be a JSON array.

```bash
strapi configuration:restore

Options:
  -f, --file <file>          Input file, default input is stdin
  -s, --strategy <strategy>  Strategy name, one of: "replace", "merge", "keep". Defaults to: "replace"
```

**Examples**

- `strapi configuration:restore -f dump.json`
- `strapi config:restore --file dump.json -s replace`
- `cat dump.json | strapi config:restore`
- `strapi config:restore < dump.json`

All these examples are equivalent.

**Strategies**

When running the restore command, you can choose from three different strategies:

- **replace**: Will create missing keys and replace existing ones.
- **merge**: Will create missing keys and merge existing keys with their new value.
- **keep**: Will create missing keys and keep existing keys as is.

## strapi admin:create-user

**Alias** `admin:create`

Creates an administrator.
Administrator's first name, last name, email, and password can be:

- passed as options
- or set interactively if you call the command without passing any option.

**Example**

```bash

strapi admin:create-user --firstname=Kai --lastname=Doe --email=chef@strapi.io --password=Gourmet1234
```

**Options**

| Option          | Type   | Description                        | Required |
| --------------- | ------ | ---------------------------------- | -------- |
| -f, --firstname | string | The administrator's first name     | Yes      |
| -l, --lastname  | string | The administrator's last name      | No       |
| -e, --email     | string | The administrator's email          | Yes      |
| -p, --password  | string | New password for the administrator | No       |
| -h, --help      |        | display help for command           |          |

## strapi admin:reset-user-password

**Alias** `admin:reset-password`

Reset an admin user's password.
You can pass the email and new password as options or set them interactively if you call the command without passing the options.

**Example**

```bash

strapi admin:reset-user-password --email=chef@strapi.io --password=Gourmet1234
```

**Options**

| Option         | Type   | Description               |
| -------------- | ------ | ------------------------- |
| -e, --email    | string | The user email            |
| -p, --password | string | New password for the user |
| -h, --help     |        | display help for command  |

## strapi generate

Run a fully interactive CLI to generate APIs, [controllers](/dev-docs/backend-customization/controllers.md), [content-types](/dev-docs/backend-customization/models.md), [plugins](/dev-docs/plugins-development.md#create-a-plugin), [policies](/dev-docs/backend-customization/policies.md), [middlewares](/dev-docs/backend-customization/middlewares.md) and [services](/dev-docs/backend-customization/services.md), and [migrations](/dev-docs/database-migrations).

```bash
strapi generate
```

## strapi templates:generate

Create a template from the current Strapi project.

```bash
strapi templates:generate <path>
```

- **strapi templates:generate &#60;path&#62;**<br/>
  Generates a Strapi template at `<path>`

  Example: `strapi templates:generate ../strapi-template-name` will copy the required files and folders to a `template` directory inside `../strapi-template-name`

## strapi ts:generate-types

Generate [TypeScript](/dev-docs/typescript.md) typings for the project schemas.

```bash
strapi ts:generate-types
```

- **strapi ts:generate-types --debug**<br />
  [DEPRECATED] **strapi ts:generate-types --verbose**<br/>
  Generate typings with the debug mode enabled, displaying a detailed table of the generated schemas.
- **strapi ts:generate-types --silent** or **strapi ts:generate-types -s**<br/>
  Generate typings with the silent mode enabled, completely removing all the logs in the terminal. Cannot be combined with `verbose` or `debug`
- **strapi ts:generate-types --out-dir &#60;path&#62;** or **strapi ts:generate-types -o &#60;path&#62;**<br/>
  Generate typings specifying the output directory in which the file will be created.

:::caution
Strapi requires the project types to be generated in the `types` directory for them to work. The `--out-dir` option should not be used for most cases. However, it can be useful for cases such as generating a second copy to compare the difference between your existing and updated types after changing your content structure.
:::

## strapi routes:list

Display a list of all the available [routes](/dev-docs/backend-customization/routes.md).

```bash
strapi routes:list
```

## strapi policies:list

Display a list of all the registered [policies](/dev-docs/backend-customization/policies.md).

```bash
strapi policies:list
```

## strapi middlewares:list

Display a list of all the registered [middlewares](/dev-docs/backend-customization/middlewares.md).

```bash
strapi middlewares:list
```

## strapi content-types:list

Display a list of all the existing [content-types](/dev-docs/backend-customization/models.md).

```bash
strapi content-types:list
```

## strapi hooks:list

Display a list of all the available hooks.

```bash
strapi hooks:list
```

## strapi controllers:list

Display a list of all the registered [controllers](/dev-docs/backend-customization/controllers.md).

```bash
strapi controllers:list
```

## strapi services:list

Display a list of all the registered [services](/dev-docs/backend-customization/services.md).

```bash
strapi services:list
```

## strapi install

Install a plugin in the project.

```console
strapi install <name>
```

- **strapi install &#60;name&#62;**<br/>
  Installs a plugin called **&#60;name&#62;**.

  Example: `strapi install graphql` will install the plugin `@strapi/plugin-graphql`

:::caution
Some plugins have admin panel integrations, your admin panel might have to be rebuilt. This can take some time.
:::

## strapi uninstall

Uninstall a plugin from the project.

```bash
strapi uninstall <name>

options [--delete-files]
```

- **strapi uninstall &#60;name&#62;**<br/>
  Uninstalls a plugin called **&#60;name&#62;**.

  Example: `strapi uninstall graphql` will remove the plugin `@strapi/plugin-graphql`

- **strapi uninstall &#60;name&#62; --delete-files**<br/>
  Uninstalls a plugin called **&#60;name&#62;** and removes the files in `./extensions/name/`

  Example: `strapi uninstall graphql --delete-files` will remove the plugin `@strapi/plugin-graphql` and all the files in `./extensions/graphql`

:::caution

- In addition to the `uninstall` command you need to remove the plugin configuration from `./config/plugins.js`.
- Some plugins have admin panel integrations, your admin panel might have to be rebuilt. This can take some time.
:::

## strapi telemetry:disable

Disable data collection for the project (see [Usage Information](/dev-docs/usage-information.md)).

```bash
strapi telemetry:disable
```

## strapi telemetry:enable

Re-enable data collection for the project after it was disabled (see [Usage Information](/dev-docs/usage-information.md)).

```bash
strapi telemetry:enable
```

## strapi console

Start the server and eval commands in your application in real time.

```bash
strapi console
```

## strapi version

Print the current globally installed Strapi version.

```bash
strapi version
```

## strapi help

List CLI commands.

```bash
strapi help
```



# Configurations
Source: https://docs-v4.strapi.io/dev-docs/configurations

const imgStyle = {width: '100%', margin: '0'}
const captionStyle = {fontSize: '12px'}

# Configuration

The configuration of a Strapi project lives in the `/config` folder:

<em style={captionStyle}>The block above is an excerpt from the project structure. You can click on any file name to read the corresponding documentation. Visit the <a href="/dev-docs/project-structure">project structure page</a> for the full version.</em>

## Base configurations

From the `/config` folder, you can find and define the following base configurations:

| Configuration topic | File path | Required or optional |
|-----|----|----|
| [Database](/dev-docs/configurations/database) | `config/database` | Required |
| [Server](/dev-docs/configurations/server) | `config/server` | Required
| [Admin panel](/dev-docs/configurations/admin-panel) | `config/admin` | Required |
| [Middlewares](/dev-docs/configurations/middlewares) | `config/middlewares` | Required |
| [API calls](/dev-docs/configurations/api) | `config/api` | Optional, used to define some general settings for responses and other REST-related parameters. |

## Additional configuration for specific features

Some specific features require additional configuration:

| Feature | Location | Required or optional |
|---------|------|------|
| [Plugins](/dev-docs/configurations/plugins) | In the `config/plugins` file | <ul><li>Optional if using only built-in plugins with default presets.</li><li>Required to enable, configure, or disable plugins.</li></ul>Can also be used to configure the Upload plugin (which handles the Media Library feature) and GraphQL. |
| [TypeScript](/dev-docs/configurations/typescript) | <ul><li>In `tsconfig.json` for general [TypeScript-related configuration](/dev-docs/configurations/typescript#project-structure-and-typescript-specific-configuration-files)</li><li>In the `config/typescript` file for [dedicated TypeScript features](/dev-docs/configurations/typescript#strapi-specific-configuration-for-typescript) specific to Strapi</li></ul> | Required to use TypeScript efficiently |
| [API tokens](/dev-docs/configurations/api-tokens) | In the `config/admin` file | Required if using API tokens for authentication instead of the [Users & Permissions plugin](/dev-docs/plugins/users-permissions) |
| [Lifecycle functions](/dev-docs/configurations/functions) | In the `/src/index` file | Optionally used to perform various actions that happen during the server lifecycle. Includes the `register`, `bootstrap`, and `destroy` functions. |
| [Cron jobs](/dev-docs/configurations/cron) | <ul><li>In the `/config/server` file to enable the feature</li><li>In a dedicated, optional `cron-tasks` file that can be used to declare the jobs</li></ul> | Required to setup CRON jobs for the server. |
| [Environment variables](/dev-docs/configurations/environment) | In dedicated files and folders for the environment (e.g., `config/env/production/server`) | Optionally used to define different environments and their variables. |
| [Single Sign-On (SSO)](/dev-docs/configurations/sso)  | In the `config/admin` file | Required to use the Entreprise-only SSO feature if enabled on your project. |
| [Feature flags](/dev-docs/configurations/features) | In the `config/features` file | Optional for a typical, stable Strapi application.<br/>Only required to enable [future flags](/dev-docs/configurations/features).|

## Guides

The following guides will help you address specific use cases related to the Strapi configuration:



# Configurations
Source: https://docs-v4.strapi.io/dev-docs/configurations

const imgStyle = {width: '100%', margin: '0'}
const captionStyle = {fontSize: '12px'}

# Configuration

The configuration of a Strapi project lives in the `/config` folder:

<em style={captionStyle}>The block above is an excerpt from the project structure. You can click on any file name to read the corresponding documentation. Visit the <a href="/dev-docs/project-structure">project structure page</a> for the full version.</em>

## Base configurations

From the `/config` folder, you can find and define the following base configurations:

| Configuration topic | File path | Required or optional |
|-----|----|----|
| [Database](/dev-docs/configurations/database) | `config/database` | Required |
| [Server](/dev-docs/configurations/server) | `config/server` | Required
| [Admin panel](/dev-docs/configurations/admin-panel) | `config/admin` | Required |
| [Middlewares](/dev-docs/configurations/middlewares) | `config/middlewares` | Required |
| [API calls](/dev-docs/configurations/api) | `config/api` | Optional, used to define some general settings for responses and other REST-related parameters. |

## Additional configuration for specific features

Some specific features require additional configuration:

| Feature | Location | Required or optional |
|---------|------|------|
| [Plugins](/dev-docs/configurations/plugins) | In the `config/plugins` file | <ul><li>Optional if using only built-in plugins with default presets.</li><li>Required to enable, configure, or disable plugins.</li></ul>Can also be used to configure the Upload plugin (which handles the Media Library feature) and GraphQL. |
| [TypeScript](/dev-docs/configurations/typescript) | <ul><li>In `tsconfig.json` for general [TypeScript-related configuration](/dev-docs/configurations/typescript#project-structure-and-typescript-specific-configuration-files)</li><li>In the `config/typescript` file for [dedicated TypeScript features](/dev-docs/configurations/typescript#strapi-specific-configuration-for-typescript) specific to Strapi</li></ul> | Required to use TypeScript efficiently |
| [API tokens](/dev-docs/configurations/api-tokens) | In the `config/admin` file | Required if using API tokens for authentication instead of the [Users & Permissions plugin](/dev-docs/plugins/users-permissions) |
| [Lifecycle functions](/dev-docs/configurations/functions) | In the `/src/index` file | Optionally used to perform various actions that happen during the server lifecycle. Includes the `register`, `bootstrap`, and `destroy` functions. |
| [Cron jobs](/dev-docs/configurations/cron) | <ul><li>In the `/config/server` file to enable the feature</li><li>In a dedicated, optional `cron-tasks` file that can be used to declare the jobs</li></ul> | Required to setup CRON jobs for the server. |
| [Environment variables](/dev-docs/configurations/environment) | In dedicated files and folders for the environment (e.g., `config/env/production/server`) | Optionally used to define different environments and their variables. |
| [Single Sign-On (SSO)](/dev-docs/configurations/sso)  | In the `config/admin` file | Required to use the Entreprise-only SSO feature if enabled on your project. |
| [Feature flags](/dev-docs/configurations/features) | In the `config/features` file | Optional for a typical, stable Strapi application.<br/>Only required to enable [future flags](/dev-docs/configurations/features).|

## Guides

The following guides will help you address specific use cases related to the Strapi configuration:



# Admin panel
Source: https://docs-v4.strapi.io/dev-docs/configurations/admin-panel

# Admin panel configuration

The `./config/admin.js` is used to define admin panel configuration for the Strapi application.

## Available options

The `./config/admin.js` file can include the following parameters:

| Parameter                         | Description                                                                                                                                                                                        | Type          | Default                                                                                                                             |
|-----------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|---------------|-------------------------------------------------------------------------------------------------------------------------------------|
| `apiToken.salt`                   | Salt used to generate [API tokens](/dev-docs/configurations/api-tokens)                                                                                                                            | string        | Random string                                                                                                                       |
| `auditLogs.enabled`               | Enable or disable the [Audit Logs](/user-docs/settings/audit-logs) feature                                                                                                                         | boolean       | `true`                                                                                                                              |
| `auditLogs.retentionDays`         | How long [Audit Logs](/user-docs/settings/audit-logs) are kept, in days.<br /><br />_The behavior differs for self-hosted vs. Strapi Cloud customers, see the note under the table._               | integer       | 90                                                                                                                                  |
| `auth`                            | Authentication configuration                                                                                                                                                                       | object        | -                                                                                                                                   |
| `auth.secret`                     | Secret used to encode JWT tokens                                                                                                                                                                   | string        | `undefined`                                                                                                                         |
| `auth.domain`                     | Domain used within the cookie for SSO authentication (Enterprise only)                                                                                                                             | string        | `undefined`                                                                                                                         |
| `auth.providers`                  | List of authentication providers used for SSO (Enterprise only, see [SSO](/dev-docs/configurations/sso))                                                                                           | array(object) | -                                                                                                                                   |
| `auth.options`                    | Options object passed to [jsonwebtoken](https://www.npmjs.com/package/jsonwebtoken)                                                                                                                | object        | -                                                                                                                                   |
| `auth.options.expiresIn`          | JWT expire time used in [jsonwebtoken](https://www.npmjs.com/package/jsonwebtoken)                                                                                                                 | object        | `30d`                                                                                                                               |
| `auth.events`                     | Record of all the events subscribers registered for the authentication                                                                                                                             | object        | `{}`                                                                                                                                |
| `auth.events.onConnectionSuccess` | Function called when an admin user log in successfully to the administration panel                                                                                                                 | function      | `undefined`                                                                                                                         |
| `auth.events.onConnectionError`   | Function called when an admin user fails to log in to the administration panel                                                                                                                     | function      | `undefined`                                                                                                                         |
| `url`                             | Url of your admin panel. Default value: `/admin`. Note: If the url is relative, it will be concatenated with `url`.                                                                                | string        | `/admin`                                                                                                                            |
| `autoOpen`                        | Enable or disable administration opening on start.                                                                                                                                                 | boolean       | `true`                                                                                                                              |
| `watchIgnoreFiles`                | Add custom files that should not be watched during development. See more [here](https://github.com/paulmillr/chokidar#path-filtering) (property `ignored`).                                        | array(string) | `[]`                                                                                                                                |
| `host`                            | Use a different host for the admin panel. Only used along with `strapi develop --watch-admin`                                                                                                      | string        | `localhost`                                                                                                                         |
| `port`                            | Use a different port for the admin panel. Only used along with `strapi develop --watch-admin`                                                                                                      | string        | `8000`                                                                                                                              |
| `serveAdminPanel`                 | If false, the admin panel won't be served. Note: the `index.html` will still be served, see [defaultIndex option](/dev-docs/configurations/middlewares)                                            | boolean       | `true`                                                                                                                              |
| `flags`                           | Settings to turn certain features or elements of the admin on or off                                                                                                                               | object        | {}                                                                                                                                  |
| `flags.nps`                       | Enable/Disable the Net Promoter Score popup                                                                                                                                                        | boolean       | `true`                                                                                                                              |
| `flags.promoteEE`                 | Enable/Disable the promotion of Strapi Enterprise features                                                                                                                                         | boolean       | `true`                                                                                                                              |
| `forgotPassword`                  | Settings to customize the forgot password email (see [Forgot Password Email](/dev-docs/plugins/users-permissions#reset-password))                                                        | object        | {}                                                                                                                                  |
| `forgotPassword.emailTemplate`    | Email template as defined in [email plugin](/dev-docs/plugins/email#using-the-sendtemplatedemail-function)                                                                                         | object        | [Default template](https://github.com/strapi/strapi/blob/main/packages/core/admin/server/config/email-templates/forgot-password.js) |
| `forgotPassword.from`             | Sender mail address                                                                                                                                                                                | string        | Default value defined in <br />your [provider configuration](/dev-docs/providers#configuring-providers)                             |
| `forgotPassword.replyTo`          | Default address or addresses the receiver is asked to reply to                                                                                                                                     | string        | Default value defined in <br />your [provider configuration](/dev-docs/providers#configuring-providers)                             |
| `rateLimit`                       | Settings to customize the rate limiting of the admin panel's authentication endpoints, additional configuration options come from [`koa2-ratelimit`](https://www.npmjs.com/package/koa2-ratelimit) | object        | {}                                                                                                                                  |
| `rateLimit.enabled`               | Enable or disable the rate limiter                                                                                                                                                                 | boolean       | `true`                                                                                                                              |
| `rateLimit.interval`              | Time window for requests to be considered as part of the same rate limiting bucket                                                                                                                 | object        | `{ min: 5 }`                                                                                                                        |
| `rateLimit.max`                   | Maximum number of requests allowed in the time window                                                                                                                                              | integer       | `5`                                                                                                                                 |
| `rateLimit.delayAfter`            | Number of requests allowed before delaying responses                                                                                                                                               | integer       | `1`                                                                                                                                 |
| `rateLimit.timeWait`              | Time to wait before responding to a request (in milliseconds)                                                                                                                                      | integer       | `3000`                                                                                                                              |
| `rateLimit.prefixKey`             | Prefix for the rate limiting key                                                                                                                                                                   | string        | `${userEmail}:${ctx.request.path}:${ctx.request.ip}`                                                                                |
| `rateLimit.whitelist`             | Array of IP addresses to whitelist from rate limiting                                                                                                                                              | array(string) | `[]`                                                                                                                                |
| `rateLimit.store`                 | Rate limiting storage location (Memory, Sequelize,  or Redis) and for more information please see the [`koa2-ratelimit documentation`](https://www.npmjs.com/package/koa2-ratelimit)               | object        | `MemoryStore`                                                                                                                       |
| `transfer.token.salt`             | Salt used to generate [Transfer tokens](/dev-docs/data-management/transfer#generate-a-transfer-token).<br/>If no transfer token salt is defined, transfer features will be disabled.               | string        | Random string                                                                                                                       |

:::note Retention days for self-hosted vs. Strapi Cloud users
For Strapi Cloud customers, the `auditLogs.retentionDays` value stored in the license information is used, unless a _smaller_ `retentionDays` value is defined in the `config/admin.js|ts` configuration file.
:::

## Configurations

The `./config/admin.js` file should at least include a minimal configuration with required parameters for authentication and [API tokens](/dev-docs/configurations/api-tokens.md). Additional parameters can be included for a full configuration.

:::note
[Environmental configurations](/dev-docs/configurations/environment.md) (i.e. using the `env()` helper) do not need to contain all the values so long as they exist in the default `./config/server.js`.
:::

</Tabs>
</TabItem>

</Tabs>
</TabItem>
</Tabs>



# Admin panel
Source: https://docs-v4.strapi.io/dev-docs/configurations/admin-panel

# Admin panel configuration

The `./config/admin.js` is used to define admin panel configuration for the Strapi application.

## Available options

The `./config/admin.js` file can include the following parameters:

| Parameter                         | Description                                                                                                                                                                                        | Type          | Default                                                                                                                             |
|-----------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|---------------|-------------------------------------------------------------------------------------------------------------------------------------|
| `apiToken.salt`                   | Salt used to generate [API tokens](/dev-docs/configurations/api-tokens)                                                                                                                            | string        | Random string                                                                                                                       |
| `auditLogs.enabled`               | Enable or disable the [Audit Logs](/user-docs/settings/audit-logs) feature                                                                                                                         | boolean       | `true`                                                                                                                              |
| `auditLogs.retentionDays`         | How long [Audit Logs](/user-docs/settings/audit-logs) are kept, in days.<br /><br />_The behavior differs for self-hosted vs. Strapi Cloud customers, see the note under the table._               | integer       | 90                                                                                                                                  |
| `auth`                            | Authentication configuration                                                                                                                                                                       | object        | -                                                                                                                                   |
| `auth.secret`                     | Secret used to encode JWT tokens                                                                                                                                                                   | string        | `undefined`                                                                                                                         |
| `auth.domain`                     | Domain used within the cookie for SSO authentication (Enterprise only)                                                                                                                             | string        | `undefined`                                                                                                                         |
| `auth.providers`                  | List of authentication providers used for SSO (Enterprise only, see [SSO](/dev-docs/configurations/sso))                                                                                           | array(object) | -                                                                                                                                   |
| `auth.options`                    | Options object passed to [jsonwebtoken](https://www.npmjs.com/package/jsonwebtoken)                                                                                                                | object        | -                                                                                                                                   |
| `auth.options.expiresIn`          | JWT expire time used in [jsonwebtoken](https://www.npmjs.com/package/jsonwebtoken)                                                                                                                 | object        | `30d`                                                                                                                               |
| `auth.events`                     | Record of all the events subscribers registered for the authentication                                                                                                                             | object        | `{}`                                                                                                                                |
| `auth.events.onConnectionSuccess` | Function called when an admin user log in successfully to the administration panel                                                                                                                 | function      | `undefined`                                                                                                                         |
| `auth.events.onConnectionError`   | Function called when an admin user fails to log in to the administration panel                                                                                                                     | function      | `undefined`                                                                                                                         |
| `url`                             | Url of your admin panel. Default value: `/admin`. Note: If the url is relative, it will be concatenated with `url`.                                                                                | string        | `/admin`                                                                                                                            |
| `autoOpen`                        | Enable or disable administration opening on start.                                                                                                                                                 | boolean       | `true`                                                                                                                              |
| `watchIgnoreFiles`                | Add custom files that should not be watched during development. See more [here](https://github.com/paulmillr/chokidar#path-filtering) (property `ignored`).                                        | array(string) | `[]`                                                                                                                                |
| `host`                            | Use a different host for the admin panel. Only used along with `strapi develop --watch-admin`                                                                                                      | string        | `localhost`                                                                                                                         |
| `port`                            | Use a different port for the admin panel. Only used along with `strapi develop --watch-admin`                                                                                                      | string        | `8000`                                                                                                                              |
| `serveAdminPanel`                 | If false, the admin panel won't be served. Note: the `index.html` will still be served, see [defaultIndex option](/dev-docs/configurations/middlewares)                                            | boolean       | `true`                                                                                                                              |
| `flags`                           | Settings to turn certain features or elements of the admin on or off                                                                                                                               | object        | {}                                                                                                                                  |
| `flags.nps`                       | Enable/Disable the Net Promoter Score popup                                                                                                                                                        | boolean       | `true`                                                                                                                              |
| `flags.promoteEE`                 | Enable/Disable the promotion of Strapi Enterprise features                                                                                                                                         | boolean       | `true`                                                                                                                              |
| `forgotPassword`                  | Settings to customize the forgot password email (see [Forgot Password Email](/dev-docs/plugins/users-permissions#reset-password))                                                        | object        | {}                                                                                                                                  |
| `forgotPassword.emailTemplate`    | Email template as defined in [email plugin](/dev-docs/plugins/email#using-the-sendtemplatedemail-function)                                                                                         | object        | [Default template](https://github.com/strapi/strapi/blob/main/packages/core/admin/server/config/email-templates/forgot-password.js) |
| `forgotPassword.from`             | Sender mail address                                                                                                                                                                                | string        | Default value defined in <br />your [provider configuration](/dev-docs/providers#configuring-providers)                             |
| `forgotPassword.replyTo`          | Default address or addresses the receiver is asked to reply to                                                                                                                                     | string        | Default value defined in <br />your [provider configuration](/dev-docs/providers#configuring-providers)                             |
| `rateLimit`                       | Settings to customize the rate limiting of the admin panel's authentication endpoints, additional configuration options come from [`koa2-ratelimit`](https://www.npmjs.com/package/koa2-ratelimit) | object        | {}                                                                                                                                  |
| `rateLimit.enabled`               | Enable or disable the rate limiter                                                                                                                                                                 | boolean       | `true`                                                                                                                              |
| `rateLimit.interval`              | Time window for requests to be considered as part of the same rate limiting bucket                                                                                                                 | object        | `{ min: 5 }`                                                                                                                        |
| `rateLimit.max`                   | Maximum number of requests allowed in the time window                                                                                                                                              | integer       | `5`                                                                                                                                 |
| `rateLimit.delayAfter`            | Number of requests allowed before delaying responses                                                                                                                                               | integer       | `1`                                                                                                                                 |
| `rateLimit.timeWait`              | Time to wait before responding to a request (in milliseconds)                                                                                                                                      | integer       | `3000`                                                                                                                              |
| `rateLimit.prefixKey`             | Prefix for the rate limiting key                                                                                                                                                                   | string        | `${userEmail}:${ctx.request.path}:${ctx.request.ip}`                                                                                |
| `rateLimit.whitelist`             | Array of IP addresses to whitelist from rate limiting                                                                                                                                              | array(string) | `[]`                                                                                                                                |
| `rateLimit.store`                 | Rate limiting storage location (Memory, Sequelize,  or Redis) and for more information please see the [`koa2-ratelimit documentation`](https://www.npmjs.com/package/koa2-ratelimit)               | object        | `MemoryStore`                                                                                                                       |
| `transfer.token.salt`             | Salt used to generate [Transfer tokens](/dev-docs/data-management/transfer#generate-a-transfer-token).<br/>If no transfer token salt is defined, transfer features will be disabled.               | string        | Random string                                                                                                                       |

:::note Retention days for self-hosted vs. Strapi Cloud users
For Strapi Cloud customers, the `auditLogs.retentionDays` value stored in the license information is used, unless a _smaller_ `retentionDays` value is defined in the `config/admin.js|ts` configuration file.
:::

## Configurations

The `./config/admin.js` file should at least include a minimal configuration with required parameters for authentication and [API tokens](/dev-docs/configurations/api-tokens.md). Additional parameters can be included for a full configuration.

:::note
[Environmental configurations](/dev-docs/configurations/environment.md) (i.e. using the `env()` helper) do not need to contain all the values so long as they exist in the default `./config/server.js`.
:::

</Tabs>
</TabItem>

</Tabs>
</TabItem>
</Tabs>



# API calls configuration
Source: https://docs-v4.strapi.io/dev-docs/configurations/api

# API configuration

General settings for API calls can be set in the `./config/api.js` file:

| Property                      | Description                                                                                                                                                                                                                                          | Type         | Default |
| ----------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------ | ------- |
| `responses`                   | Global API response configuration                                                                                                                                                                                                                    | Object       | -       |
| `responses.privateAttributes` | Set of globally defined attributes to be treated as private.                                                                                                                                                                                         | String array | `[]`    |
| `rest`                        | REST API configuration                                                                                                                                                                                                                               | Object       | -       |
| `rest.prefix`                 | The API prefix                       | String      | `/api`   |
| `rest.defaultLimit`           | Default `limit` parameter used in API calls (see [REST API documentation](/dev-docs/api/rest/sort-pagination#pagination-by-offset))                                                                      | Integer      | `25`    |
| `rest.maxLimit`               | Maximum allowed number that can be requested as `limit` (see [REST API documentation](/dev-docs/api/rest/sort-pagination#pagination-by-offset)). | Integer      | `100`   |

:::note 
If the `rest.maxLimit` value is less than the `rest.defaultLimit` value, `maxLimit` will be the limit used.
:::

**Example:**

</Tabs>



# API calls configuration
Source: https://docs-v4.strapi.io/dev-docs/configurations/api

# API configuration

General settings for API calls can be set in the `./config/api.js` file:

| Property                      | Description                                                                                                                                                                                                                                          | Type         | Default |
| ----------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------ | ------- |
| `responses`                   | Global API response configuration                                                                                                                                                                                                                    | Object       | -       |
| `responses.privateAttributes` | Set of globally defined attributes to be treated as private.                                                                                                                                                                                         | String array | `[]`    |
| `rest`                        | REST API configuration                                                                                                                                                                                                                               | Object       | -       |
| `rest.prefix`                 | The API prefix                       | String      | `/api`   |
| `rest.defaultLimit`           | Default `limit` parameter used in API calls (see [REST API documentation](/dev-docs/api/rest/sort-pagination#pagination-by-offset))                                                                      | Integer      | `25`    |
| `rest.maxLimit`               | Maximum allowed number that can be requested as `limit` (see [REST API documentation](/dev-docs/api/rest/sort-pagination#pagination-by-offset)). | Integer      | `100`   |

:::note 
If the `rest.maxLimit` value is less than the `rest.defaultLimit` value, `maxLimit` will be the limit used.
:::

**Example:**

</Tabs>



# API tokens configuration
Source: https://docs-v4.strapi.io/dev-docs/configurations/api-tokens

# API tokens

Authentication strategies in Strapi can either be based on the use of the [Users & Permissions plugin](/user-docs/users-roles-permissions) or on the built-in API token feature.

Using API tokens allows executing a request on [REST API](/dev-docs/api/rest) or [GraphQL API](/dev-docs/api/graphql) endpoints as an authenticated user. 

API tokens can be helpful to give access to people or applications without managing a user account or changing anything in the Users & Permissions plugin.

## Creation

New API tokens are generated from the [admin panel](/user-docs/settings/API-tokens).

## Usage

When performing a request to Strapi's [REST API](/dev-docs/api/rest), the API token should be added to the request's `Authorization` header with the following syntax: `bearer your-api-token`.

:::note
Read-only API tokens can only access the `find` and `findOne` functions.
:::

## Configuration

New API tokens are generated using a salt. This salt is automatically generated by Strapi and stored in `.env` as `API_TOKEN_SALT`.

The salt can be customized:

- either by updating the string value for `apiToken.salt` in `./config/admin.js` (see [admin panel configuration documentation](/dev-docs/configurations/admin-panel))
- or by creating an `API_TOKEN_SALT` [environment variable](/dev-docs/configurations/environment#strapi-s-environment-variables) in the `.env` file of the project

:::caution
Changing the salt invalidates all the existing API tokens.
:::



# API tokens configuration
Source: https://docs-v4.strapi.io/dev-docs/configurations/api-tokens

# API tokens

Authentication strategies in Strapi can either be based on the use of the [Users & Permissions plugin](/user-docs/users-roles-permissions) or on the built-in API token feature.

Using API tokens allows executing a request on [REST API](/dev-docs/api/rest) or [GraphQL API](/dev-docs/api/graphql) endpoints as an authenticated user. 

API tokens can be helpful to give access to people or applications without managing a user account or changing anything in the Users & Permissions plugin.

## Creation

New API tokens are generated from the [admin panel](/user-docs/settings/API-tokens).

## Usage

When performing a request to Strapi's [REST API](/dev-docs/api/rest), the API token should be added to the request's `Authorization` header with the following syntax: `bearer your-api-token`.

:::note
Read-only API tokens can only access the `find` and `findOne` functions.
:::

## Configuration

New API tokens are generated using a salt. This salt is automatically generated by Strapi and stored in `.env` as `API_TOKEN_SALT`.

The salt can be customized:

- either by updating the string value for `apiToken.salt` in `./config/admin.js` (see [admin panel configuration documentation](/dev-docs/configurations/admin-panel))
- or by creating an `API_TOKEN_SALT` [environment variable](/dev-docs/configurations/environment#strapi-s-environment-variables) in the `.env` file of the project

:::caution
Changing the salt invalidates all the existing API tokens.
:::



# CRON jobs
Source: https://docs-v4.strapi.io/dev-docs/configurations/cron

# Cron jobs

<!--TODO fix the link in the prereq-->

:::prerequisites
The `cron.enabled` configuration option should be set to `true` in the `./config/server.js` (or `./config/server.ts` for TypeScript projects) [file](/dev-docs/configurations/server).
:::

`cron` allows scheduling arbitrary functions for execution at specific dates, with optional recurrence rules. These functions are named cron jobs. `cron` only uses a single timer at any given time, rather than reevaluating upcoming jobs every second/minute.

This feature is powered by the [`node-schedule`](https://www.npmjs.com/package/node-schedule) package.

The `cron` format consists of:

```

*    *    *    *    *    *
┬    ┬    ┬    ┬    ┬    ┬
│    │    │    │    │    |
│    │    │    │    │    └ day of week (0 - 7) (0 or 7 is Sun)
│    │    │    │    └───── month (1 - 12)
│    │    │    └────────── day of month (1 - 31)
│    │    └─────────────── hour (0 - 23)
│    └──────────────────── minute (0 - 59)
└───────────────────────── second (0 - 59, OPTIONAL)

```

To define cron jobs and have them run at the required times:

1. [Create](#creating-a-cron-job) the appropriate file.
2. [Enable](#enabling-cron-jobs) the cron jobs in the server configuration file.

:::tip
Optionally, cron jobs can be directly created in the `cron.tasks` key of the [server configuration file](/dev-docs/configurations/server).
:::

## Creating a cron job

A cron job can be created using the [object format](#using-the-object-format) or [key format](#using-the-key-format).

### Using the object format

To define a cron job with the object format, create a file with the following structure:

</Tabs>

<details>
<summary>Advanced example #1: Timezones</summary>

The following cron job runs on a specific timezone:

</Tabs>

</details>

<details>
<summary>Advanced example #2: One-off cron jobs</summary>
The following cron job is run only once at a given time:

</Tabs>

</details>

<details>
<summary>Advanced example #3: Start and end times</summary>

The following cron job uses start and end times:

</Tabs>

</details>

### Using the key format

:::warning
Using the key format creates an anonymous cron job which may cause issues when trying to disable the cron job or with some plugins. It is recommended to use the object format.
:::

To define a cron job with the key format, create a file with the following structure:

</Tabs>

## Enabling cron jobs

To enable cron jobs, set `cron.enabled` to `true` in the [server configuration file](/dev-docs/configurations/server) and declare the jobs:

</Tabs>



# CRON jobs
Source: https://docs-v4.strapi.io/dev-docs/configurations/cron

# Cron jobs

<!--TODO fix the link in the prereq-->

:::prerequisites
The `cron.enabled` configuration option should be set to `true` in the `./config/server.js` (or `./config/server.ts` for TypeScript projects) [file](/dev-docs/configurations/server).
:::

`cron` allows scheduling arbitrary functions for execution at specific dates, with optional recurrence rules. These functions are named cron jobs. `cron` only uses a single timer at any given time, rather than reevaluating upcoming jobs every second/minute.

This feature is powered by the [`node-schedule`](https://www.npmjs.com/package/node-schedule) package.

The `cron` format consists of:

```

*    *    *    *    *    *
┬    ┬    ┬    ┬    ┬    ┬
│    │    │    │    │    |
│    │    │    │    │    └ day of week (0 - 7) (0 or 7 is Sun)
│    │    │    │    └───── month (1 - 12)
│    │    │    └────────── day of month (1 - 31)
│    │    └─────────────── hour (0 - 23)
│    └──────────────────── minute (0 - 59)
└───────────────────────── second (0 - 59, OPTIONAL)

```

To define cron jobs and have them run at the required times:

1. [Create](#creating-a-cron-job) the appropriate file.
2. [Enable](#enabling-cron-jobs) the cron jobs in the server configuration file.

:::tip
Optionally, cron jobs can be directly created in the `cron.tasks` key of the [server configuration file](/dev-docs/configurations/server).
:::

## Creating a cron job

A cron job can be created using the [object format](#using-the-object-format) or [key format](#using-the-key-format).

### Using the object format

To define a cron job with the object format, create a file with the following structure:

</Tabs>

<details>
<summary>Advanced example #1: Timezones</summary>

The following cron job runs on a specific timezone:

</Tabs>

</details>

<details>
<summary>Advanced example #2: One-off cron jobs</summary>
The following cron job is run only once at a given time:

</Tabs>

</details>

<details>
<summary>Advanced example #3: Start and end times</summary>

The following cron job uses start and end times:

</Tabs>

</details>

### Using the key format

:::warning
Using the key format creates an anonymous cron job which may cause issues when trying to disable the cron job or with some plugins. It is recommended to use the object format.
:::

To define a cron job with the key format, create a file with the following structure:

</Tabs>

## Enabling cron jobs

To enable cron jobs, set `cron.enabled` to `true` in the [server configuration file](/dev-docs/configurations/server) and declare the jobs:

</Tabs>



# Database
Source: https://docs-v4.strapi.io/dev-docs/configurations/database

# Database configuration

The `./config/database.js` file (or the `./config/database.ts` file for TypeScript) is used to define database connections that will be used to store the application content.

:::warning
 Strapi applications are not meant to be connected to a pre-existing database, not created by a Strapi application, nor connected to a Strapi v3 database. The Strapi team will not support such attempts. Attempting to connect to an unsupported database may, and most likely will, result in lost data.
:::

:::strapi Supported databases
The CLI installation guide details [supported database and versions](/dev-docs/installation/cli.md#preparing-the-installation).
:::

:::note
Strapi `v4.6.2` introduced a new format for the database configuration file that allows all of the database configuration properties to be set using environment variables. Only new projects created after the `v4.6.2` release will include the new configuration, however, earlier projects can utilize the new configuration by manually modifying the `./config/database.js` or `./config/database.ts` and updating the `.env` file. See [environment variables in database configurations](#environment-variables-in-database-configurations)

:::

## Configuration structure

The `./config/database.js` (or `./config/database.ts` for TypeScript) accepts 2 main configuration objects:

- [`connection`](#connection-configuration-object) for database configuration options passed to [Knex.js](https://github.com/knex/knex)
- [`settings`](#settings-configuration-object) for Strapi-specific database settings

### `connection` configuration object

| Parameter                                                | Description                                                                                           | Type      | Default |
|----------------------------------------------------------|-------------------------------------------------------------------------------------------------------|-----------|---------|
| `client`                                                 | Database client to create the connection.<br/>Accepts the following values:<ul><li>For SQLite databases:<ul><li>`sqlite3`</li><li>`better-sqlite3`</li></ul></li><li>For PostgreSQL databases: `postgres`</li><li>For MySQL databases:<ul><li>`mysql`</li><li>`mysql2` (see [additional details](#alternative-database-driver-packages))</li></ul></li></ul> | `String`  | -       |
| `connection`                                             | Database [connection information](#connection-parameters)                                             | `Object`  | -       |
| `debug`                                                  | Show database exchanges and errors.                                                                   | `Boolean` | `false` |
| `useNullAsDefault`<br/><br />_Optional, only for SQLite_ | Use `NULL` as a default value                                                                         | `Boolean` | `true`  |
| `pool`<br /><br />_Optional_                             | [Database pooling options](#database-pooling-options)                                                 | `Object`  | -       |
| `acquireConnectionTimeout`<br /><br />_Optional_         | How long knex will wait before throwing a timeout error when acquiring a connection (in milliseconds) | `Integer` | `60000` |

:::note
A `client` value of 'sqlite' will be modified by Strapi to be 'better-sqlite3' if the package is available in your project, or 'sqlite3' if it is not.
:::

#### Connection parameters

The `connection.connection` object found in `./config/database.js` (or `./config/database.ts` for TypeScript) is used to pass database connection information and accepts the following parameters:

| Parameter  | Description                                                                                                                   | Type                  |
|------------|-------------------------------------------------------------------------------------------------------------------------------|-----------------------|
| `connectionString`| [Database connection string](#database-connections-using-connectionstring). When set, it overrides the other `connection.connection` properties. To disable use an empty string: `''`. <br/> **Available in Strapi v4.6.2+**           | `String`                  |
| `host`     | Database host name. Default value: `localhost`.                                                                               | `String`              |
| `port`     | Database port                                                                                                                 | `Integer`             |
| `database` | Database name.                                                                                                                | `String`              |
| `user`     | Username used to establish the connection                                                                                     | `String`              |
| `password` | Password used to establish the connection                                                                                     | `String`              |
| `timezone` | Set the default behavior for local time. Default value: `utc` [Timezone options](https://www.php.net/manual/en/timezones.php) | `String`              |
| `schema`   | Set the default database schema. **Used only for Postgres DB.**                                                               | `String`              |
| `ssl`      | For SSL database connection.<br/> Use an object to pass certificate files as strings.                                         | `Boolean` or `Object` |

:::note
Depending on the database client used, more parameters can be set (e.g., `charset` and `collation` for [mysql](https://github.com/mysqljs/mysql#connection-options)). Check the database client documentation to know what parameters are available, for instance the [pg](https://node-postgres.com/apis/client#new-client), [mysql](https://github.com/mysqljs/mysql#connection-options), and [better-sqlite3](https://github.com/WiseLibs/better-sqlite3/blob/master/docs/api.md#new-databasepath-options) documentations.
:::

#### Database pooling options

The `connection.pool` object optionally found in `./config/database.js` (or `./config/database.ts` for TypeScript) is used to pass [Tarn.js](https://github.com/vincit/tarn.js) database pooling options and accepts the following parameters:

:::caution
When using Docker, change the pool `min` value to `0` as Docker will kill any idle connections, making it impossible to keep any open connections to the database (see the [Tarn.js pool](https://knexjs.org/guide/#pool) settings used by Knex.js for more information).
:::

| Parameter                   | Description                                                                                                                                                                                | Type       | Default |
|-----------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|------------|---------|
| `min`                       | Minimum number of database connections to keepalive                                                                                                                                        | `Integer`  | `2`     |
| `max`                       | Maximum number of database connections to keepalive                                                                                                                                        | `Integer`  | `10`    |
| `acquireTimeoutMillis`      | Time in milliseconds before timing out a database connection attempt                                                                                                                       | `Integer`  | `60000` |
| `createTimeoutMillis`       | Time in milliseconds before timing out a create query attempt                                                                                                                              | `Integer`  | `30000` |
| `destroyTimeoutMillis`      | Time in milliseconds before timing out a destroy query attempt                                                                                                                             | `Integer`  | `5000`  |
| `idleTimeoutMillis`         | Time in milliseconds before free database connections are destroyed                                                                                                                        | `Integer`  | `30000` |
| `reapIntervalMillis`        | Time in milliseconds to check for idle database connections to destroy                                                                                                                     | `Integer`  | `1000`  |
| `createRetryIntervalMillis` | Time in milliseconds to idle before retrying failed create actions                                                                                                                         | `Integer`  | `200`   |
| `afterCreate`               | Callback function to execute custom logic when the pool acquires a new connection.<br/><br/>See the [Knex.js documentation](https://knexjs.org/#Installation-pooling) for more information | `Function` | -       |

### `settings` configuration object

The `settings` object found in `./config/database.js` (or `./config/database.ts` for TypeScript) is used to configure Strapi-specific database settings and accepts the following parameters:

| Parameter        | Description                                                     | Type      | Default |
| ---------------- | --------------------------------------------------------------- | --------- | ------- |
| `forceMigration` | Enable or disable the forced database migration.                | `Boolean` | `true`  |
| `runMigrations`  | Enable or disable database migrations from running on start up. | `Boolean` | `true`  |

<!-- TODO: Open and track a feature request for autoMigration as it doesn't exist in v4 -->

### Configuration examples

</Tabs>

</TabItem>
</Tabs>

## Configuration in database

Configuration files are not multi-server friendly. To update configurations in production you can use a data store to get and set settings.

### Get settings

- `environment` (string): Sets the environment you want to store the data in. By default it's current environment (can be an empty string if your configuration is environment agnostic).
- `type` (string): Sets if your configuration is for an `api`, `plugin` or `core`. By default it's `core`.
- `name` (string): You have to set the plugin or api name if `type` is `api` or `plugin`.
- `key` (string, required): The name of the key you want to store.

```js
// strapi.store(object).get(object);
// create reusable plugin store variable
const pluginStore = strapi.store({
  environment: strapi.config.environment,
  type: 'plugin',
  name: 'users-permissions',
});
await pluginStore.get({ key: 'grant' });
```

### Set settings

- `value` (any, required): The value you want to store.

```js
// strapi.store(object).set(object);
// create reusable plugin store variable
const pluginStore = strapi.store({
  environment: strapi.config.environment,
  type: 'plugin',
  name: 'users-permissions'
});
await pluginStore.set({
  key: 'grant',
  value: {
    ...
  }
});
```

## Environment variables in database configurations

Strapi version `v4.6.2` and higher includes the database configuration options in the `./config/database.js` or `./config/database.ts` file. When a new project is created the environment variable `DATABASE_CLIENT` with the value `mysql`, `postgres`, or `sqlite` is automatically added to the `.env` file depending on which database you choose during project creation. Additionally, all of the environment variables necessary to connect to your local development database are also added to the `.env` file.  The following is an example of the generated configuration file:

</Tabs>

The following are examples of the corresponding `.env` file database-related keys for each of the possible databases:

</Tabs>

:::tip
If you are getting an `ER_ACCESS_DENIED_ERROR message` and the `DATABASE_PASSWORD` value in your `.env` file includes special characters, try surrounding the password with single quotes. For instance, `DATABASE_PASSWORD=example-i-had-special-chars-like-#` should become `DATABASE_PASSWORD='example-i-had-special-chars-like-#'`.
:::

### Environment variables for Strapi applications before `v4.6.2`

If you started your project with a version prior to `v4.6.2` you can convert your `database.js|database.ts` configuration file following this procedure:

1. Update your application to `v4.6.2` or a later version. See the [Updates and Migrations](/dev-docs/migration-guides) section for any breaking changes that require specific fixes.
2. Replace the contents of your `./config/database.js` or `./config/database.ts` file with the preceding JavaScript or TypeScript code.
3. Add the environment variables from the preceding code example to your `.env` file.
4. (_optional_) Add additional environment variables such as `DATABASE_URL` and the properties of the `ssl` object.
5. Save the changes and restart your application.
:::caution
Do not overwrite the environment variables: `HOST`, `PORT`, `APP_KEYS`, `API_TOKEN_SALT`, and `ADMIN_JWT_SECRET`.
:::

### Database connections using `connectionString`

Many managed database solutions use the property `connectionString` to connect a database to an application. Strapi `v4.6.2` and later versions include the `connectionString` property. The `connectionString` is a concatenation of all the database properties in the `connection.connection` object. The `connectionString`:

- overrides the other `connection.connection` properties such as `host` and `port`,
- can be disabled by setting the property to an empty string: `''`.

### Database management by environment

Development of a Strapi application commonly includes customization in the local development environment with a local development database, such as `SQLite`. When the application is ready for another environment such as production or staging the application is deployed with a different database instance, usually `MySQL`, `MariaDB`, or `PostgreSQL`. Database environment variables allow you to switch the attached database. To switch the database connection:

* set a minimum of the `DATABASE_CLIENT` and `DATABASE_URL` for `MySQL`, `MariaDB`, and `PostgreSQL`,
* or set a minimum of `DATABASE_CLIENT` and `DATABASE_FILENAME` for `SQLite`.

For deployed versions of your application the database environment variables should be stored wherever your other secrets are stored. The following table gives examples of where the database environment variables should be stored:

| Hosting option                                        | environment variable storage    |
|-------------------------------------------------------|---------------------------------|
| Virtual private server/virtual machine (e.g. AWS EC2) | `ecosystem.config.js` or `.env` |
| DigitalOcean App Platform                             | `Environment Variables` table   |
| Heroku                                                | `Config vars` table                   |

## Databases installation guides

Strapi gives you the option to choose the most appropriate database for your project. Strapi supports **PostgreSQL**, **SQLite**, **MySQL** and **MariaDB**.

The following documentation covers how to install databases locally:

- [SQLite installation guide](/dev-docs/configurations/sqlite),
- PostgreSQL (coming soon),
- MySQL/MariaDB (coming soon).

:::note
When connecting Strapi to a PostgreSQL database, the database user requires SCHEMA permissions. While the database admin has this permission by default, a new database user explicitly created for the Strapi application will not. This would result in a 500 error when trying to load the admin console.

To create a new PostgreSQL user with the SCHEMA permission, use the following steps.

```shell
# Create a new database user with a secure password
$ CREATE USER my_strapi_db_user WITH PASSWORD 'password';
# Connect to the database as the PostgreSQL admin
$ \c my_strapi_db_name admin_user
# Grant schema privileges to the user
$ GRANT ALL ON SCHEMA public TO my_strapi_db_user;
```

:::

### Alternative database driver packages

In addition to `client` values of '[postgres](https://www.npmjs.com/package/pg)', 'sqlite', and '[mysql](https://www.npmjs.com/package/mysql)', Strapi also allows a `client` value of '[mysql2](https://www.npmjs.com/package/mysql2)' for those who install and wish to use that package.

:::note
`mysql2` is required for the `caching_sha2_password` auth method used by default in MySQL v8+. If you receive an `"ER_NOT_SUPPORTED_AUTH_MODE"` error when using the `mysql` driver, try adding the `mysql2` package to your project. You should then remove the deprecated `connectionString` parameter from your connection configuration in favor of the `user` and `password` values.
:::



# Database
Source: https://docs-v4.strapi.io/dev-docs/configurations/database

# Database configuration

The `./config/database.js` file (or the `./config/database.ts` file for TypeScript) is used to define database connections that will be used to store the application content.

:::warning
 Strapi applications are not meant to be connected to a pre-existing database, not created by a Strapi application, nor connected to a Strapi v3 database. The Strapi team will not support such attempts. Attempting to connect to an unsupported database may, and most likely will, result in lost data.
:::

:::strapi Supported databases
The CLI installation guide details [supported database and versions](/dev-docs/installation/cli.md#preparing-the-installation).
:::

:::note
Strapi `v4.6.2` introduced a new format for the database configuration file that allows all of the database configuration properties to be set using environment variables. Only new projects created after the `v4.6.2` release will include the new configuration, however, earlier projects can utilize the new configuration by manually modifying the `./config/database.js` or `./config/database.ts` and updating the `.env` file. See [environment variables in database configurations](#environment-variables-in-database-configurations)

:::

## Configuration structure

The `./config/database.js` (or `./config/database.ts` for TypeScript) accepts 2 main configuration objects:

- [`connection`](#connection-configuration-object) for database configuration options passed to [Knex.js](https://github.com/knex/knex)
- [`settings`](#settings-configuration-object) for Strapi-specific database settings

### `connection` configuration object

| Parameter                                                | Description                                                                                           | Type      | Default |
|----------------------------------------------------------|-------------------------------------------------------------------------------------------------------|-----------|---------|
| `client`                                                 | Database client to create the connection.<br/>Accepts the following values:<ul><li>For SQLite databases:<ul><li>`sqlite3`</li><li>`better-sqlite3`</li></ul></li><li>For PostgreSQL databases: `postgres`</li><li>For MySQL databases:<ul><li>`mysql`</li><li>`mysql2` (see [additional details](#alternative-database-driver-packages))</li></ul></li></ul> | `String`  | -       |
| `connection`                                             | Database [connection information](#connection-parameters)                                             | `Object`  | -       |
| `debug`                                                  | Show database exchanges and errors.                                                                   | `Boolean` | `false` |
| `useNullAsDefault`<br/><br />_Optional, only for SQLite_ | Use `NULL` as a default value                                                                         | `Boolean` | `true`  |
| `pool`<br /><br />_Optional_                             | [Database pooling options](#database-pooling-options)                                                 | `Object`  | -       |
| `acquireConnectionTimeout`<br /><br />_Optional_         | How long knex will wait before throwing a timeout error when acquiring a connection (in milliseconds) | `Integer` | `60000` |

:::note
A `client` value of 'sqlite' will be modified by Strapi to be 'better-sqlite3' if the package is available in your project, or 'sqlite3' if it is not.
:::

#### Connection parameters

The `connection.connection` object found in `./config/database.js` (or `./config/database.ts` for TypeScript) is used to pass database connection information and accepts the following parameters:

| Parameter  | Description                                                                                                                   | Type                  |
|------------|-------------------------------------------------------------------------------------------------------------------------------|-----------------------|
| `connectionString`| [Database connection string](#database-connections-using-connectionstring). When set, it overrides the other `connection.connection` properties. To disable use an empty string: `''`. <br/> **Available in Strapi v4.6.2+**           | `String`                  |
| `host`     | Database host name. Default value: `localhost`.                                                                               | `String`              |
| `port`     | Database port                                                                                                                 | `Integer`             |
| `database` | Database name.                                                                                                                | `String`              |
| `user`     | Username used to establish the connection                                                                                     | `String`              |
| `password` | Password used to establish the connection                                                                                     | `String`              |
| `timezone` | Set the default behavior for local time. Default value: `utc` [Timezone options](https://www.php.net/manual/en/timezones.php) | `String`              |
| `schema`   | Set the default database schema. **Used only for Postgres DB.**                                                               | `String`              |
| `ssl`      | For SSL database connection.<br/> Use an object to pass certificate files as strings.                                         | `Boolean` or `Object` |

:::note
Depending on the database client used, more parameters can be set (e.g., `charset` and `collation` for [mysql](https://github.com/mysqljs/mysql#connection-options)). Check the database client documentation to know what parameters are available, for instance the [pg](https://node-postgres.com/apis/client#new-client), [mysql](https://github.com/mysqljs/mysql#connection-options), and [better-sqlite3](https://github.com/WiseLibs/better-sqlite3/blob/master/docs/api.md#new-databasepath-options) documentations.
:::

#### Database pooling options

The `connection.pool` object optionally found in `./config/database.js` (or `./config/database.ts` for TypeScript) is used to pass [Tarn.js](https://github.com/vincit/tarn.js) database pooling options and accepts the following parameters:

:::caution
When using Docker, change the pool `min` value to `0` as Docker will kill any idle connections, making it impossible to keep any open connections to the database (see the [Tarn.js pool](https://knexjs.org/guide/#pool) settings used by Knex.js for more information).
:::

| Parameter                   | Description                                                                                                                                                                                | Type       | Default |
|-----------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|------------|---------|
| `min`                       | Minimum number of database connections to keepalive                                                                                                                                        | `Integer`  | `2`     |
| `max`                       | Maximum number of database connections to keepalive                                                                                                                                        | `Integer`  | `10`    |
| `acquireTimeoutMillis`      | Time in milliseconds before timing out a database connection attempt                                                                                                                       | `Integer`  | `60000` |
| `createTimeoutMillis`       | Time in milliseconds before timing out a create query attempt                                                                                                                              | `Integer`  | `30000` |
| `destroyTimeoutMillis`      | Time in milliseconds before timing out a destroy query attempt                                                                                                                             | `Integer`  | `5000`  |
| `idleTimeoutMillis`         | Time in milliseconds before free database connections are destroyed                                                                                                                        | `Integer`  | `30000` |
| `reapIntervalMillis`        | Time in milliseconds to check for idle database connections to destroy                                                                                                                     | `Integer`  | `1000`  |
| `createRetryIntervalMillis` | Time in milliseconds to idle before retrying failed create actions                                                                                                                         | `Integer`  | `200`   |
| `afterCreate`               | Callback function to execute custom logic when the pool acquires a new connection.<br/><br/>See the [Knex.js documentation](https://knexjs.org/#Installation-pooling) for more information | `Function` | -       |

### `settings` configuration object

The `settings` object found in `./config/database.js` (or `./config/database.ts` for TypeScript) is used to configure Strapi-specific database settings and accepts the following parameters:

| Parameter        | Description                                                     | Type      | Default |
| ---------------- | --------------------------------------------------------------- | --------- | ------- |
| `forceMigration` | Enable or disable the forced database migration.                | `Boolean` | `true`  |
| `runMigrations`  | Enable or disable database migrations from running on start up. | `Boolean` | `true`  |

<!-- TODO: Open and track a feature request for autoMigration as it doesn't exist in v4 -->

### Configuration examples

</Tabs>

</TabItem>
</Tabs>

## Configuration in database

Configuration files are not multi-server friendly. To update configurations in production you can use a data store to get and set settings.

### Get settings

- `environment` (string): Sets the environment you want to store the data in. By default it's current environment (can be an empty string if your configuration is environment agnostic).
- `type` (string): Sets if your configuration is for an `api`, `plugin` or `core`. By default it's `core`.
- `name` (string): You have to set the plugin or api name if `type` is `api` or `plugin`.
- `key` (string, required): The name of the key you want to store.

```js
// strapi.store(object).get(object);
// create reusable plugin store variable
const pluginStore = strapi.store({
  environment: strapi.config.environment,
  type: 'plugin',
  name: 'users-permissions',
});
await pluginStore.get({ key: 'grant' });
```

### Set settings

- `value` (any, required): The value you want to store.

```js
// strapi.store(object).set(object);
// create reusable plugin store variable
const pluginStore = strapi.store({
  environment: strapi.config.environment,
  type: 'plugin',
  name: 'users-permissions'
});
await pluginStore.set({
  key: 'grant',
  value: {
    ...
  }
});
```

## Environment variables in database configurations

Strapi version `v4.6.2` and higher includes the database configuration options in the `./config/database.js` or `./config/database.ts` file. When a new project is created the environment variable `DATABASE_CLIENT` with the value `mysql`, `postgres`, or `sqlite` is automatically added to the `.env` file depending on which database you choose during project creation. Additionally, all of the environment variables necessary to connect to your local development database are also added to the `.env` file.  The following is an example of the generated configuration file:

</Tabs>

The following are examples of the corresponding `.env` file database-related keys for each of the possible databases:

</Tabs>

:::tip
If you are getting an `ER_ACCESS_DENIED_ERROR message` and the `DATABASE_PASSWORD` value in your `.env` file includes special characters, try surrounding the password with single quotes. For instance, `DATABASE_PASSWORD=example-i-had-special-chars-like-#` should become `DATABASE_PASSWORD='example-i-had-special-chars-like-#'`.
:::

### Environment variables for Strapi applications before `v4.6.2`

If you started your project with a version prior to `v4.6.2` you can convert your `database.js|database.ts` configuration file following this procedure:

1. Update your application to `v4.6.2` or a later version. See the [Updates and Migrations](/dev-docs/migration-guides) section for any breaking changes that require specific fixes.
2. Replace the contents of your `./config/database.js` or `./config/database.ts` file with the preceding JavaScript or TypeScript code.
3. Add the environment variables from the preceding code example to your `.env` file.
4. (_optional_) Add additional environment variables such as `DATABASE_URL` and the properties of the `ssl` object.
5. Save the changes and restart your application.
:::caution
Do not overwrite the environment variables: `HOST`, `PORT`, `APP_KEYS`, `API_TOKEN_SALT`, and `ADMIN_JWT_SECRET`.
:::

### Database connections using `connectionString`

Many managed database solutions use the property `connectionString` to connect a database to an application. Strapi `v4.6.2` and later versions include the `connectionString` property. The `connectionString` is a concatenation of all the database properties in the `connection.connection` object. The `connectionString`:

- overrides the other `connection.connection` properties such as `host` and `port`,
- can be disabled by setting the property to an empty string: `''`.

### Database management by environment

Development of a Strapi application commonly includes customization in the local development environment with a local development database, such as `SQLite`. When the application is ready for another environment such as production or staging the application is deployed with a different database instance, usually `MySQL`, `MariaDB`, or `PostgreSQL`. Database environment variables allow you to switch the attached database. To switch the database connection:

* set a minimum of the `DATABASE_CLIENT` and `DATABASE_URL` for `MySQL`, `MariaDB`, and `PostgreSQL`,
* or set a minimum of `DATABASE_CLIENT` and `DATABASE_FILENAME` for `SQLite`.

For deployed versions of your application the database environment variables should be stored wherever your other secrets are stored. The following table gives examples of where the database environment variables should be stored:

| Hosting option                                        | environment variable storage    |
|-------------------------------------------------------|---------------------------------|
| Virtual private server/virtual machine (e.g. AWS EC2) | `ecosystem.config.js` or `.env` |
| DigitalOcean App Platform                             | `Environment Variables` table   |
| Heroku                                                | `Config vars` table                   |

## Databases installation guides

Strapi gives you the option to choose the most appropriate database for your project. Strapi supports **PostgreSQL**, **SQLite**, **MySQL** and **MariaDB**.

The following documentation covers how to install databases locally:

- [SQLite installation guide](/dev-docs/configurations/sqlite),
- PostgreSQL (coming soon),
- MySQL/MariaDB (coming soon).

:::note
When connecting Strapi to a PostgreSQL database, the database user requires SCHEMA permissions. While the database admin has this permission by default, a new database user explicitly created for the Strapi application will not. This would result in a 500 error when trying to load the admin console.

To create a new PostgreSQL user with the SCHEMA permission, use the following steps.

```shell
# Create a new database user with a secure password
$ CREATE USER my_strapi_db_user WITH PASSWORD 'password';
# Connect to the database as the PostgreSQL admin
$ \c my_strapi_db_name admin_user
# Grant schema privileges to the user
$ GRANT ALL ON SCHEMA public TO my_strapi_db_user;
```

:::

### Alternative database driver packages

In addition to `client` values of '[postgres](https://www.npmjs.com/package/pg)', 'sqlite', and '[mysql](https://www.npmjs.com/package/mysql)', Strapi also allows a `client` value of '[mysql2](https://www.npmjs.com/package/mysql2)' for those who install and wish to use that package.

:::note
`mysql2` is required for the `caching_sha2_password` auth method used by default in MySQL v8+. If you receive an `"ER_NOT_SUPPORTED_AUTH_MODE"` error when using the `mysql` driver, try adding the `mysql2` package to your project. You should then remove the deprecated `connectionString` parameter from your connection configuration in favor of the `user` and `password` values.
:::



# Environment variables
Source: https://docs-v4.strapi.io/dev-docs/configurations/environment

# Environment configuration and variables

Strapi provides environment variables that can be used in configuration files.  An `env()` utility can be used to [retrieve the value of environment variables](#configuration-using-environment-variables) and [cast variables to different types](#casting-environment-variables), and  specific [configurations for different environments](#environment-configurations) can be created.

## Strapi's environment variables

Strapi provides the following environment variables:

 Setting                                                    | Description                                                                                                                                                                                                                                                                   | Type      | Default value   |
|------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-----------|-----------------|
| `STRAPI_DISABLE_UPDATE_NOTIFICATION`                       | Don't show the notification message about updating strapi in the terminal                                                                                                                                                                                                     | `Boolean` | `false`         |
| `STRAPI_HIDE_STARTUP_MESSAGE`                              | Don't show the startup message in the terminal                                                                                                                                                                                                                                | `Boolean` | `false`         |
| `STRAPI_TELEMETRY_DISABLED`                                | Don't send telemetry usage data to Strapi                                                                                                                                                                                                                                     | `Boolean` | `false`         |
| `STRAPI_LICENSE`                                           | The license key to activate the Enterprise Edition                                                                                                                                                                                                                            | `String`  | `undefined`     |
| `STRAPI_DISABLE_REMOTE_DATA_TRANSFER`                      | Disable the ability to use the [transfer feature](/dev-docs/data-management#transfer-data-using-the-cli-tool)                                                                                                                                                                | `Boolean` | `false`         |
| `NODE_ENV`                                                 | Type of environment where the application is running.<br/><br/>`production` enables specific behaviors (see  [Node.js documentation](https://nodejs.org/en/learn/getting-started/nodejs-the-difference-between-development-and-production) for details)                                       | `String`  | `'development'` |
| `BROWSER`                                                  | Open the admin panel in the browser after startup                                                                                                                                                                                                                             | `Boolean` | `true`          |
| `ENV_PATH`                                                 | Path to the file that contains your environment variables                                                                                                                                                                                                                     | `String`  | `'./.env'`      |
| `STRAPI_PLUGIN_I18N_INIT_LOCALE_CODE` <br/><br/>_Optional_ | Initialization locale for the application, if the [Internationalization (i18n) plugin](/dev-docs/plugins/i18n) is installed and enabled on Content-Types (see [Configuration of i18n in production environments](/dev-docs/plugins/i18n#configuration-of-the-default-locale)) | `String`  | `'en'`          |
| `STRAPI_ENFORCE_SOURCEMAPS`                                | Forces the bundler to emit source-maps, which is helpful for debugging errors in the admin app.  | `boolean` | `false`          |
| `FAST_REFRESH`                                             | Use [react-refresh](https://github.com/pmmmwh/react-refresh-webpack-plugin) to enable "Fast Refresh" for near-instant feedback while developing the Strapi admin panel.                                                                                                       | `boolean` | `true`          |

:::tip
Prefixing an environment variable name with `STRAPI_ADMIN_` exposes the variable to the admin front end (e.g., `STRAPI_ADMIN_MY_PLUGIN_VARIABLE` is accessible through `process.env.STRAPI_ADMIN_MY_PLUGIN_VARIABLE`).
:::

## Configuration using environment variables

In most use cases there will be different configurations between environments (e.g. database credentials).

Instead of writing those credentials into configuration files, variables can be defined in a `.env` file at the root of the application:

```sh
# path: .env

DATABASE_PASSWORD=acme
```

To customize the path of the `.env` file to load, set an environment variable called `ENV_PATH` before starting the application:

```sh
ENV_PATH=/absolute/path/to/.env npm run start
```

Variables defined in the `.env` file are accessible using `process.env.{variableName}` anywhere in configuration and application files.

In configuration files, a `env()` utility allows defining defaults and [casting values](#casting-environment-variables):

</Tabs>

:::note
The syntax `property-name: env('VAR', 'default-value')` uses the value stored in the `.env` file. If there is no specified value in the `.env` file the default value is used.
:::

### Casting environment variables

The `env()` utility can be used to cast environment variables to different types:

```js
// Returns the env if defined without casting it
env('VAR', 'default');

// Cast to integer (using parseInt)
env.int('VAR', 0);

// Cast to float (using parseFloat)
env.float('VAR', 3.14);

// Cast to boolean (check if the value is equal to 'true')
env.bool('VAR', true);

// Cast to JS object (using JSON.parse)
env.json('VAR', { key: 'value' });

// Cast to array (syntax: ENV_VAR=[value1, value2, value3] | ENV_VAR=["value1", "value2", "value3"])
env.array('VAR', [1, 2, 3]);

// Cast to date (using new Date(value))
env.date('VAR', new Date());

// Returns the env matching oneOf union types
env.oneOf('UPLOAD_PROVIDER', ['local', 'aws'], 'local')
```

## Environment configurations

Configurations can be created with the following naming and structure conventions: `./config/env/{environment}/{filename}`. This is useful when you need specific static configurations for specific environments and using environment variables is not the best solution.

These configurations will be merged into the base configurations defined in the `./config` folder.
The environment is based on the `NODE_ENV` environment variable, which defaults to `development`.

When starting Strapi with `NODE_ENV=production` it will load the configuration from `./config/*` and `./config/env/production/*`. Everything defined in the production configuration will override the default configuration. In combination with environment variables this pattern becomes really powerful.

For instance, using the following configuration files will give you various options to start the server:

</Tabs>

With these configuration files the server will start on various ports depending on the environment variables passed:

```bash
yarn start                                   # uses host 127.0.0.1
NODE_ENV=production yarn start               # uses host defined in .env. If not defined, uses 0.0.0.0
HOST=10.0.0.1 NODE_ENV=production yarn start # uses host 10.0.0.1
```



# Environment variables
Source: https://docs-v4.strapi.io/dev-docs/configurations/environment

# Environment configuration and variables

Strapi provides environment variables that can be used in configuration files.  An `env()` utility can be used to [retrieve the value of environment variables](#configuration-using-environment-variables) and [cast variables to different types](#casting-environment-variables), and  specific [configurations for different environments](#environment-configurations) can be created.

## Strapi's environment variables

Strapi provides the following environment variables:

 Setting                                                    | Description                                                                                                                                                                                                                                                                   | Type      | Default value   |
|------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-----------|-----------------|
| `STRAPI_DISABLE_UPDATE_NOTIFICATION`                       | Don't show the notification message about updating strapi in the terminal                                                                                                                                                                                                     | `Boolean` | `false`         |
| `STRAPI_HIDE_STARTUP_MESSAGE`                              | Don't show the startup message in the terminal                                                                                                                                                                                                                                | `Boolean` | `false`         |
| `STRAPI_TELEMETRY_DISABLED`                                | Don't send telemetry usage data to Strapi                                                                                                                                                                                                                                     | `Boolean` | `false`         |
| `STRAPI_LICENSE`                                           | The license key to activate the Enterprise Edition                                                                                                                                                                                                                            | `String`  | `undefined`     |
| `STRAPI_DISABLE_REMOTE_DATA_TRANSFER`                      | Disable the ability to use the [transfer feature](/dev-docs/data-management#transfer-data-using-the-cli-tool)                                                                                                                                                                | `Boolean` | `false`         |
| `NODE_ENV`                                                 | Type of environment where the application is running.<br/><br/>`production` enables specific behaviors (see  [Node.js documentation](https://nodejs.org/en/learn/getting-started/nodejs-the-difference-between-development-and-production) for details)                                       | `String`  | `'development'` |
| `BROWSER`                                                  | Open the admin panel in the browser after startup                                                                                                                                                                                                                             | `Boolean` | `true`          |
| `ENV_PATH`                                                 | Path to the file that contains your environment variables                                                                                                                                                                                                                     | `String`  | `'./.env'`      |
| `STRAPI_PLUGIN_I18N_INIT_LOCALE_CODE` <br/><br/>_Optional_ | Initialization locale for the application, if the [Internationalization (i18n) plugin](/dev-docs/plugins/i18n) is installed and enabled on Content-Types (see [Configuration of i18n in production environments](/dev-docs/plugins/i18n#configuration-of-the-default-locale)) | `String`  | `'en'`          |
| `STRAPI_ENFORCE_SOURCEMAPS`                                | Forces the bundler to emit source-maps, which is helpful for debugging errors in the admin app.  | `boolean` | `false`          |
| `FAST_REFRESH`                                             | Use [react-refresh](https://github.com/pmmmwh/react-refresh-webpack-plugin) to enable "Fast Refresh" for near-instant feedback while developing the Strapi admin panel.                                                                                                       | `boolean` | `true`          |

:::tip
Prefixing an environment variable name with `STRAPI_ADMIN_` exposes the variable to the admin front end (e.g., `STRAPI_ADMIN_MY_PLUGIN_VARIABLE` is accessible through `process.env.STRAPI_ADMIN_MY_PLUGIN_VARIABLE`).
:::

## Configuration using environment variables

In most use cases there will be different configurations between environments (e.g. database credentials).

Instead of writing those credentials into configuration files, variables can be defined in a `.env` file at the root of the application:

```sh
# path: .env

DATABASE_PASSWORD=acme
```

To customize the path of the `.env` file to load, set an environment variable called `ENV_PATH` before starting the application:

```sh
ENV_PATH=/absolute/path/to/.env npm run start
```

Variables defined in the `.env` file are accessible using `process.env.{variableName}` anywhere in configuration and application files.

In configuration files, a `env()` utility allows defining defaults and [casting values](#casting-environment-variables):

</Tabs>

:::note
The syntax `property-name: env('VAR', 'default-value')` uses the value stored in the `.env` file. If there is no specified value in the `.env` file the default value is used.
:::

### Casting environment variables

The `env()` utility can be used to cast environment variables to different types:

```js
// Returns the env if defined without casting it
env('VAR', 'default');

// Cast to integer (using parseInt)
env.int('VAR', 0);

// Cast to float (using parseFloat)
env.float('VAR', 3.14);

// Cast to boolean (check if the value is equal to 'true')
env.bool('VAR', true);

// Cast to JS object (using JSON.parse)
env.json('VAR', { key: 'value' });

// Cast to array (syntax: ENV_VAR=[value1, value2, value3] | ENV_VAR=["value1", "value2", "value3"])
env.array('VAR', [1, 2, 3]);

// Cast to date (using new Date(value))
env.date('VAR', new Date());

// Returns the env matching oneOf union types
env.oneOf('UPLOAD_PROVIDER', ['local', 'aws'], 'local')
```

## Environment configurations

Configurations can be created with the following naming and structure conventions: `./config/env/{environment}/{filename}`. This is useful when you need specific static configurations for specific environments and using environment variables is not the best solution.

These configurations will be merged into the base configurations defined in the `./config` folder.
The environment is based on the `NODE_ENV` environment variable, which defaults to `development`.

When starting Strapi with `NODE_ENV=production` it will load the configuration from `./config/*` and `./config/env/production/*`. Everything defined in the production configuration will override the default configuration. In combination with environment variables this pattern becomes really powerful.

For instance, using the following configuration files will give you various options to start the server:

</Tabs>

With these configuration files the server will start on various ports depending on the environment variables passed:

```bash
yarn start                                   # uses host 127.0.0.1
NODE_ENV=production yarn start               # uses host defined in .env. If not defined, uses 0.0.0.0
HOST=10.0.0.1 NODE_ENV=production yarn start # uses host 10.0.0.1
```



# Features configuration
Source: https://docs-v4.strapi.io/dev-docs/configurations/features

# Features configuration

The `config/features.js|ts` file is used to enable feature flags. Currently this file only includes a `future` object used to enable experimental features through **future flags**.

Some incoming Strapi features are not yet ready to be shipped to all users, but Strapi still offers community users the opportunity to provide early feedback on these new features or changes. With these experimental features, developers have the flexibility to choose and integrate new features and changes into their Strapi applications as they become available in the current major version as well as assist us in shaping these new features.

Such experimental features are indicated by a 

  </Tabs>

4. Rebuild the admin panel and restart the server:

  </Tabs>

## Future flags API

Developers can use the following APIs to interact with future flags:

- Features configuration is part of the `config` object and can be read with `strapi.config.get('features')` or with `strapi.features.config`.

- `strapi.features.future` returns the `isEnabled()` that can be used to determine if a future flag is enabled, using the following method: `strapi.features.future.isEnabled('featureName')`.

## Available future flags

There are currently no available future flags. This section will be updated once new experimental features are available for testing.

<!-- The following future flags are currently available and can be used in the `future` object of the `config/features` configuration file:

| Property name     | Related feature                              | Suggested environment variable name       |
| ----------------- | -------------------------------------------- | ----------------------------------------- |
| `contentReleasesScheduling` | [Releases Scheduling](/user-docs/releases/managing-a-release#scheduling-a-release-) | `STRAPI_FUTURE_CONTENT_RELEASES_SCHEDULING` | -->



# Features configuration
Source: https://docs-v4.strapi.io/dev-docs/configurations/features

# Features configuration

The `config/features.js|ts` file is used to enable feature flags. Currently this file only includes a `future` object used to enable experimental features through **future flags**.

Some incoming Strapi features are not yet ready to be shipped to all users, but Strapi still offers community users the opportunity to provide early feedback on these new features or changes. With these experimental features, developers have the flexibility to choose and integrate new features and changes into their Strapi applications as they become available in the current major version as well as assist us in shaping these new features.

Such experimental features are indicated by a 

  </Tabs>

4. Rebuild the admin panel and restart the server:

  </Tabs>

## Future flags API

Developers can use the following APIs to interact with future flags:

- Features configuration is part of the `config` object and can be read with `strapi.config.get('features')` or with `strapi.features.config`.

- `strapi.features.future` returns the `isEnabled()` that can be used to determine if a future flag is enabled, using the following method: `strapi.features.future.isEnabled('featureName')`.

## Available future flags

There are currently no available future flags. This section will be updated once new experimental features are available for testing.

<!-- The following future flags are currently available and can be used in the `future` object of the `config/features` configuration file:

| Property name     | Related feature                              | Suggested environment variable name       |
| ----------------- | -------------------------------------------- | ----------------------------------------- |
| `contentReleasesScheduling` | [Releases Scheduling](/user-docs/releases/managing-a-release#scheduling-a-release-) | `STRAPI_FUTURE_CONTENT_RELEASES_SCHEDULING` | -->



# Lifecycle Functions
Source: https://docs-v4.strapi.io/dev-docs/configurations/functions

# Functions

The `./src/index.js` file (or `./src/index.ts` file in a [TypeScript-based](/dev-docs/typescript) project) includes global [register](#register), [bootstrap](#bootstrap) and [destroy](#destroy) functions that can be used to add dynamic and logic-based configurations.

The functions can be synchronous, asynchronous, or return a promise.

``` mermaid
flowchart TB
    A([The Strapi application starts.]) --> B{"register()"} 
    B -- The Strapi application is setup. --> C
    C{"bootstrap()"} -- The Strapi back-end server starts. --> D
    D(Request)
    D
    click B "#register"
    click C "#bootstrap"
    click D "/dev-docs/backend-customization/requests-responses"
```

## Synchronous function

</Tabs>

## Asynchronous function

</Tabs>

## Function returning a promise

</Tabs>

## Register

The `register` lifecycle function, found in `./src/index.js` (or in `./src/index.ts`), is an asynchronous function that runs before the application is initialized.
It can be used to:

- [extend plugins](/dev-docs/plugins-extension#extending-a-plugin-s-interface)
- extend [content-types](/dev-docs/backend-customization/models) programmatically
- load some [environment variables](/dev-docs/configurations/environment)
- register a [custom field](/dev-docs/custom-fields) that would be used only by the current Strapi application.

`register()` is the very first thing that happens when a Strapi application is starting. This happens _before_ any setup process and you don't have any access to database, routes, policies, or any other backend server elements within the `register()` function.

## Bootstrap

The `bootstrap` lifecycle function, found in `./src/index.js` (or in `./src/index.ts`), is called at every server start.

It can be used to:

- create an admin user if there isn't one
- fill the database with some necessary data
- declare custom conditions for the [Role-Based Access Control (RBAC)](/dev-docs/configurations/rbac) feature

The `bootstrapi()` function is run _before_ the back-end server starts but _after_ the Strapi application has setup, so you have access to anything from the `strapi` object.

:::tip
You can run `yarn strapi console` (or `npm run strapi console`) in the terminal and interact with the `strapi` object.
:::

## Destroy

The `destroy` function, found in `./src/index.js` (or in `./src/index.ts`), is an asynchronous function that runs before the application gets shut down.

It can be used to gracefully:

- stop [services](/dev-docs/backend-customization/services) that are running
- [clean up plugin actions](/dev-docs/api/plugins/server-api#destroy) (e.g. close connections, remove listeners, etc.)



# Lifecycle Functions
Source: https://docs-v4.strapi.io/dev-docs/configurations/functions

# Functions

The `./src/index.js` file (or `./src/index.ts` file in a [TypeScript-based](/dev-docs/typescript) project) includes global [register](#register), [bootstrap](#bootstrap) and [destroy](#destroy) functions that can be used to add dynamic and logic-based configurations.

The functions can be synchronous, asynchronous, or return a promise.

``` mermaid
flowchart TB
    A([The Strapi application starts.]) --> B{"register()"} 
    B -- The Strapi application is setup. --> C
    C{"bootstrap()"} -- The Strapi back-end server starts. --> D
    D(Request)
    D
    click B "#register"
    click C "#bootstrap"
    click D "/dev-docs/backend-customization/requests-responses"
```

## Synchronous function

</Tabs>

## Asynchronous function

</Tabs>

## Function returning a promise

</Tabs>

## Register

The `register` lifecycle function, found in `./src/index.js` (or in `./src/index.ts`), is an asynchronous function that runs before the application is initialized.
It can be used to:

- [extend plugins](/dev-docs/plugins-extension#extending-a-plugin-s-interface)
- extend [content-types](/dev-docs/backend-customization/models) programmatically
- load some [environment variables](/dev-docs/configurations/environment)
- register a [custom field](/dev-docs/custom-fields) that would be used only by the current Strapi application.

`register()` is the very first thing that happens when a Strapi application is starting. This happens _before_ any setup process and you don't have any access to database, routes, policies, or any other backend server elements within the `register()` function.

## Bootstrap

The `bootstrap` lifecycle function, found in `./src/index.js` (or in `./src/index.ts`), is called at every server start.

It can be used to:

- create an admin user if there isn't one
- fill the database with some necessary data
- declare custom conditions for the [Role-Based Access Control (RBAC)](/dev-docs/configurations/rbac) feature

The `bootstrapi()` function is run _before_ the back-end server starts but _after_ the Strapi application has setup, so you have access to anything from the `strapi` object.

:::tip
You can run `yarn strapi console` (or `npm run strapi console`) in the terminal and interact with the `strapi` object.
:::

## Destroy

The `destroy` function, found in `./src/index.js` (or in `./src/index.ts`), is an asynchronous function that runs before the application gets shut down.

It can be used to gracefully:

- stop [services](/dev-docs/backend-customization/services) that are running
- [clean up plugin actions](/dev-docs/api/plugins/server-api#destroy) (e.g. close connections, remove listeners, etc.)



# Access and cast environment variables
Source: https://docs-v4.strapi.io/dev-docs/configurations/guides/access-cast-environment-variables

# How to access and cast environment variables

In most use cases there will be different configurations between environments (e.g. database credentials).

Instead of writing those credentials into configuration files, variables can be defined in a `.env` file at the root of the application:

```sh
# path: .env

DATABASE_PASSWORD=acme
```

To customize the path of the `.env` file to load, set an environment variable called `ENV_PATH` before starting the application:

```sh
ENV_PATH=/absolute/path/to/.env npm run start
```

## Accessing environment variables

Variables defined in the `.env` file are accessible using `process.env.{variableName}` anywhere in configuration and application files.

In configuration files, a `env()` utility allows defining defaults and [casting values](#casting-environment-variables):

</Tabs>

:::note
The syntax `property-name: env('VAR', 'default-value')` uses the value stored in the `.env` file. If there is no specified value in the `.env` file the default value is used.
:::

## Casting environment variables

The `env()` utility can be used to cast environment variables to different types:

```js
// Returns the env if defined without casting it
env('VAR', 'default');

// Cast to integer (using parseInt)
env.int('VAR', 0);

// Cast to float (using parseFloat)
env.float('VAR', 3.14);

// Cast to boolean (check if the value is equal to 'true')
env.bool('VAR', true);

// Cast to JS object (using JSON.parse)
env.json('VAR', { key: 'value' });

// Cast to array (syntax: ENV_VAR=[value1, value2, value3] | ENV_VAR=["value1", "value2", "value3"])
env.array('VAR', [1, 2, 3]);

// Cast to date (using new Date(value))
env.date('VAR', new Date());

// Returns the env matching oneOf union types
env.oneOf('UPLOAD_PROVIDER', ['local', 'aws'], 'local')
```



# Access configuration values from the code
Source: https://docs-v4.strapi.io/dev-docs/configurations/guides/access-configuration-values

# How to access to configuration values from the code

All the [configuration files](/dev-docs/configurations) are loaded on startup and can be accessed through the `strapi.config` configuration provider.

If the `/config/server.js` file has the following configuration:

  ```js
  module.exports = {
    host: '0.0.0.0',
  };
  ```

then the `server.host` key can be accessed as:

  ```js
  strapi.config.get('server.host', 'defaultValueIfUndefined');
  ```

Nested keys are accessible with the [dot notation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Property_accessors#dot_notation).

:::note
The filename is used as a prefix to access the configurations.
:::

Configuration files can either be `.js` or `.json` files.

When using a `.js` file, the configuration can be exported:

- either as an object:

  ```js
  module.exports = {
    mySecret: 'someValue',
  };
  ```

- or as a function returning a configuration object (recommended usage). The function will get access to the [`env` utility](#casting-environment-variables):

  ```js
  module.exports = ({ env }) => {
    return {
      mySecret: 'someValue',
    };
  };
  ```



# Middlewares
Source: https://docs-v4.strapi.io/dev-docs/configurations/middlewares

# Middlewares configuration

:::strapi Different types of middlewares

In Strapi, 2 middleware concepts coexist:

- **Global middlewares** are configured and enabled as global middlewares for the entire Strapi server application. The present documentation describes how to configure global middlewares.<br/>Strapi also offers the ability to implement your own custom middlewares (see [middlewares customization documentation](/dev-docs//backend-customization/middlewares.md)).

- **Route middlewares** have a more limited scope and are configured and used as middlewares at the route level. They are described in the [route middlewares documentation](/dev-docs/backend-customization/routes.md#middlewares).

:::

The `./config/middlewares.js` file is used to define all the global middlewares that should be applied by the Strapi server.

Only the middlewares present in `./config/middlewares.js` are applied. Loading middlewares happens in a specific [loading order](#loading-order), with some [naming conventions](#naming-conventions) and an [optional configuration](#optional-configuration) for each middleware.

Strapi pre-populates the `./config/middlewares.js` file with built-in, internal middlewares that all have their own [configuration options](#internal-middlewares-configuration-reference).

## Loading order

The `./config/middlewares.js` file exports an array, where order matters and controls the execution order of the middleware stack:

</Tabs>

:::tip
If you aren't sure where to place a middleware in the stack, add it to the end of the list.
:::

## Naming conventions

Global middlewares can be classified into different types depending on their origin, which defines the following naming conventions:

| Middleware type   | Origin                                                                                                                                                                                                                                  | Naming convention                                                                                                    |
|-------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|----------------------------------------------------------------------------------------------------------------------|
| Internal          | Built-in middlewares (i.e. included with Strapi), automatically loaded                                                                                                                                                                  | `strapi::middleware-name`                                                                                            |
| Application-level | Loaded from the `./src/middlewares` folder                                                                                                                                                                                              | `global::middleware-name`                                                                                            |
| API-level         | Loaded from the `./src/api/[api-name]/middlewares` folder                                                                                                                                                                               | `api::api-name.middleware-name`                                                                                      |
| Plugin            | Exported from `strapi-server.js` in the [`middlewares` property of the plugin interface](/dev-docs/api/plugins/server-api.md#middlewares)                                                                                               | `plugin::plugin-name.middleware-name`                                                                                |
| External          | Can be:<ul><li>either node modules installed with [npm](https://www.npmjs.com/search?q=strapi-middleware)</li><li>or local middlewares (i.e. custom middlewares created locally and configured in `./config/middlewares.js`.)</li></ul> | -<br/><br/>As they are directly configured and resolved from the configuration file, they have no naming convention. |

## Optional configuration

Middlewares can have an optional configuration with the following parameters:

| Parameter | Description                                                       | Type     |
|-----------|-------------------------------------------------------------------|----------|
| `config`  | Used to define or override the middleware configuration           | `Object` |
| `resolve` | Path to the middleware's folder (useful for external middlewares) | `String` |

## Internal middlewares configuration reference

Strapi's core includes the following internal middlewares, mostly used for performances, security and error handling:

| Middleware                                                         | Added by Default | Required |
|--------------------------------------------------------------------|------------------|----------|
| [body](#body)                                                      | Yes              | Yes      |
| [compression](#compression)                                        | No               | No       |
| [cors](#cors)                                                      | Yes              | Yes      |
| [errors](#errors)                                                  | Yes              | Yes      |
| [favicon](#favicon)                                                | Yes              | Yes      |
| [ip](#ip)                                                          | No               | No       |
| [logger](#logger)                                                  | Yes              | No       |
| [poweredBy](#poweredby)                                            | Yes              | No       |
| [query](#query)                                                    | Yes              | Yes      |
| [response-time](#response-time)                                    | No               | No       |
| [responses](/dev-docs/backend-customization/requests-responses.md) | Yes              | Yes      |
| [public](#public)                                                  | Yes              | Yes      |
| [security](#security)                                              | Yes              | Yes      |
| [session](#session)                                                | Yes              | No       |

### `body`

The `body` middleware is based on [koa-body](https://github.com/koajs/koa-body). It accepts the following options:

| Option       | Description                                                                                                                             | Type                  | Default     |
|--------------|-----------------------------------------------------------------------------------------------------------------------------------------|-----------------------|-------------|
| `multipart`  | Parse multipart bodies                                                                                                                  | `Boolean`             | `true`      |
| `patchKoa`   | Patch request body to Koa's `ctx.request`                                                                                               | `Boolean`             | `true`      |
| `jsonLimit`  | The byte (if integer) limit of the JSON body                                                                                            | `String` or `Integer` | `1mb`       |
| `formLimit`  | The byte (if integer) limit of the form body                                                                                            | `String` or `Integer` | `56kb`      |
| `textLimit`  | The byte (if integer) limit of the text body                                                                                            | `String` or `Integer` | `56kb`      |
| `encoding`   | Sets encoding for incoming form fields                                                                                                  | `String`              | `utf-8`     |
| `formidable` | Options to pass to the `formidable` multipart parser (see [node-formidable documentation](https://github.com/felixge/node-formidable)). | `Object`              | `undefined` |

For a full list of available options for `koa-body`, check the [koa-body documentation](https://github.com/koajs/koa-body#options).

<details>
<summary> Example: Custom configuration for the body middleware </summary>

</Tabs>

</details>

### `compression`

The `compression` middleware is based on [koa-compress](https://github.com/koajs/compress). It accepts the following options:

| Option            | Description                                                                | Type                  | Default    |
|-------------------|----------------------------------------------------------------------------|-----------------------|------------|
| `threshold`       | Minimum response size in bytes to compress                                 | `String` or `Integer` | `1kb`      |
| `br`              | Toggle Brotli compression                                                  | `Boolean`             | `true`     |
| `gzip`            | Toggle gzip compression                                                    | `Boolean`             | `false`    |
| `deflate`         | Toggle deflate compression                                                 | `Boolean`             | `false`    |
| `defaultEncoding` | Specifies what encoders to use for requests without Accept-Encoding header | `String`              | `identity` |

<details> 
<summary>Example: Custom configuration for the compression middleware</summary>

</Tabs>

</details>

### `cors`

This security middleware is about cross-origin resource sharing (CORS) and is based on [@koa/cors](https://github.com/koajs/cors). It accepts the following options:

| Option              | Type                                                      | Description          | Default value                                              |
|---------------------|-----------------------------------------------------------|----------------------|------------------------------------------------------------|
| `origin`            | Configure the `Access-Control-Allow-Origin` header        | `String` or `Array`  | `'*'`                                                      |
| `maxAge`            | Configure the `Access-Control-Max-Age` header, in seconds | `String` or `Number` | `31536000`                                                 |
| `credentials`       | Configure the `Access-Control-Allow-Credentials` header   | `Boolean`            | `true`                                                     |
| `methods`           | Configure the `Access-Control-Allow-Methods` header       | `Array` or `String`  | `['GET', 'POST', 'PUT', 'DELETE', 'HEAD', 'OPTIONS']`      |
| `headers`           | Configure the `Access-Control-Allow-Headers` header       | `Array` or `String`  | Request headers passed in `Access-Control-Request-Headers` |
| `keepHeaderOnError` | Add set headers to `err.header` if an error is thrown     | `Boolean`            | `false`                                                    |

<details>
<summary> Example: Custom configuration for the cors middleware</summary>

</Tabs>

</details>

### `errors`

The errors middleware handles [errors](/dev-docs/error-handling.md) thrown by the code. Based on the type of error it sets the appropriate HTTP status to the response. By default, any error not supposed to be exposed to the end user will result in a 500 HTTP response.

The middleware doesn't have any configuration options.

### `favicon`

The `favicon` middleware serves the favicon and is based on [koa-favicon](https://github.com/koajs/favicon). It accepts the following options:

| Option   | Description                                      | Type      | Default value   |
|----------|--------------------------------------------------|-----------|-----------------|
| `path`   | Path to the favicon file                         | `String`  | `'favicon.ico'` |
| `maxAge` | Cache-control max-age directive, in milliseconds | `Integer` | `86400000`      |

<details>
<summary> Example: Custom configuration for the favicon middleware</summary>

</Tabs>

</details>

#### `ip`

The `ip` middleware is an IP filter middleware based on [koa-ip](https://github.com/nswbmw/koa-ip). It accepts the following options:

| Option      | Description     | Type    | Default value |
|-------------|-----------------|---------|---------------|
| `whitelist` | Whitelisted IPs | `Array` | `[]`          |
| `blacklist` | Blacklisted IPs | `Array` | `[]`          |

:::tip
The `whitelist` and `blacklist` options support wildcards (e.g. `whitelist: ['192.168.0.*', '127.0.0.*']`) and spreads (e.g. `whitelist: ['192.168.*.[3-10]']`).
:::

 <details>
 <summary> Example: Custom configuration for the ip middleware</summary>

</Tabs>

</details>

### `logger`

The `logger` middleware is used to log requests.

To define a custom configuration for the `logger` middleware, create a dedicated configuration file (`./config/logger.js`). It should export an object that must be a complete or partial [winstonjs](https://github.com/winstonjs/winston) logger configuration. The object will be merged with Strapi's default logger configuration on server start.

<details>
<summary> Example: Custom configuration for the logger middleware</summary>

</Tabs>

</details>

### `poweredBy`

The `poweredBy` middleware adds a `X-Powered-By` parameter to the response header. It accepts the following options:

| Option      | Description                        | Type     | Default value          |
|-------------|------------------------------------|----------|------------------------|
| `poweredBy` | Value of the `X-Powered-By` header | `String` | `'Strapi <strapi.io>'` |

<details>
<summary> details Example: Custom configuration for the poweredBy middleware</summary>

</Tabs>

</details>

### `query`

The `query` middleware is a query parser based on [qs](https://github.com/ljharb/qs). It accepts the following options:

| Option               | Description                                                                                                                      | Type      | Default value |
|----------------------|----------------------------------------------------------------------------------------------------------------------------------|-----------|---------------|
| `strictNullHandling` | Distinguish between null values and empty strings (see [qs documentation](https://github.com/ljharb/qs#handling-of-null-values)) | `Boolean` | `true`        |
| `arrayLimit`         | Maximum index limit when parsing arrays (see [qs documentation](https://github.com/ljharb/qs#parsing-arrays))                    | `Number`  | `100`         |
| `depth`              | Maximum depth of nested objects when parsing objects (see [qs documentation](https://github.com/ljharb/qs#parsing-objects))      | `Number`  | `20`          |

<details>
<summary> Example: Custom configuration for the query middleware </summary>

</Tabs>

</details>

### `response-time`

The `response-time` middleware enables the `X-Response-Time` (in milliseconds) for the response header.

The middleware doesn't have any configuration options.

### `public`

The `public` middleware is a static file serving middleware, based on [koa-static](https://github.com/koajs/static). It accepts the following options:

| Option         | Description                                         | Type      | Default value |
|----------------|-----------------------------------------------------|-----------|---------------|
| `maxAge`       | Cache-control max-age directive, in milliseconds    | `Integer` | `60000`       |
| `defaultIndex` | Display default index page at `/` and `/index.html` | `Boolean` | `true`        |

:::tip
You can customize the path of the public folder by editing the [server configuration file](/dev-docs/configurations/server.md#available-options).
:::

<details>
<summary>Example: Custom configuration for the public middleware</summary>

</Tabs>

</details>

### `security`

The security middleware is based on [koa-helmet](https://helmetjs.github.io/). It accepts the following options:

| Option                      | Description                                                                                   | Type                  | Default value |
|-----------------------------|-----------------------------------------------------------------------------------------------|-----------------------|---------------|
| `crossOriginEmbedderPolicy` | Set the `Cross-Origin-Embedder-Policy` header to `require-corp`                               | `Boolean`             | `false`       |
| `crossOriginOpenerPolicy`   | Set the `Cross-Origin-Opener-Policy` header                                                   | `Boolean`             | `false`       |
| `crossOriginResourcePolicy` | Set the `Cross-Origin-Resource-Policy` header                                                 | `Boolean`             | `false`       |
| `originAgentCluster`        | Set the `Origin-Agent-Cluster` header                                                         | `Boolean`             | `false`       |
| `contentSecurityPolicy`     | Set the `Content-Security-Policy` header                                                      | `Object`              | `-`           |
| `xssFilter`                 | Disable browsers' cross-site scripting filter by setting the `X-XSS-Protection` header to `0` | `Boolean`             | `false`       |
| `hsts`                      | Set options for the HTTP Strict Transport Security (HSTS) policy.                             | `Object`              | -             |
| `hsts.maxAge`               | Number of seconds HSTS is in effect                                                           | `Integer`             | `31536000`    |
| `hsts.includeSubDomains`    | Applies HSTS to all subdomains of the host                                                    | `Boolean`             | `true`        |
| `frameguard`                | Set `X-Frame-Options` header to help mitigate clickjacking attacks, set to `false` to disable | `Boolean` or `Object` | -             |
| `frameguard.action`         | Value must be either `deny` or `sameorigin`                                                   | `String`              | `sameorigin`  |

:::tip
When using any 3rd party upload provider, generally it's required to set a custom configuration here. Please see the provider documentation for which configuration options are required.
:::

:::note
The default directives include a `market-assets.strapi.io` value. This value is set for the [in-app market](/user-docs/plugins/installing-plugins-via-marketplace) and is safe to keep.
:::

<details>
<summary> Example: Custom configuration for the security middleware for using the AWS-S3 provider</summary>

</Tabs>

</details>

### `session`

The `session` middleware allows the use of cookie-based sessions, based on [koa-session](https://github.com/koajs/session). It accepts the following options:

| Option       | Description                                                                                                            | Type                     | Default value                           |
|--------------|------------------------------------------------------------------------------------------------------------------------|--------------------------|-----------------------------------------|
| `key`        | Cookie key                                                                                                             | `String`                 | `'koa.sess'`                            |
| `maxAge`     | Maximum lifetime of the cookies, in milliseconds. Using `'session'` will expire the cookie when the session is closed. | `Integer` or `'session'` | `86400000`                              |
| `autoCommit` | Automatically commit headers                                                                                           | `Boolean`                | `true`                                  |
| `overwrite`  | Can overwrite or not                                                                                                   | `Boolean`                | `true`                                  |
| `httpOnly`   | Is httpOnly or not. Using `httpOnly` helps mitigate cross-site scripting (XSS) attacks.                                | `Boolean`                | `true`                                  |
| `signed`     | Sign the cookies                                                                                                       | `Boolean`                | `true`                                  |
| `rolling`    | Force a session identifier cookie to be set on every response.                                                         | `Boolean`                | `false`                                 |
| `renew`      | Renew the session when the session is nearly expired, so the user keeps being logged in.                               | `Boolean`                | `false`                                 |
| `secure`     | Force the use of HTTPS                                                                                                 | `Boolean`                | `true` in production, `false` otherwise |
| `sameSite`   | Restrict the cookies to a first-party or same-site context                                                             | `String`                 | `null`                                  |

<details>
<summary> Example: Custom configuration for the session middleware </summary>

</Tabs>

</details>



# Middlewares
Source: https://docs-v4.strapi.io/dev-docs/configurations/middlewares

# Middlewares configuration

:::strapi Different types of middlewares

In Strapi, 2 middleware concepts coexist:

- **Global middlewares** are configured and enabled as global middlewares for the entire Strapi server application. The present documentation describes how to configure global middlewares.<br/>Strapi also offers the ability to implement your own custom middlewares (see [middlewares customization documentation](/dev-docs//backend-customization/middlewares.md)).

- **Route middlewares** have a more limited scope and are configured and used as middlewares at the route level. They are described in the [route middlewares documentation](/dev-docs/backend-customization/routes.md#middlewares).

:::

The `./config/middlewares.js` file is used to define all the global middlewares that should be applied by the Strapi server.

Only the middlewares present in `./config/middlewares.js` are applied. Loading middlewares happens in a specific [loading order](#loading-order), with some [naming conventions](#naming-conventions) and an [optional configuration](#optional-configuration) for each middleware.

Strapi pre-populates the `./config/middlewares.js` file with built-in, internal middlewares that all have their own [configuration options](#internal-middlewares-configuration-reference).

## Loading order

The `./config/middlewares.js` file exports an array, where order matters and controls the execution order of the middleware stack:

</Tabs>

:::tip
If you aren't sure where to place a middleware in the stack, add it to the end of the list.
:::

## Naming conventions

Global middlewares can be classified into different types depending on their origin, which defines the following naming conventions:

| Middleware type   | Origin                                                                                                                                                                                                                                  | Naming convention                                                                                                    |
|-------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|----------------------------------------------------------------------------------------------------------------------|
| Internal          | Built-in middlewares (i.e. included with Strapi), automatically loaded                                                                                                                                                                  | `strapi::middleware-name`                                                                                            |
| Application-level | Loaded from the `./src/middlewares` folder                                                                                                                                                                                              | `global::middleware-name`                                                                                            |
| API-level         | Loaded from the `./src/api/[api-name]/middlewares` folder                                                                                                                                                                               | `api::api-name.middleware-name`                                                                                      |
| Plugin            | Exported from `strapi-server.js` in the [`middlewares` property of the plugin interface](/dev-docs/api/plugins/server-api.md#middlewares)                                                                                               | `plugin::plugin-name.middleware-name`                                                                                |
| External          | Can be:<ul><li>either node modules installed with [npm](https://www.npmjs.com/search?q=strapi-middleware)</li><li>or local middlewares (i.e. custom middlewares created locally and configured in `./config/middlewares.js`.)</li></ul> | -<br/><br/>As they are directly configured and resolved from the configuration file, they have no naming convention. |

## Optional configuration

Middlewares can have an optional configuration with the following parameters:

| Parameter | Description                                                       | Type     |
|-----------|-------------------------------------------------------------------|----------|
| `config`  | Used to define or override the middleware configuration           | `Object` |
| `resolve` | Path to the middleware's folder (useful for external middlewares) | `String` |

## Internal middlewares configuration reference

Strapi's core includes the following internal middlewares, mostly used for performances, security and error handling:

| Middleware                                                         | Added by Default | Required |
|--------------------------------------------------------------------|------------------|----------|
| [body](#body)                                                      | Yes              | Yes      |
| [compression](#compression)                                        | No               | No       |
| [cors](#cors)                                                      | Yes              | Yes      |
| [errors](#errors)                                                  | Yes              | Yes      |
| [favicon](#favicon)                                                | Yes              | Yes      |
| [ip](#ip)                                                          | No               | No       |
| [logger](#logger)                                                  | Yes              | No       |
| [poweredBy](#poweredby)                                            | Yes              | No       |
| [query](#query)                                                    | Yes              | Yes      |
| [response-time](#response-time)                                    | No               | No       |
| [responses](/dev-docs/backend-customization/requests-responses.md) | Yes              | Yes      |
| [public](#public)                                                  | Yes              | Yes      |
| [security](#security)                                              | Yes              | Yes      |
| [session](#session)                                                | Yes              | No       |

### `body`

The `body` middleware is based on [koa-body](https://github.com/koajs/koa-body). It accepts the following options:

| Option       | Description                                                                                                                             | Type                  | Default     |
|--------------|-----------------------------------------------------------------------------------------------------------------------------------------|-----------------------|-------------|
| `multipart`  | Parse multipart bodies                                                                                                                  | `Boolean`             | `true`      |
| `patchKoa`   | Patch request body to Koa's `ctx.request`                                                                                               | `Boolean`             | `true`      |
| `jsonLimit`  | The byte (if integer) limit of the JSON body                                                                                            | `String` or `Integer` | `1mb`       |
| `formLimit`  | The byte (if integer) limit of the form body                                                                                            | `String` or `Integer` | `56kb`      |
| `textLimit`  | The byte (if integer) limit of the text body                                                                                            | `String` or `Integer` | `56kb`      |
| `encoding`   | Sets encoding for incoming form fields                                                                                                  | `String`              | `utf-8`     |
| `formidable` | Options to pass to the `formidable` multipart parser (see [node-formidable documentation](https://github.com/felixge/node-formidable)). | `Object`              | `undefined` |

For a full list of available options for `koa-body`, check the [koa-body documentation](https://github.com/koajs/koa-body#options).

<details>
<summary> Example: Custom configuration for the body middleware </summary>

</Tabs>

</details>

### `compression`

The `compression` middleware is based on [koa-compress](https://github.com/koajs/compress). It accepts the following options:

| Option            | Description                                                                | Type                  | Default    |
|-------------------|----------------------------------------------------------------------------|-----------------------|------------|
| `threshold`       | Minimum response size in bytes to compress                                 | `String` or `Integer` | `1kb`      |
| `br`              | Toggle Brotli compression                                                  | `Boolean`             | `true`     |
| `gzip`            | Toggle gzip compression                                                    | `Boolean`             | `false`    |
| `deflate`         | Toggle deflate compression                                                 | `Boolean`             | `false`    |
| `defaultEncoding` | Specifies what encoders to use for requests without Accept-Encoding header | `String`              | `identity` |

<details> 
<summary>Example: Custom configuration for the compression middleware</summary>

</Tabs>

</details>

### `cors`

This security middleware is about cross-origin resource sharing (CORS) and is based on [@koa/cors](https://github.com/koajs/cors). It accepts the following options:

| Option              | Type                                                      | Description          | Default value                                              |
|---------------------|-----------------------------------------------------------|----------------------|------------------------------------------------------------|
| `origin`            | Configure the `Access-Control-Allow-Origin` header        | `String` or `Array`  | `'*'`                                                      |
| `maxAge`            | Configure the `Access-Control-Max-Age` header, in seconds | `String` or `Number` | `31536000`                                                 |
| `credentials`       | Configure the `Access-Control-Allow-Credentials` header   | `Boolean`            | `true`                                                     |
| `methods`           | Configure the `Access-Control-Allow-Methods` header       | `Array` or `String`  | `['GET', 'POST', 'PUT', 'DELETE', 'HEAD', 'OPTIONS']`      |
| `headers`           | Configure the `Access-Control-Allow-Headers` header       | `Array` or `String`  | Request headers passed in `Access-Control-Request-Headers` |
| `keepHeaderOnError` | Add set headers to `err.header` if an error is thrown     | `Boolean`            | `false`                                                    |

<details>
<summary> Example: Custom configuration for the cors middleware</summary>

</Tabs>

</details>

### `errors`

The errors middleware handles [errors](/dev-docs/error-handling.md) thrown by the code. Based on the type of error it sets the appropriate HTTP status to the response. By default, any error not supposed to be exposed to the end user will result in a 500 HTTP response.

The middleware doesn't have any configuration options.

### `favicon`

The `favicon` middleware serves the favicon and is based on [koa-favicon](https://github.com/koajs/favicon). It accepts the following options:

| Option   | Description                                      | Type      | Default value   |
|----------|--------------------------------------------------|-----------|-----------------|
| `path`   | Path to the favicon file                         | `String`  | `'favicon.ico'` |
| `maxAge` | Cache-control max-age directive, in milliseconds | `Integer` | `86400000`      |

<details>
<summary> Example: Custom configuration for the favicon middleware</summary>

</Tabs>

</details>

#### `ip`

The `ip` middleware is an IP filter middleware based on [koa-ip](https://github.com/nswbmw/koa-ip). It accepts the following options:

| Option      | Description     | Type    | Default value |
|-------------|-----------------|---------|---------------|
| `whitelist` | Whitelisted IPs | `Array` | `[]`          |
| `blacklist` | Blacklisted IPs | `Array` | `[]`          |

:::tip
The `whitelist` and `blacklist` options support wildcards (e.g. `whitelist: ['192.168.0.*', '127.0.0.*']`) and spreads (e.g. `whitelist: ['192.168.*.[3-10]']`).
:::

 <details>
 <summary> Example: Custom configuration for the ip middleware</summary>

</Tabs>

</details>

### `logger`

The `logger` middleware is used to log requests.

To define a custom configuration for the `logger` middleware, create a dedicated configuration file (`./config/logger.js`). It should export an object that must be a complete or partial [winstonjs](https://github.com/winstonjs/winston) logger configuration. The object will be merged with Strapi's default logger configuration on server start.

<details>
<summary> Example: Custom configuration for the logger middleware</summary>

</Tabs>

</details>

### `poweredBy`

The `poweredBy` middleware adds a `X-Powered-By` parameter to the response header. It accepts the following options:

| Option      | Description                        | Type     | Default value          |
|-------------|------------------------------------|----------|------------------------|
| `poweredBy` | Value of the `X-Powered-By` header | `String` | `'Strapi <strapi.io>'` |

<details>
<summary> details Example: Custom configuration for the poweredBy middleware</summary>

</Tabs>

</details>

### `query`

The `query` middleware is a query parser based on [qs](https://github.com/ljharb/qs). It accepts the following options:

| Option               | Description                                                                                                                      | Type      | Default value |
|----------------------|----------------------------------------------------------------------------------------------------------------------------------|-----------|---------------|
| `strictNullHandling` | Distinguish between null values and empty strings (see [qs documentation](https://github.com/ljharb/qs#handling-of-null-values)) | `Boolean` | `true`        |
| `arrayLimit`         | Maximum index limit when parsing arrays (see [qs documentation](https://github.com/ljharb/qs#parsing-arrays))                    | `Number`  | `100`         |
| `depth`              | Maximum depth of nested objects when parsing objects (see [qs documentation](https://github.com/ljharb/qs#parsing-objects))      | `Number`  | `20`          |

<details>
<summary> Example: Custom configuration for the query middleware </summary>

</Tabs>

</details>

### `response-time`

The `response-time` middleware enables the `X-Response-Time` (in milliseconds) for the response header.

The middleware doesn't have any configuration options.

### `public`

The `public` middleware is a static file serving middleware, based on [koa-static](https://github.com/koajs/static). It accepts the following options:

| Option         | Description                                         | Type      | Default value |
|----------------|-----------------------------------------------------|-----------|---------------|
| `maxAge`       | Cache-control max-age directive, in milliseconds    | `Integer` | `60000`       |
| `defaultIndex` | Display default index page at `/` and `/index.html` | `Boolean` | `true`        |

:::tip
You can customize the path of the public folder by editing the [server configuration file](/dev-docs/configurations/server.md#available-options).
:::

<details>
<summary>Example: Custom configuration for the public middleware</summary>

</Tabs>

</details>

### `security`

The security middleware is based on [koa-helmet](https://helmetjs.github.io/). It accepts the following options:

| Option                      | Description                                                                                   | Type                  | Default value |
|-----------------------------|-----------------------------------------------------------------------------------------------|-----------------------|---------------|
| `crossOriginEmbedderPolicy` | Set the `Cross-Origin-Embedder-Policy` header to `require-corp`                               | `Boolean`             | `false`       |
| `crossOriginOpenerPolicy`   | Set the `Cross-Origin-Opener-Policy` header                                                   | `Boolean`             | `false`       |
| `crossOriginResourcePolicy` | Set the `Cross-Origin-Resource-Policy` header                                                 | `Boolean`             | `false`       |
| `originAgentCluster`        | Set the `Origin-Agent-Cluster` header                                                         | `Boolean`             | `false`       |
| `contentSecurityPolicy`     | Set the `Content-Security-Policy` header                                                      | `Object`              | `-`           |
| `xssFilter`                 | Disable browsers' cross-site scripting filter by setting the `X-XSS-Protection` header to `0` | `Boolean`             | `false`       |
| `hsts`                      | Set options for the HTTP Strict Transport Security (HSTS) policy.                             | `Object`              | -             |
| `hsts.maxAge`               | Number of seconds HSTS is in effect                                                           | `Integer`             | `31536000`    |
| `hsts.includeSubDomains`    | Applies HSTS to all subdomains of the host                                                    | `Boolean`             | `true`        |
| `frameguard`                | Set `X-Frame-Options` header to help mitigate clickjacking attacks, set to `false` to disable | `Boolean` or `Object` | -             |
| `frameguard.action`         | Value must be either `deny` or `sameorigin`                                                   | `String`              | `sameorigin`  |

:::tip
When using any 3rd party upload provider, generally it's required to set a custom configuration here. Please see the provider documentation for which configuration options are required.
:::

:::note
The default directives include a `market-assets.strapi.io` value. This value is set for the [in-app market](/user-docs/plugins/installing-plugins-via-marketplace) and is safe to keep.
:::

<details>
<summary> Example: Custom configuration for the security middleware for using the AWS-S3 provider</summary>

</Tabs>

</details>

### `session`

The `session` middleware allows the use of cookie-based sessions, based on [koa-session](https://github.com/koajs/session). It accepts the following options:

| Option       | Description                                                                                                            | Type                     | Default value                           |
|--------------|------------------------------------------------------------------------------------------------------------------------|--------------------------|-----------------------------------------|
| `key`        | Cookie key                                                                                                             | `String`                 | `'koa.sess'`                            |
| `maxAge`     | Maximum lifetime of the cookies, in milliseconds. Using `'session'` will expire the cookie when the session is closed. | `Integer` or `'session'` | `86400000`                              |
| `autoCommit` | Automatically commit headers                                                                                           | `Boolean`                | `true`                                  |
| `overwrite`  | Can overwrite or not                                                                                                   | `Boolean`                | `true`                                  |
| `httpOnly`   | Is httpOnly or not. Using `httpOnly` helps mitigate cross-site scripting (XSS) attacks.                                | `Boolean`                | `true`                                  |
| `signed`     | Sign the cookies                                                                                                       | `Boolean`                | `true`                                  |
| `rolling`    | Force a session identifier cookie to be set on every response.                                                         | `Boolean`                | `false`                                 |
| `renew`      | Renew the session when the session is nearly expired, so the user keeps being logged in.                               | `Boolean`                | `false`                                 |
| `secure`     | Force the use of HTTPS                                                                                                 | `Boolean`                | `true` in production, `false` otherwise |
| `sameSite`   | Restrict the cookies to a first-party or same-site context                                                             | `String`                 | `null`                                  |

<details>
<summary> Example: Custom configuration for the session middleware </summary>

</Tabs>

</details>



# Plugins configuration
Source: https://docs-v4.strapi.io/dev-docs/configurations/plugins

# Plugins configuration

Plugin configurations are stored in `/config/plugins.js|ts` (see [project structure](/dev-docs/project-structure)). Each plugin can be configured with the following available parameters:

| Parameter                  | Description                                                                                                                                                            | Type    |
| -------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------- |
| `enabled`                  | Enable (`true`) or disable (`false`) an installed plugin                                                                                                               | Boolean |
| `config`<br/><br/>_Optional_ | Used to override default plugin configuration ([defined in strapi-server.js](/dev-docs/api/plugins/server-api#configuration)) | Object  |
| `resolve`<br/> _Optional, only required for local plugins_             | Path to the plugin's folder                                                                                                                                            | String  |

:::note
Some features of Strapi are provided by plugins and the following plugins can also have specific configuration options: [GraphQL](#graphql-configuration) and [Upload](#upload-configuration).
:::

**Basic example custom configuration for plugins:**

</Tabs>

:::tip
If no specific configuration is required, a plugin can also be declared with the shorthand syntax `'plugin-name': true`.
:::

## GraphQL configuration

The [GraphQL plugin](/dev-docs/plugins/graphql) has the following specific configuration options that should be declared in a `graphql.config` object within the `config/plugins` file. All parameters are optional:

| Parameter          | Description                                                                                                                                                   | Type    | Default |
| ------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------- | ------- |
| `apolloServer`     | Additional configuration for [`ApolloServer`](https://www.apollographql.com/docs/apollo-server/api/apollo-server/#apolloserver).                   | Object  | `{}`    |
| `artifacts`        | Object containing filepaths, defining where to store generated artifacts. Can include the following properties: <ul><li>`schema`: path to the generated GraphQL schema file</li><li>`typegen`: path to generated TypeScript types</li></ul>Only works if `generateArtifacts` is set to `true`.  | Object  | <ul><li>`schema: false`</li><li>`typegen: false`</li></ul> |
| `defaultLimit` | Default value for [the `pagination[limit]` parameter](/dev-docs/api/graphql#pagination-by-offset) used in API calls | Integer | 100 |
| `depthLimit`       | Limits the [complexity of GraphQL queries](https://www.npmjs.com/package/graphql-depth-limit).                                                                 | Integer  | `10`    |
| `endpoint`         | The URL path on which the plugin is exposed | String | `/graphql` |
| `generateArtifacts`| Whether Strapi should automatically generate and output a GraphQL schema file and corresponding TypeScript definitions.<br/><br/>The file system location can be configured through `artifacts`.  | Boolean | `false` |
| `maxLimit`         | Maximum value for [the `pagination[limit]` parameter](/dev-docs/api/graphql#pagination-by-offset) used in API calls                                                                                                              | Integer  | `-1`    |
| `playgroundAlways` | Whether the playground should be publicly exposed.<br/><br/>Enabled by default in if `NODE_ENV` is set to `development`.                                        | Boolean | `false`  |
| `shadowCRUD`       | Whether type definitions for queries, mutations and resolvers based on models should be created automatically (see [Shadow CRUD documentation](/dev-docs/plugins/graphql#shadow-crud)). | Boolean | `true` |

**Example custom configuration**:

</Tabs>

## Upload configuration

The [Upload plugin](/dev-docs/plugins/upload) handles the [Media Library](/user-docs/media-library). When using the default upload provider, the following specific configuration options can be declared in an `upload.config` object within the `config/plugins` file. All parameters are optional:

| Parameter                                   | Description                                                                                                         | Type    | Default |
| ------------------------------------------- | ------------------------------------------------------------------------------------------------------------------- | ------- | ------- |
| `providerOptions.localServer`        | Options that will be passed to [koa-static](https://github.com/koajs/static) upon which the Upload server is build.<br/><br/>(See [local server configuration](/dev-docs/plugins/upload#local-server) in Upload documentation for additional details) | Object  | -       |
| `sizeLimit`                                  | Maximum file size in bytes.<br/><br/>(See [max file size configuration](/dev-docs/plugins/upload#max-file-size) in Upload plugin documentation for additional information) | Integer | `209715200`<br/><br/>(200 MB in bytes, i.e., 200 x 1024 x 1024 bytes) |
| `breakpoints`             | Allows to override the breakpoints sizes at which responsive images are generated when the "Responsive friendly upload" option is set to `true`.<br/><br/>(See [responsive images configuration](/dev-docs/plugins/upload#responsive-images) in Upload plugin documentation for additional information) | Object | `{ large: 1000, medium: 750, small: 500 }` |

:::note Notes
* Some configuration options can also be set directly from the Admin Panel (see [User Guide](/user-docs/settings/media-library-settings)).
* The Upload request timeout is defined in the server options, not in the Upload plugin options, as it's not specific to the Upload plugin but is applied to the whole Strapi server instance. See [upload request timeout configuration](/dev-docs/plugins/upload#upload-request-timeout) in the Upload documentation for additional details.
* When using a different upload provider, additional configuration options might be available. For Upload providers maintained by Strapi, see the [Amazon S3 provider](https://market.strapi.io/providers/@strapi-provider-upload-aws-s3) and [Cloudinary provider](https://market.strapi.io/providers/@strapi-provider-upload-cloudinary) documentations for additional information about available options.
:::

**Example custom configuration**:

The following is an example of a custom configuration for the Upload plugin when using the default upload provider:

</Tabs>



# Plugins configuration
Source: https://docs-v4.strapi.io/dev-docs/configurations/plugins

# Plugins configuration

Plugin configurations are stored in `/config/plugins.js|ts` (see [project structure](/dev-docs/project-structure)). Each plugin can be configured with the following available parameters:

| Parameter                  | Description                                                                                                                                                            | Type    |
| -------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------- |
| `enabled`                  | Enable (`true`) or disable (`false`) an installed plugin                                                                                                               | Boolean |
| `config`<br/><br/>_Optional_ | Used to override default plugin configuration ([defined in strapi-server.js](/dev-docs/api/plugins/server-api#configuration)) | Object  |
| `resolve`<br/> _Optional, only required for local plugins_             | Path to the plugin's folder                                                                                                                                            | String  |

:::note
Some features of Strapi are provided by plugins and the following plugins can also have specific configuration options: [GraphQL](#graphql-configuration) and [Upload](#upload-configuration).
:::

**Basic example custom configuration for plugins:**

</Tabs>

:::tip
If no specific configuration is required, a plugin can also be declared with the shorthand syntax `'plugin-name': true`.
:::

## GraphQL configuration

The [GraphQL plugin](/dev-docs/plugins/graphql) has the following specific configuration options that should be declared in a `graphql.config` object within the `config/plugins` file. All parameters are optional:

| Parameter          | Description                                                                                                                                                   | Type    | Default |
| ------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------- | ------- |
| `apolloServer`     | Additional configuration for [`ApolloServer`](https://www.apollographql.com/docs/apollo-server/api/apollo-server/#apolloserver).                   | Object  | `{}`    |
| `artifacts`        | Object containing filepaths, defining where to store generated artifacts. Can include the following properties: <ul><li>`schema`: path to the generated GraphQL schema file</li><li>`typegen`: path to generated TypeScript types</li></ul>Only works if `generateArtifacts` is set to `true`.  | Object  | <ul><li>`schema: false`</li><li>`typegen: false`</li></ul> |
| `defaultLimit` | Default value for [the `pagination[limit]` parameter](/dev-docs/api/graphql#pagination-by-offset) used in API calls | Integer | 100 |
| `depthLimit`       | Limits the [complexity of GraphQL queries](https://www.npmjs.com/package/graphql-depth-limit).                                                                 | Integer  | `10`    |
| `endpoint`         | The URL path on which the plugin is exposed | String | `/graphql` |
| `generateArtifacts`| Whether Strapi should automatically generate and output a GraphQL schema file and corresponding TypeScript definitions.<br/><br/>The file system location can be configured through `artifacts`.  | Boolean | `false` |
| `maxLimit`         | Maximum value for [the `pagination[limit]` parameter](/dev-docs/api/graphql#pagination-by-offset) used in API calls                                                                                                              | Integer  | `-1`    |
| `playgroundAlways` | Whether the playground should be publicly exposed.<br/><br/>Enabled by default in if `NODE_ENV` is set to `development`.                                        | Boolean | `false`  |
| `shadowCRUD`       | Whether type definitions for queries, mutations and resolvers based on models should be created automatically (see [Shadow CRUD documentation](/dev-docs/plugins/graphql#shadow-crud)). | Boolean | `true` |

**Example custom configuration**:

</Tabs>

## Upload configuration

The [Upload plugin](/dev-docs/plugins/upload) handles the [Media Library](/user-docs/media-library). When using the default upload provider, the following specific configuration options can be declared in an `upload.config` object within the `config/plugins` file. All parameters are optional:

| Parameter                                   | Description                                                                                                         | Type    | Default |
| ------------------------------------------- | ------------------------------------------------------------------------------------------------------------------- | ------- | ------- |
| `providerOptions.localServer`        | Options that will be passed to [koa-static](https://github.com/koajs/static) upon which the Upload server is build.<br/><br/>(See [local server configuration](/dev-docs/plugins/upload#local-server) in Upload documentation for additional details) | Object  | -       |
| `sizeLimit`                                  | Maximum file size in bytes.<br/><br/>(See [max file size configuration](/dev-docs/plugins/upload#max-file-size) in Upload plugin documentation for additional information) | Integer | `209715200`<br/><br/>(200 MB in bytes, i.e., 200 x 1024 x 1024 bytes) |
| `breakpoints`             | Allows to override the breakpoints sizes at which responsive images are generated when the "Responsive friendly upload" option is set to `true`.<br/><br/>(See [responsive images configuration](/dev-docs/plugins/upload#responsive-images) in Upload plugin documentation for additional information) | Object | `{ large: 1000, medium: 750, small: 500 }` |

:::note Notes
* Some configuration options can also be set directly from the Admin Panel (see [User Guide](/user-docs/settings/media-library-settings)).
* The Upload request timeout is defined in the server options, not in the Upload plugin options, as it's not specific to the Upload plugin but is applied to the whole Strapi server instance. See [upload request timeout configuration](/dev-docs/plugins/upload#upload-request-timeout) in the Upload documentation for additional details.
* When using a different upload provider, additional configuration options might be available. For Upload providers maintained by Strapi, see the [Amazon S3 provider](https://market.strapi.io/providers/@strapi-provider-upload-aws-s3) and [Cloudinary provider](https://market.strapi.io/providers/@strapi-provider-upload-cloudinary) documentations for additional information about available options.
:::

**Example custom configuration**:

The following is an example of a custom configuration for the Upload plugin when using the default upload provider:

</Tabs>



# Public assets configuration
Source: https://docs-v4.strapi.io/dev-docs/configurations/public-assets

# Public assets configuration

Public assets are static files (e.g. images, video, CSS files, etc.) that you want to make accessible to the outside world.

Because an API may need to serve static assets, every new Strapi project includes by default a folder named `/public`. Any file located in this directory is accessible if the request's path doesn't match any other defined route and if it matches a public file name (e.g. an image named `company-logo.png` in `./public/` is accessible through `/company-logo.png` URL).

:::tip
`index.html` files are served if the request corresponds to a folder name (`/pictures` url will try to serve `public/pictures/index.html` file).
:::

:::caution
The dotfiles are not exposed. It means that every file name that starts with `.`, such as `.htaccess` or `.gitignore`, are not served.
:::



# Public assets configuration
Source: https://docs-v4.strapi.io/dev-docs/configurations/public-assets

# Public assets configuration

Public assets are static files (e.g. images, video, CSS files, etc.) that you want to make accessible to the outside world.

Because an API may need to serve static assets, every new Strapi project includes by default a folder named `/public`. Any file located in this directory is accessible if the request's path doesn't match any other defined route and if it matches a public file name (e.g. an image named `company-logo.png` in `./public/` is accessible through `/company-logo.png` URL).

:::tip
`index.html` files are served if the request corresponds to a folder name (`/pictures` url will try to serve `public/pictures/index.html` file).
:::

:::caution
The dotfiles are not exposed. It means that every file name that starts with `.`, such as `.htaccess` or `.gitignore`, are not served.
:::



# Create new Role-Based Access Control (RBAC) conditions
Source: https://docs-v4.strapi.io/dev-docs/configurations/rbac

# Create new Role-Based Access Control (RBAC) conditions

Role-Based Access Control (RBAC) is an approach to restricting access to some users. In a Strapi application, users of the admin panel are administrators. Their roles and permissions are [configured in the admin panel](/user-docs/users-roles-permissions/configuring-administrator-roles).

## Declaring new conditions

Declare a single condition as an object, and multiple conditions as an array of objects. Each condition object can have 5 possible properties:

- `displayName` (string): the condition name as shown in the admin panel,
- `name` (string): the condition name, kebab-cased,
- `category` (string, _optional_): conditions can be grouped into categories available [in the admin panel](/user-docs/users-roles-permissions/configuring-administrator-roles#setting-custom-conditions-for-permissions); if undefined, the condition will appear under the "Default" category,
- `plugin` (string, _optional_): if the condition is created by a plugin, should be the plugin's name, kebab-cased (e.g `content-manager`),
- `handler`: a function used to verify the condition (see [using the condition handler](#using-the-condition-handler))

Declare and register conditions in the global [`bootstrap` function](/dev-docs/configurations/functions#bootstrap) found in `./src/index.js` (see [Registering conditions](#registering-conditions)).

:::note
The condition `name` property acts as a unique id within its namespace, that is either the plugin if the `plugin` property is defined, or the root namespace.
:::

## Using the condition handler

A condition can be applied to any permission, and the condition `handler` is used to verify the condition. The `handler` is a function returning a query object or a boolean value.

Query objects are useful to verify conditions on the entities you read, create, update, delete or publish. They use the [sift.js](https://github.com/crcn/sift.js) library, but only with the following supported operators:

- `$or`
- `$and`
- `$eq`
- `$eqi`
- `$ne`
- `$in`
- `$nin`
- `$lt`
- `$lte`
- `$gt`
- `$gte`
- `$exists`
- `$elemMatch`

The condition `handler` can be a synchronous or asynchronous function that:

- receives the authenticated user making the request,
- and returns `true`, `false`, or a query object.

Returning `true` or `false` is useful to verify an external condition or a condition on the authenticated user.
For instance, a condition that allows access to a page in the admin panel only if server time is 5pm could use this handler:

```js
handler: () => new Date().getHours() === 17;
```

The `handler` function receives the authenticated user, so it can verify conditions on the user:

```js
const condition = {
  displayName: 'Email address from strapi.io',
  name: 'email-strapi-dot-io',
  async handler(user) {
    return user.email.includes('@strapi.io');
  },
};
```

For more granular control, the `handler` function can also return a query object:

```js
const condition = {
  displayName: 'price greater than 50',
  name: 'price-gt-50',
  async handler(user) {
    return { price: { $gt: 50 } };
  },
};
```

## Registering conditions

To be available in the admin panel, conditions should be declared and registered in the global [`bootstrap` function](/dev-docs/configurations/functions#bootstrap) found in `./src/index`. Register a single condition with the `conditionProvider.register()` method:

</Tabs>

To register multiple conditions, defined as an array of [condition objects](#declaring-new-conditions), use `conditionProvider.registerMany()`:

</Tabs>



# Create new Role-Based Access Control (RBAC) conditions
Source: https://docs-v4.strapi.io/dev-docs/configurations/rbac

# Create new Role-Based Access Control (RBAC) conditions

Role-Based Access Control (RBAC) is an approach to restricting access to some users. In a Strapi application, users of the admin panel are administrators. Their roles and permissions are [configured in the admin panel](/user-docs/users-roles-permissions/configuring-administrator-roles).

## Declaring new conditions

Declare a single condition as an object, and multiple conditions as an array of objects. Each condition object can have 5 possible properties:

- `displayName` (string): the condition name as shown in the admin panel,
- `name` (string): the condition name, kebab-cased,
- `category` (string, _optional_): conditions can be grouped into categories available [in the admin panel](/user-docs/users-roles-permissions/configuring-administrator-roles#setting-custom-conditions-for-permissions); if undefined, the condition will appear under the "Default" category,
- `plugin` (string, _optional_): if the condition is created by a plugin, should be the plugin's name, kebab-cased (e.g `content-manager`),
- `handler`: a function used to verify the condition (see [using the condition handler](#using-the-condition-handler))

Declare and register conditions in the global [`bootstrap` function](/dev-docs/configurations/functions#bootstrap) found in `./src/index.js` (see [Registering conditions](#registering-conditions)).

:::note
The condition `name` property acts as a unique id within its namespace, that is either the plugin if the `plugin` property is defined, or the root namespace.
:::

## Using the condition handler

A condition can be applied to any permission, and the condition `handler` is used to verify the condition. The `handler` is a function returning a query object or a boolean value.

Query objects are useful to verify conditions on the entities you read, create, update, delete or publish. They use the [sift.js](https://github.com/crcn/sift.js) library, but only with the following supported operators:

- `$or`
- `$and`
- `$eq`
- `$eqi`
- `$ne`
- `$in`
- `$nin`
- `$lt`
- `$lte`
- `$gt`
- `$gte`
- `$exists`
- `$elemMatch`

The condition `handler` can be a synchronous or asynchronous function that:

- receives the authenticated user making the request,
- and returns `true`, `false`, or a query object.

Returning `true` or `false` is useful to verify an external condition or a condition on the authenticated user.
For instance, a condition that allows access to a page in the admin panel only if server time is 5pm could use this handler:

```js
handler: () => new Date().getHours() === 17;
```

The `handler` function receives the authenticated user, so it can verify conditions on the user:

```js
const condition = {
  displayName: 'Email address from strapi.io',
  name: 'email-strapi-dot-io',
  async handler(user) {
    return user.email.includes('@strapi.io');
  },
};
```

For more granular control, the `handler` function can also return a query object:

```js
const condition = {
  displayName: 'price greater than 50',
  name: 'price-gt-50',
  async handler(user) {
    return { price: { $gt: 50 } };
  },
};
```

## Registering conditions

To be available in the admin panel, conditions should be declared and registered in the global [`bootstrap` function](/dev-docs/configurations/functions#bootstrap) found in `./src/index`. Register a single condition with the `conditionProvider.register()` method:

</Tabs>

To register multiple conditions, defined as an array of [condition objects](#declaring-new-conditions), use `conditionProvider.registerMany()`:

</Tabs>



# Server configuration
Source: https://docs-v4.strapi.io/dev-docs/configurations/server

# Server configuration

The `./config/server.js` file is used to define the server configuration for a Strapi application.

:::caution
Changes to the `server.js` file require rebuilding the admin panel. After saving the modified file run either `yarn build` or `npm run build` in the terminal to implement the changes.
:::

## Available options

The `./config/server.js` file can include the following parameters:

<!-- TODO: add admin jwt config option -->

| Parameter                          | Description                                                                                                                                                                                                                                                                                                                                                                 | Type              | Default             |
|------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-------------------|---------------------|
| `host`<br/><br/>❗️ _Mandatory_     | Host name                                                                                                                                                                                                                                                                                                                                                                   | string            | `localhost`         |
| `port`<br/><br/>❗️ _Mandatory_     | Port on which the server should be running.                                                                                                                                                                                                                                                                                                                                 | integer           | `1337`              |
| `app.keys`<br/><br/>❗️ _Mandatory_ | Declare session keys (based on [Koa session](https://github.com/koajs/session/blob/master/Readme.md)), which is used by the `session` middleware for the Users & Permissions plugin and the Documentation plugin.                                                                                                                                                           | array of strings            | `undefined`         |
| `socket`                           | Listens on a socket. Host and port are cosmetic when this option is provided and likewise use `url` to generate proper urls when using this option. This option is useful for running a server without exposing a port and using proxy servers on the same machine (e.g [Heroku nginx buildpack](https://github.com/heroku/heroku-buildpack-nginx#requirements-proxy-mode)) | string \| integer | `/tmp/nginx.socket` |
| `emitErrors`                       | Enable errors to be emitted to `koa` when they happen in order to attach custom logic or use error reporting services.                                                                                                                                                                                                                                                      | boolean           | `false`             |
| `url`                              | Public url of the server. Required for many different features (ex: reset password, third login providers etc.). Also enables proxy support such as Apache or Nginx, example: `https://mywebsite.com`. The url can be relative, if so, it is used with `http://${host}:${port}` as the base url. An absolute url is however recommended.                                | string            | `''`                |
| `proxy`                            | Set the koa variable `app.proxy`. When `true`, proxy header fields will be trusted.                                                                                                                                                                                                                                                                                         | boolean           | `false`             |
| `globalProxy`                      | Defines the proxy agent for all external requests made within `strapi.fetch` method (used for licenses check, telemetry and webhooks). To be used if the Strapi project is behind a forward proxy.                                                                                                                                                                          | string            |                     |
| `cron`                             | Cron configuration (powered by [`node-schedule`](https://github.com/node-schedule/node-schedule))                                                                                                                                                                                                                                                                           | object            |                     |
| `cron.enabled`                     | Enable or disable [CRON jobs](/dev-docs/configurations/cron.md) to schedule jobs at specific dates.                                                                                                                                                                                                                                                                         | boolean           | `false`             |
| `cron.tasks`                       | Declare [CRON jobs](/dev-docs/configurations/cron.md) to be run at specific dates.                                                                                                                                                                                                                                                                                          | object            |                     |
| `dirs`                             | Path configuration of different directories Strapi uses.                                                                                                                                                                                                                                                                                                                    | object            |                     |
| `dirs.public`                      | Customize the path of the public folder.                                                                                                                                                                                                                                                                                                                                    | string            | `./public`          |
| `webhooks.populateRelations`       | Enable or disable receiving populated relations in webhooks              | boolean           | `true`              |
| `http`                             | Configuration of the http server used by Strapi                                                                                                                                                                                                                                                                                                                   | object            |                     |
| `http.serverOptions`               | Options passed to http `createServer`                            | [http.serverOptions](https://nodejs.org/api/http.html#httpcreateserveroptions-requestlistener)            | {}          |

## Configurations

The `./config/server.js` minimal configuration requires the `host` and `port` parameters for development. Additional parameters can be included for a full configuration.

:::note
[Environmental configurations](/dev-docs/configurations/environment.md) (i.e. using the `env()` helper) do not need to contain all the values so long as they exist in the default `./config/server.js`.
:::

The default configuration created with any new project should at least include the following:

</Tabs>

</TabItem>

</Tabs>

</TabItem>
</Tabs>



# Server configuration
Source: https://docs-v4.strapi.io/dev-docs/configurations/server

# Server configuration

The `./config/server.js` file is used to define the server configuration for a Strapi application.

:::caution
Changes to the `server.js` file require rebuilding the admin panel. After saving the modified file run either `yarn build` or `npm run build` in the terminal to implement the changes.
:::

## Available options

The `./config/server.js` file can include the following parameters:

<!-- TODO: add admin jwt config option -->

| Parameter                          | Description                                                                                                                                                                                                                                                                                                                                                                 | Type              | Default             |
|------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-------------------|---------------------|
| `host`<br/><br/>❗️ _Mandatory_     | Host name                                                                                                                                                                                                                                                                                                                                                                   | string            | `localhost`         |
| `port`<br/><br/>❗️ _Mandatory_     | Port on which the server should be running.                                                                                                                                                                                                                                                                                                                                 | integer           | `1337`              |
| `app.keys`<br/><br/>❗️ _Mandatory_ | Declare session keys (based on [Koa session](https://github.com/koajs/session/blob/master/Readme.md)), which is used by the `session` middleware for the Users & Permissions plugin and the Documentation plugin.                                                                                                                                                           | array of strings            | `undefined`         |
| `socket`                           | Listens on a socket. Host and port are cosmetic when this option is provided and likewise use `url` to generate proper urls when using this option. This option is useful for running a server without exposing a port and using proxy servers on the same machine (e.g [Heroku nginx buildpack](https://github.com/heroku/heroku-buildpack-nginx#requirements-proxy-mode)) | string \| integer | `/tmp/nginx.socket` |
| `emitErrors`                       | Enable errors to be emitted to `koa` when they happen in order to attach custom logic or use error reporting services.                                                                                                                                                                                                                                                      | boolean           | `false`             |
| `url`                              | Public url of the server. Required for many different features (ex: reset password, third login providers etc.). Also enables proxy support such as Apache or Nginx, example: `https://mywebsite.com`. The url can be relative, if so, it is used with `http://${host}:${port}` as the base url. An absolute url is however recommended.                                | string            | `''`                |
| `proxy`                            | Set the koa variable `app.proxy`. When `true`, proxy header fields will be trusted.                                                                                                                                                                                                                                                                                         | boolean           | `false`             |
| `globalProxy`                      | Defines the proxy agent for all external requests made within `strapi.fetch` method (used for licenses check, telemetry and webhooks). To be used if the Strapi project is behind a forward proxy.                                                                                                                                                                          | string            |                     |
| `cron`                             | Cron configuration (powered by [`node-schedule`](https://github.com/node-schedule/node-schedule))                                                                                                                                                                                                                                                                           | object            |                     |
| `cron.enabled`                     | Enable or disable [CRON jobs](/dev-docs/configurations/cron.md) to schedule jobs at specific dates.                                                                                                                                                                                                                                                                         | boolean           | `false`             |
| `cron.tasks`                       | Declare [CRON jobs](/dev-docs/configurations/cron.md) to be run at specific dates.                                                                                                                                                                                                                                                                                          | object            |                     |
| `dirs`                             | Path configuration of different directories Strapi uses.                                                                                                                                                                                                                                                                                                                    | object            |                     |
| `dirs.public`                      | Customize the path of the public folder.                                                                                                                                                                                                                                                                                                                                    | string            | `./public`          |
| `webhooks.populateRelations`       | Enable or disable receiving populated relations in webhooks              | boolean           | `true`              |
| `http`                             | Configuration of the http server used by Strapi                                                                                                                                                                                                                                                                                                                   | object            |                     |
| `http.serverOptions`               | Options passed to http `createServer`                            | [http.serverOptions](https://nodejs.org/api/http.html#httpcreateserveroptions-requestlistener)            | {}          |

## Configurations

The `./config/server.js` minimal configuration requires the `host` and `port` parameters for development. Additional parameters can be included for a full configuration.

:::note
[Environmental configurations](/dev-docs/configurations/environment.md) (i.e. using the `env()` helper) do not need to contain all the values so long as they exist in the default `./config/server.js`.
:::

The default configuration created with any new project should at least include the following:

</Tabs>

</TabItem>

</Tabs>

</TabItem>
</Tabs>



# Single Sign-on (SSO)
Source: https://docs-v4.strapi.io/dev-docs/configurations/sso

# Single Sign-On 

</Tabs>

## Setting up provider configuration

A provider's configuration is a JavaScript object built with the following properties:

| Name             | Required | Type     | Description                                                                                                            |
|------------------|----------|----------|------------------------------------------------------------------------------------------------------------------------|
| `uid`            | true     | string   | The UID of the strategy. It must match the strategy's name                                                             |
| `displayName`    | true     | string   | The name that will be used on the login page to reference the provider                                                 |
| `icon`           | false    | string   | An image URL. If specified, it will replace the displayName on the login page                                          |
| `createStrategy` | true     | function | A factory that will build and return a new passport strategy for your provider. Takes the strapi instance as parameter |

:::tip
The `uid` property is the unique identifier of each strategy and is generally found in the strategy's package. If you are not sure of what it refers to, please contact the maintainer of the strategy.
:::

:::note
By default, Strapi security policy does not allow loading images from external URLs, so provider logos will not show up on the [login screen](/user-docs/intro#accessing-the-admin-panel) of the admin panel unless [a security exception is added](/dev-docs/configurations/middlewares#security).
:::

<details>
  <summary>Example: Security exception for provider logos</summary>

</Tabs>

</details>

:::note
When deploying the admin panel to a different location or on a different subdomain, an additional configuration is required to set the common domain for the cookies. This is required to ensure the cookies are shared across the domains.
:::

:::caution
Deploying the admin and backend on entirely different unrelated domains is not possible at this time when using SSO.
:::

<details>
  <summary>Example: Setting custom cookie domain</summary>

</Tabs>

</details>

### The `createStrategy` Factory

A passport strategy is usually built by instantiating it using 2 parameters: the configuration object, and the verify function.

#### Configuration Object

The configuration object depends on the strategy needs, but often asks for a callback URL to be redirected to once the connection has been made on the provider side.

A specific callback URL can be generated for your provider using the `getStrategyCallbackURL` method. This URL also needs to be written on the provider side in order to allow redirection from it.

The format of the callback URL is the following: `/admin/connect/<provider_uid>`.

:::tip
`strapi.admin.services.passport.getStrategyCallbackURL` is a Strapi helper you can use to get a callback URL for a specific provider. It takes a provider name as a parameter and returns a URL.
:::

If needed, this is also where you will put your client ID and secret key for your OAuth2 application.

**Verify Function**

The verify function is used here as a middleware allowing the user to transform and make extra processing on the data returned from the provider API.

This function always takes a `done` method as last parameter which is used to transfer needed data to the Strapi layer of SSO.

Its signature is the following: `void done(error: any, data: object);` and it follows the following rules:

- If `error` is not set to `null`, then the data sent is ignored, and the controller will throw an error.
- If the SSO's auto-registration feature is disabled, then the `data` object only need to be composed of an `email` property.
- If the SSO's auto-registration feature is enabled, then you will need to define (in addition to the `email`) either a `username` property or both `firstname` and `lastname` within the `data` object.

### Adding a provider

Adding a new provider means adding a new way for your administrators to log-in.

Strapi uses [Passport.js](http://www.passportjs.org/), which enables a large selection of providers. Any valid passport strategy that doesn't need additional custom data should therefore work with Strapi.

:::caution
Strategies such as [ldapauth](https://github.com/vesse/passport-ldapauth) don't work out of the box since they require extra data to be sent from the admin panel.
If you want to add an LDAP provider to your application, you will need to write a [custom strategy](http://www.passportjs.org/packages/passport-custom/).
You can also use services such as Okta and Auth0 as bridge services.
:::

### Configuring the provider

To configure a provider, follow the procedure below:

1. Make sure to import your strategy in your admin configuration file, either from an installed package or a local file.
2. You'll need to add a new item to the `auth.providers` array in your admin panel configuration that will match the [format given above](#setting-up-provider-configuration)
3. Restart your application, the provider should appear on your admin login page.
<!-- step 3 requires the build command? -->

### Provider configuration examples

#### Google

Using: [passport-google-oauth2](https://github.com/mstade/passport-google-oauth2)

</Tabs>

<details>
  <summary>Configuration example for Google:</summary>
  <div>
    <div>
    <br/>

</Tabs>

 </div>
<br/>
 </div>
</details>

#### Github

Using: [passport-github](https://github.com/cfsghost/passport-github)

</Tabs>

<details>
  <summary>Configuration example for Github:</summary>
  <div>
    <div>

</Tabs>
    </div>
    <br/>
  </div>
</details>

#### Discord

Using: [passport-discord](https://github.com/nicholastay/passport-discord#readme)

</Tabs>

<details>
  <summary>Configuration example for Discord:
<br/></summary>
  <div>
    <div>

</Tabs>
    </div>
    <br/>
  </div>
</details>

#### Microsoft

Using: [passport-azure-ad-oauth2](https://github.com/auth0/passport-azure-ad-oauth2#readme)

</Tabs>

<details>
  <summary>Configuration example for Microsoft:</summary>
  <div>
    <div>

</Tabs>
    </div>
    <br/>
  </div>
</details>

#### Keycloak (OpenID Connect)

Using: [passport-keycloak-oauth2-oidc](https://www.npmjs.com/package/passport-keycloak-oauth2-oidc)

</Tabs>

<details>
  <summary>Configuration example for Keycloak (OpenID Connect):</summary>
  <div>
    <div>

</Tabs>
    </div>
    <br/>
  </div>
</details>

#### Okta

Using: [passport-okta-oauth20](https://github.com/antoinejaussoin/passport-okta-oauth20/#readme)

</Tabs>

:::caution
When setting the `OKTA_DOMAIN` environment variable, make sure to include the protocol (e.g. `https://example.okta.com`). If you do not, you will end up in a redirect loop.
:::

<details>
  <summary>Configuration example for Okta:</summary>
  <div>
    <div>

</Tabs>
    </div>
    <br/>
  </div>
</details>

## Performing advanced customization

### Admin panel URL

If the administration panel lives on a host/port different from the Strapi server, the admin panel URL needs to be updated:
update the `url` key in the `./config/admin.js` configuration file (see [admin panel customization documentation](/dev-docs/admin-panel-customization#access-url)).

### Custom Logic

In some scenarios, you will want to write additional logic for your connection workflow such as:

- restricting connection and registration for a specific domain
- triggering actions on connection attempt
- adding analytics

The easiest way to do so is to plug into the verify function of your strategy and write some code.

For example, if you want to allow only people with an official strapi.io email address, you can instantiate your strategy like this:

</Tabs>

### Authentication Events

The SSO feature adds a new [authentication event](/dev-docs/configurations/admin-panel#available-options): `onSSOAutoRegistration`.

This event is triggered whenever a user is created using the auto-register feature added by SSO.
It contains the created user (`event.user`), and the provider used to make the registration (`event.provider`).

</Tabs>



# Single Sign-on (SSO)
Source: https://docs-v4.strapi.io/dev-docs/configurations/sso

# Single Sign-On 

</Tabs>

## Setting up provider configuration

A provider's configuration is a JavaScript object built with the following properties:

| Name             | Required | Type     | Description                                                                                                            |
|------------------|----------|----------|------------------------------------------------------------------------------------------------------------------------|
| `uid`            | true     | string   | The UID of the strategy. It must match the strategy's name                                                             |
| `displayName`    | true     | string   | The name that will be used on the login page to reference the provider                                                 |
| `icon`           | false    | string   | An image URL. If specified, it will replace the displayName on the login page                                          |
| `createStrategy` | true     | function | A factory that will build and return a new passport strategy for your provider. Takes the strapi instance as parameter |

:::tip
The `uid` property is the unique identifier of each strategy and is generally found in the strategy's package. If you are not sure of what it refers to, please contact the maintainer of the strategy.
:::

:::note
By default, Strapi security policy does not allow loading images from external URLs, so provider logos will not show up on the [login screen](/user-docs/intro#accessing-the-admin-panel) of the admin panel unless [a security exception is added](/dev-docs/configurations/middlewares#security).
:::

<details>
  <summary>Example: Security exception for provider logos</summary>

</Tabs>

</details>

:::note
When deploying the admin panel to a different location or on a different subdomain, an additional configuration is required to set the common domain for the cookies. This is required to ensure the cookies are shared across the domains.
:::

:::caution
Deploying the admin and backend on entirely different unrelated domains is not possible at this time when using SSO.
:::

<details>
  <summary>Example: Setting custom cookie domain</summary>

</Tabs>

</details>

### The `createStrategy` Factory

A passport strategy is usually built by instantiating it using 2 parameters: the configuration object, and the verify function.

#### Configuration Object

The configuration object depends on the strategy needs, but often asks for a callback URL to be redirected to once the connection has been made on the provider side.

A specific callback URL can be generated for your provider using the `getStrategyCallbackURL` method. This URL also needs to be written on the provider side in order to allow redirection from it.

The format of the callback URL is the following: `/admin/connect/<provider_uid>`.

:::tip
`strapi.admin.services.passport.getStrategyCallbackURL` is a Strapi helper you can use to get a callback URL for a specific provider. It takes a provider name as a parameter and returns a URL.
:::

If needed, this is also where you will put your client ID and secret key for your OAuth2 application.

**Verify Function**

The verify function is used here as a middleware allowing the user to transform and make extra processing on the data returned from the provider API.

This function always takes a `done` method as last parameter which is used to transfer needed data to the Strapi layer of SSO.

Its signature is the following: `void done(error: any, data: object);` and it follows the following rules:

- If `error` is not set to `null`, then the data sent is ignored, and the controller will throw an error.
- If the SSO's auto-registration feature is disabled, then the `data` object only need to be composed of an `email` property.
- If the SSO's auto-registration feature is enabled, then you will need to define (in addition to the `email`) either a `username` property or both `firstname` and `lastname` within the `data` object.

### Adding a provider

Adding a new provider means adding a new way for your administrators to log-in.

Strapi uses [Passport.js](http://www.passportjs.org/), which enables a large selection of providers. Any valid passport strategy that doesn't need additional custom data should therefore work with Strapi.

:::caution
Strategies such as [ldapauth](https://github.com/vesse/passport-ldapauth) don't work out of the box since they require extra data to be sent from the admin panel.
If you want to add an LDAP provider to your application, you will need to write a [custom strategy](http://www.passportjs.org/packages/passport-custom/).
You can also use services such as Okta and Auth0 as bridge services.
:::

### Configuring the provider

To configure a provider, follow the procedure below:

1. Make sure to import your strategy in your admin configuration file, either from an installed package or a local file.
2. You'll need to add a new item to the `auth.providers` array in your admin panel configuration that will match the [format given above](#setting-up-provider-configuration)
3. Restart your application, the provider should appear on your admin login page.
<!-- step 3 requires the build command? -->

### Provider configuration examples

#### Google

Using: [passport-google-oauth2](https://github.com/mstade/passport-google-oauth2)

</Tabs>

<details>
  <summary>Configuration example for Google:</summary>
  <div>
    <div>
    <br/>

</Tabs>

 </div>
<br/>
 </div>
</details>

#### Github

Using: [passport-github](https://github.com/cfsghost/passport-github)

</Tabs>

<details>
  <summary>Configuration example for Github:</summary>
  <div>
    <div>

</Tabs>
    </div>
    <br/>
  </div>
</details>

#### Discord

Using: [passport-discord](https://github.com/nicholastay/passport-discord#readme)

</Tabs>

<details>
  <summary>Configuration example for Discord:
<br/></summary>
  <div>
    <div>

</Tabs>
    </div>
    <br/>
  </div>
</details>

#### Microsoft

Using: [passport-azure-ad-oauth2](https://github.com/auth0/passport-azure-ad-oauth2#readme)

</Tabs>

<details>
  <summary>Configuration example for Microsoft:</summary>
  <div>
    <div>

</Tabs>
    </div>
    <br/>
  </div>
</details>

#### Keycloak (OpenID Connect)

Using: [passport-keycloak-oauth2-oidc](https://www.npmjs.com/package/passport-keycloak-oauth2-oidc)

</Tabs>

<details>
  <summary>Configuration example for Keycloak (OpenID Connect):</summary>
  <div>
    <div>

</Tabs>
    </div>
    <br/>
  </div>
</details>

#### Okta

Using: [passport-okta-oauth20](https://github.com/antoinejaussoin/passport-okta-oauth20/#readme)

</Tabs>

:::caution
When setting the `OKTA_DOMAIN` environment variable, make sure to include the protocol (e.g. `https://example.okta.com`). If you do not, you will end up in a redirect loop.
:::

<details>
  <summary>Configuration example for Okta:</summary>
  <div>
    <div>

</Tabs>
    </div>
    <br/>
  </div>
</details>

## Performing advanced customization

### Admin panel URL

If the administration panel lives on a host/port different from the Strapi server, the admin panel URL needs to be updated:
update the `url` key in the `./config/admin.js` configuration file (see [admin panel customization documentation](/dev-docs/admin-panel-customization#access-url)).

### Custom Logic

In some scenarios, you will want to write additional logic for your connection workflow such as:

- restricting connection and registration for a specific domain
- triggering actions on connection attempt
- adding analytics

The easiest way to do so is to plug into the verify function of your strategy and write some code.

For example, if you want to allow only people with an official strapi.io email address, you can instantiate your strategy like this:

</Tabs>

### Authentication Events

The SSO feature adds a new [authentication event](/dev-docs/configurations/admin-panel#available-options): `onSSOAutoRegistration`.

This event is triggered whenever a user is created using the auto-register feature added by SSO.
It contains the created user (`event.user`), and the provider used to make the registration (`event.provider`).

</Tabs>



# TypeScript configuration
Source: https://docs-v4.strapi.io/dev-docs/configurations/typescript

# TypeScript configuration

[TypeScript](/dev-docs/typescript)-enabled Strapi projects have a specific project structure and handle TypeScript project configuration through [`tsconfig.json` files](#project-structure-and-typescript-specific-configuration-files).

Strapi also has dedicated TypeScript features that are configured [in the `config/typescript.js|ts` file](#strapi-specific-configuration-for-typescript).

## Project structure and TypeScript-specific configuration files

TypeScript-enabled Strapi applications have a specific [project structure](/dev-docs/project-structure) with the following dedicated folders and configuration files:

| TypeScript-specific directories and files | Location         | Purpose                                                                                                                                          |
| ----------------------------------------- | ---------------- | ------------------------------------------------------------------------------------------------------------------------------------------------ |
| `./dist` directory                        | application root | Adds the location for compiling the project JavaScript source code.                                                                              |
| `build` directory                         | `./dist`         | Contains the compiled administration panel JavaScript source code. The directory is created on the first `yarn build` or `npm run build` command |
| `tsconfig.json` file                      | application root | Manages TypeScript compilation for the server.                                                                                                   |
| `tsconfig.json` file                      | `./src/admin/`   | Manages TypeScript compilation for the admin panel.                                                                                              |

## Strapi-specific configuration for TypeScript

Types generated by Strapi are based on the user project structure. Once the type definitions are emitted into their dedicated files, Strapi reads the type definitions to adapt the autocompletion results accordingly.

To avoid having to [manually generate types](/dev-docs/typescript#generate-typings-for-project-schemas) every time the server restarts, TypeScript-based projects autogenerate the types for you. However, generating types is not a requirement for JavaScript-based projects, so if you want you can turn types autogeneration off by creating an optional `config/typescript.js|ts` configuration file and setting the `autogenerate` parameter to `false`:

| Parameter      | Description                                                    | Type      | Default |
| -------------- | -------------------------------------------------------------- | --------- | ------- |
| `autogenerate` | Enable or disable automatic types generation on server restart | `Boolean` | `true` |

```js title="./config/typescript.js"
module.exports = ({ env }) => ({
  autogenerate: false,
});
```

:::caution 🚧 Experimental.
Turning off types autogeneration for JavaScript projects is considered experimental and might have issues or break some features.
:::



# TypeScript configuration
Source: https://docs-v4.strapi.io/dev-docs/configurations/typescript

# TypeScript configuration

[TypeScript](/dev-docs/typescript)-enabled Strapi projects have a specific project structure and handle TypeScript project configuration through [`tsconfig.json` files](#project-structure-and-typescript-specific-configuration-files).

Strapi also has dedicated TypeScript features that are configured [in the `config/typescript.js|ts` file](#strapi-specific-configuration-for-typescript).

## Project structure and TypeScript-specific configuration files

TypeScript-enabled Strapi applications have a specific [project structure](/dev-docs/project-structure) with the following dedicated folders and configuration files:

| TypeScript-specific directories and files | Location         | Purpose                                                                                                                                          |
| ----------------------------------------- | ---------------- | ------------------------------------------------------------------------------------------------------------------------------------------------ |
| `./dist` directory                        | application root | Adds the location for compiling the project JavaScript source code.                                                                              |
| `build` directory                         | `./dist`         | Contains the compiled administration panel JavaScript source code. The directory is created on the first `yarn build` or `npm run build` command |
| `tsconfig.json` file                      | application root | Manages TypeScript compilation for the server.                                                                                                   |
| `tsconfig.json` file                      | `./src/admin/`   | Manages TypeScript compilation for the admin panel.                                                                                              |

## Strapi-specific configuration for TypeScript

Types generated by Strapi are based on the user project structure. Once the type definitions are emitted into their dedicated files, Strapi reads the type definitions to adapt the autocompletion results accordingly.

To avoid having to [manually generate types](/dev-docs/typescript#generate-typings-for-project-schemas) every time the server restarts, TypeScript-based projects autogenerate the types for you. However, generating types is not a requirement for JavaScript-based projects, so if you want you can turn types autogeneration off by creating an optional `config/typescript.js|ts` configuration file and setting the `autogenerate` parameter to `false`:

| Parameter      | Description                                                    | Type      | Default |
| -------------- | -------------------------------------------------------------- | --------- | ------- |
| `autogenerate` | Enable or disable automatic types generation on server restart | `Boolean` | `true` |

```js title="./config/typescript.js"
module.exports = ({ env }) => ({
  autogenerate: false,
});
```

:::caution 🚧 Experimental.
Turning off types autogeneration for JavaScript projects is considered experimental and might have issues or break some features.
:::



# Custom fields
Source: https://docs-v4.strapi.io/dev-docs/custom-fields

# Custom fields

Custom fields extend Strapi’s capabilities by adding new types of fields to content-types and components. Once created or added to Strapi via plugins, custom fields can be used in the Content-Type Builder and Content Manager just like built-in fields.

The present documentation is intended for custom field creators: it describes which APIs and functions developers must use to create a new custom field. The [User Guide](/user-docs/plugins/introduction-to-plugins.md#custom-fields) describes how to add and use custom fields from Strapi's admin panel.

It is recommended that you develop a dedicated [plugin](/dev-docs/plugins-development) for custom fields. Custom field plugins include both a server and admin panel part. The custom field must be registered in both parts before it is usable in Strapi's admin panel.

Once created and used, custom fields are defined like any other attribute in the model's schema. An attribute using a custom field will have its type represented as `customField` (i.e. `type: 'customField'`). Depending on the custom field being used a few additional properties may be present in the attribute's definition (see [models documentation](/dev-docs/backend-customization#custom-fields)).

:::note NOTES

- Though the recommended way to add a custom field is through creating a plugin, app-specific custom fields can also be registered within the global `register` [function](/dev-docs/configurations/functions) found in `src/index.js` and `src/admin/app/js` files.
- Custom fields can only be shared using plugins.
:::

## Registering a custom field on the server

:::prerequisites

:::

Strapi's server needs to be aware of all the custom fields to ensure that an attribute using a custom field is valid.

The `strapi.customFields` object exposes a `register()` method on the `Strapi` instance. This method is used to register custom fields on the server during the plugin's server [register lifecycle](/dev-docs/api/plugins/server-api#register).

`strapi.customFields.register()` registers one or several custom field(s) on the server by passing an object (or an array of objects) with the following parameters:

| Parameter                         | Description                                                                                                                                             | Type     |
| --------------------------------- |---------------------------------------------------------------------------------------------------------------------------------------------------------| -------- |
| `name`                            | The name of the custom field                                                                                                                            | `String` |
| `plugin`<br/><br/>(_optional_)    | The name of the plugin creating the custom fields<br/><br/>❗️ If defined, the `pluginId` value on the admin panel registration must have the same value (see [Registering a custom field in the admin panel](#registering-a-custom-field-in-the-admin-panel)) | `String` |
| `type`                            | The data type the custom field will use                                                                                                                 | `String` |
| `inputSize`<br/><br/>(_optional_) | Parameters to define the width of a custom field's input in the admin panel                                                                             | `Object` |

The optional `inputSize` object, when specified, must contain all of the following parameters:

| Parameter     | Description                                                                                                                                               | Type      |
| ------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------- | --------- |
| `default`     | The default size in columns that the input field will occupy in the 12-column grid in the admin panel.<br/>The value can either be `4`, `6`, `8` or `12`. | `Integer` |
| `isResizable` | Whether the input can be resized or not                                                                                                                   | `Boolean` |

:::note Current limitations
Currently:
* Custom fields cannot add new data types to Strapi and must use existing, built-in Strapi data types described in the [models' attributes](/dev-docs/backend-customization#model-attributes) documentation. 
* You also cannot modify an existing data type.
* Special data types unique to Strapi, such as relation, media, component, or dynamic zone data types, cannot be used in custom fields.
:::

<details>
<summary>Example: Registering an example "color" custom field on the server:</summary>

In the following example, the `color-picker` plugin was created using the CLI generator (see [plugins development](/dev-docs/plugins-development)):

```js title="./src/plugins/color-picker/server/register.js"
"use strict";

module.exports = ({ strapi }) => {
  strapi.customFields.register({
    name: "color",
    plugin: "color-picker",
    type: "string",
    inputSize: {
      // optional
      default: 4,
      isResizable: true,
    },
  });
};
```

The custom field could also be declared directly within the `strapi-server.js` file if you didn't have the plugin code scaffolded by the CLI generator:

```js title="./src/plugins/color-picker/strapi-server.js"
module.exports = {
  register({ strapi }) {
    strapi.customFields.register({
      name: "color",
      plugin: "color-picker",
      type: "text",
      inputSize: {
        // optional
        default: 4,
        isResizable: true,
      },
    });
  },
};
```

</details>

## Registering a custom field in the admin panel

:::prerequisites

:::

Custom fields must be registered in Strapi's admin panel to be available in the Content-type Builder and the Content Manager.

The `app.customFields` object exposes a `register()` method on the `StrapiApp` instance. This method is used to register custom fields in the admin panel during the plugin's admin [register lifecycle](/dev-docs/api/plugins/admin-panel-api#register).

`app.customFields.register()` registers one or several custom field(s) in the admin panel by passing an object (or an array of objects) with the following parameters:

| Parameter                        | Description                                                                                                                                  | Type                                                 |
| -------------------------------- |----------------------------------------------------------------------------------------------------------------------------------------------| ---------------------------------------------------- |
| `name`                           | Name of the custom field                                                                                                                     | `String`                                             |
| `pluginId`<br/><br/>(_optional_) | Name of the plugin creating the custom field<br/><br/>❗️ If defined, the `plugin` value on the server registration must have the same value (see [Registering a custom field on the server](#registering-a-custom-field-on-the-server))  | `String`                                             |
| `type`                           | Existing Strapi data type the custom field will use<br/><br/>❗️ Relations, media, components, or dynamic zones cannot be used.               | `String`                                             |
| `icon`<br/><br/>(_optional_)     | Icon for the custom field                                                                                                                    | `React.ComponentType`                                |
| `intlLabel`                      | Translation for the name                                                                                                                     | [`IntlObject`](https://formatjs.io/docs/react-intl/) |
| `intlDescription`                | Translation for the description                                                                                                              | [`IntlObject`](https://formatjs.io/docs/react-intl/) |
| `components`                     | Components needed to display the custom field in the Content Manager (see [components](#components))                                         |
| `options`<br/><br/>(_optional_)  | Options to be used by the Content-type Builder (see [options](#options))                                                                     | `Object`                                             |

<details>
<summary>Example: Registering an example "color" custom field in the admin panel:</summary>

In the following example, the `color-picker` plugin was created using the CLI generator (see [plugins development](/dev-docs/plugins-development.md)):

```jsx title="./src/plugins/color-picker/admin/src/index.js"

  register(app) {
    // ... app.addMenuLink() goes here
    // ... app.registerPlugin() goes here

    app.customFields.register({
      name: "color",
      pluginId: "color-picker", // the custom field is created by a color-picker plugin
      type: "string", // the color will be stored as a string
      intlLabel: {
        id: "color-picker.color.label",
        defaultMessage: "Color",
      },
      intlDescription: {
        id: "color-picker.color.description",
        defaultMessage: "Select any color",
      },
      icon: ColorPickerIcon, // don't forget to create/import your icon component
      components: {
        Input: async () =>
          import(
            /* webpackChunkName: "input-component" */ "./components/Input"
          ),
      },
      options: {
        // declare options here
      },
    });
  },

  // ... bootstrap() goes here
};
```

</details>

### Components

`app.customFields.register()` must pass a `components` object with an `Input` React component to use in the Content Manager's edit view.

<details>
<summary>Example: Registering an Input component</summary>

In the following example, the `color-picker` plugin was created using the CLI generator (see [plugins development](/dev-docs/plugins-development.md)):

```jsx title="./src/plugins/color-picker/admin/src/index.js"

  register(app) {
    app.customFields.register({
      // …
      components: {
        Input: async () =>
          import(/* webpackChunkName: "input-component" */ "./Input"),
      },
      // …
    });
  },
};
```

</details>

Custom field input components receive the following props:

| Prop             | Description                                                                                                                                                                                                                               | Type                                                                 |
| ---------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------- |
| `attribute`      | The attribute object with custom field's underlying Strapi type and options                                                                                                                                                               | `{ type: String, customField: String }`                              |
| `description`    | The field description set in [configure the view](/user-docs/content-manager/configuring-view-of-content-type#configuring-the-edit-view)                                                                                                  | [`IntlObject`](https://formatjs.io/docs/react-intl/)                 |
| `placeholder`    | The field placeholder set in [configure the view](/user-docs/content-manager/configuring-view-of-content-type#configuring-the-edit-view)                                                                                                  | [`IntlObject`](https://formatjs.io/docs/react-intl/)                 |
| `hint`           | The field description set in [configure the view](/user-docs/content-manager/configuring-view-of-content-type#configuring-the-edit-view) along with min/max [validation requirements](/dev-docs/backend-customization/models#validations) | `String`                                                             |
| `name`           | The field name set in the content-type builder                                                                                                                                                                                            | `String`                                                             |
| `intlLabel`      | The field name set in the content-type builder or configure the view                                                                                                                                                                      | [`IntlObject`](https://formatjs.io/docs/react-intl/)                 |
| `onChange`       | The handler for the input change event. The `name` argument references the field name. The `type` argument references the underlying Strapi type                                                                                          | `({ target: { name: String value: unknown type: String } }) => void` |
| `contentTypeUID` | The content-type the field belongs to                                                                                                                                                                                                     | `String`                                                             |
| `type`           | The custom field uid, for example `plugin::color-picker.color`                                                                                                                                                                            | `String`                                                             |
| `value`          | The input value the underlying Strapi type expects                                                                                                                                                                                        | `unknown`                                                            |
| `required`       | Whether or not the field is required                                                                                                                                                                                                      | `boolean`                                                            |
| `error`          | Error received after validation                                                                                                                                                                                                           | [`IntlObject`](https://formatjs.io/docs/react-intl/)                 |
| `disabled`       | Whether or not the input is disabled                                                                                                                                                                                                      | `boolean`                                                            |

As of Strapi v4.13.0, fields in the Content Manager can be auto-focussed via the `URLSearchParam` `field`. It's recommended that your input component is wrapped in React's [`forwardRef`](https://react.dev/reference/react/forwardRef) method; you should pass the corresponding `ref` to the `input` element.

<details>
<summary>Example: A custom text input</summary>

In the following example we're providing a custom text input that is controlled. All inputs should be controlled otherwise their data will not be submitted on save.

```jsx title="./src/plugins/<plugin-name>/admin/src/components/Input.js"

const Input = React.forwardRef((props, ref) => {
  const { attribute, disabled, intlLabel, name, onChange, required, value } =
    props; // these are just some of the props passed by the content-manager

  const { formatMessage } = useIntl();

  const handleChange = (e) => {
    onChange({
      target: { name, type: attribute.type, value: e.currentTarget.value },
    });
  };

  return (
    <label>
      {formatMessage(intlLabel)}
      <input
        ref={ref}
        name={name}
        disabled={disabled}
        value={value}
        required={required}
        onChange={handleChange}
      />
    </label>
  );
});

```

</details>

:::tip
For a more detailed view of the props provided to the customFields and how they can be used check out the [`ColorPickerInput` file](https://github.com/strapi/strapi/blob/main/packages/plugins/color-picker/admin/src/components/ColorPickerInput.tsx#L80-L95) in the Strapi codebase.
:::

### Options

`app.customFields.register()` can pass an additional `options` object with the following parameters:

| Options parameter | Description                                                                                                                               | Type                           |
| ----------------- | ----------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------ |
| `base`            | Settings available in the _Base settings_ tab of the field in the Content-type Builder                                                    | `Object` or `Array of Objects` |
| `advanced`        | Settings available in the _Advanced settings_ tab of the field in the Content-type Builder                                                | `Object` or `Array of Objects` |
| `validator`       | Validator function returning an object, used to sanitize input. Uses a [`yup` schema object](https://github.com/jquense/yup/tree/pre-v1). | `Function`                     |

Both `base` and `advanced` settings accept an object or an array of objects, each object being a settings section. Each settings section could include:

- a `sectionTitle` to declare the title of the section as an [`IntlObject`](https://formatjs.io/docs/react-intl/)
- and a list of `items` as an array of objects.

Each object in the `items` array can contain the following parameters:

| Items parameter | Description                                                        | Type                                                 |
| --------------- | ------------------------------------------------------------------ | ---------------------------------------------------- |
| `name`          | Label of the input.<br/>Must use the `options.settingName` format. | `String`                                             |
| `description`   | Description of the input to use in the Content-type Builder        | [`IntlObject`](https://formatjs.io/docs/react-intl/) |
| `intlLabel`     | Translation for the label of the input                             | [`IntlObject`](https://formatjs.io/docs/react-intl/) |
| `type`          | Type of the input (e.g., `select`, `checkbox`)                     | `String`                                             |
| `defaultValue`  | Set the default value for the item                                 | `String` | `boolean`                                 |

<details>
<summary>Example: Declaring options for an example "color" custom field:</summary>

In the following example, the `color-picker` plugin was created using the CLI generator (see [plugins development](/dev-docs/plugins-development.md)):

```jsx title="./src/plugins/color-picker/admin/src/index.js"
// imports go here (ColorPickerIcon, pluginId, yup package…)

  register(app) {
    // ... app.addMenuLink() goes here
    // ... app.registerPlugin() goes here
    app.customFields.register({
      // …
      options: {
        base: [
          /*
            Declare settings to be added to the "Base settings" section
            of the field in the Content-Type Builder
          */
          {
            sectionTitle: {
              // Add a "Format" settings section
              id: "color-picker.color.section.format",
              defaultMessage: "Format",
            },
            items: [
              // Add settings items to the section
              {
                /*
                  Add a "Color format" dropdown
                  to choose between 2 different format options
                  for the color value: hexadecimal or RGBA
                */
                intlLabel: {
                  id: "color-picker.color.format.label",
                  defaultMessage: "Color format",
                },
                name: "options.format",
                type: "select",
                defaultValue: "hex", // option selected by default
                options: [
                  // List all available "Color format" options
                  {
                    key: "hex",
                    value: "hex",
                    metadatas: {
                      intlLabel: {
                        id: "color-picker.color.format.hex",
                        defaultMessage: "Hexadecimal",
                      },
                    },
                  },
                  {
                    key: "rgba",
                    value: "rgba",
                    metadatas: {
                      intlLabel: {
                        id: "color-picker.color.format.rgba",
                        defaultMessage: "RGBA",
                      },
                    },
                  },
                ],
              },
            ],
          },
        ],
        advanced: [
          /*
            Declare settings to be added to the "Advanced settings" section
            of the field in the Content-Type Builder
          */
        ],
        validator: (args) => ({
          format: yup.string().required({
            id: "options.color-picker.format.error",
            defaultMessage: "The color format is required",
          }),
        }),
      },
    });
  },
};
```

</details>

<!-- TODO: replace these tip and links by proper documentation of all the possible shapes and parameters for `options` -->

:::tip
The Strapi codebase gives an example of how settings objects can be described: check the [`baseForm.ts`](https://github.com/strapi/strapi/blob/main/packages/core/content-type-builder/admin/src/components/FormModal/attributes/baseForm.ts) file for the `base` settings and the [`advancedForm.js`](https://github.com/strapi/strapi/blob/main/packages/core/content-type-builder/admin/src/components/FormModal/attributes/advancedForm.ts) file for the `advanced` settings. The base form lists the settings items inline but the advanced form gets the items from an [`attributeOptions.js`](https://github.com/strapi/strapi/blob/main/packages/core/content-type-builder/admin/src/components/FormModal/attributes/attributeOptions.js) file.
:::



# Data management system
Source: https://docs-v4.strapi.io/dev-docs/data-management

# Data Management System

Occasionally, you need to move data out of or into a Strapi instance. This is possible with the data management system which uses CLI-based commands:

- Use [`strapi export`](/dev-docs/data-management/export) to create a data backup, for archive purposes or to import it in another instance.
- Use [`strapi import`](/dev-docs/data-management/import) to restore data from a backup.
- Use [`strapi transfer`](/dev-docs/data-management/transfer) to transfer data between local and/or remote instances.

The following documentation gives explanations and examples for the export, import, and transfer commands, while the [CLI reference documentation](/dev-docs/cli#strapi-export) lists all available flags in a condensed format.

:::caution
Interactive CLI commands do not currently work with the `npm` package manager. For `strapi export` and `strapi import` this means the encryption key prompt is not visible in the CLI. In the meantime consider using the `yarn` package manager.
:::



# Data export
Source: https://docs-v4.strapi.io/dev-docs/data-management/export

# Data export

:::strapi v4.6.0 feature
Data export is available in v4.6.0 and newer versions of Strapi. See the [Updates and Migration documentation](/dev-docs/update-version) to upgrade your application.
:::

The `strapi export` command is used to export data from a local Strapi instance. By default, the `strapi export` command exports data as an encrypted and compressed `tar.gz.enc` file which includes:

- the project configuration,
- entities: all of your content,
- links: relations between your entities,
- assets: files stored in the uploads folder,
- schemas,
- the `metadata.json` file.

The following documentation details the available options to customize your data export. The export command and all of the available options are run using the [Strapi CLI](/dev-docs/cli#strapi-export).

:::caution
* Admin users and API tokens are not exported.
* Media from a 3rd party provider (e.g., Cloudinary or AWS S3) are not included in the export as those files do not exist in the upload folders.
:::

## Name the export file

Exported data are contained in a `.tar` file that is automatically named using the format `export_YYYYMMDDHHMMSS`. You can optionally name the exported file by passing the `--file` or `-f` option with the `strapi export` command. Do not include a file extension as one will be set automatically depending on options provided.

### Example: Export data with a custom filename

</Tabs>

## Configure data encryption

The default `strapi export` command encrypts your project data using `aes-128-ecb` encryption and adds the file extension `.enc`. To use encryption you need to pass an encryption key using the `-k` or `--key` option or enter an encryption key when prompted. The encryption key is a `string` with no minimum character count.

:::tip Encryption keys
Strong encryption keys are encouraged to protect sensitive data in your project. [OpenSSL](https://www.openssl.org/) is a resource for generating encryption keys. The following example commands generate encryption keys in a terminal:

</Tabs>

:::

To disable encryption, pass the `--no-encrypt` option with the `strapi export` command.

### Example: Export data without encryption

</Tabs>

### Example: Export data with the encryption `--key` option

</Tabs>

## Disable data compression

The default `strapi export` command compresses your project data using `gzip` compression and adds the `.gz` file extension.

To disable compression, pass the `--no-compress` option with the `strapi export` command.

### Example: Export data without compression

</Tabs>

## Export only selected types of data

The default `strapi export` command exports your content (entities and relations), files (assets), project configuration, and schemas. The `--only` option allows you to export only the listed items by passing a comma-separated string  with no spaces between the types. The available values are `content`, `files`, and `config`. Schemas are always exported, as schema matching is used for `strapi import`.

:::note
Media such as images consist of the file (asset) and the entity in the database. If you use the `--only` flag to export `content`, the asset database records are still included, and could render as broken links.
:::

### Example: Export only entities and relations
<br/>

</Tabs>

## Exclude items from export

The default `strapi export` command exports your content (entities and relations), files (assets), project configuration, and schemas. The `--exclude` option allows you to exclude content, files, and the project configuration by passing these items in a comma-separated string with no spaces between the types. You can't exclude the schemas, as schema matching is used for `strapi import`.

:::note
Media such as images consist of the file (asset) and the entity in the database. If you use the `--exclude` flag to remove assets, the database records are still included, and could render as broken links.
:::

### Example: Export data excluding assets, entities, and relations

</Tabs>



# Data import
Source: https://docs-v4.strapi.io/dev-docs/data-management/import

# Data import

:::strapi v4.6.0 feature
Data import is available in v4.6.0 and newer versions of Strapi. See the [Updates and Migration documentation](/dev-docs/update-version) to upgrade your application.
:::

The `strapi import` command is used to import data from a file. By default, the `strapi import` command imports data from an encrypted and compressed `tar.gz.enc` file which includes:

- the project configuration,
- entities: all of your content,
- links: relations between your entities,
- assets: files stored in the uploads folder,
- schemas,
- the `metadata.json` file.

The following documentation details the available options to customize your data import. The import command and all of the available options are run using the [Strapi CLI](/dev-docs/cli#strapi-import).

:::warning

- `strapi import` deletes all existing data, including the database and uploads directory, before importing the backup file.
- The source and target schemas must match to successfully use `strapi import`, meaning all content types must be identical.
- Restored data does not include the `Admin users` table, which means that `createdBy` and `updatedBy` are empty in a restored instance.  

:::
## Specify the import file

To import data into a Strapi instance use the `strapi import` command in the project root directory. Specify the file to be imported using the `-f` or `--file` option. The filename, extension, and path are required. If the file is encrypted, you are prompted for the encryption key before the import starts.

### Example: Minimum command to import data from a file in the Strapi project root

</Tabs>

## Provide an encryption key

If you are importing data from an encrypted file the encryption key can be passed with the `strapi import` command by using the `-k` or `--key` option.

### Example: Pass the encryption key with the `strapi import` command

</Tabs>

## Bypass all command line prompts

When using the `strapi import` command, you are required to confirm that the import will delete the existing database contents. The `--force` flag allows you to bypass this prompt. This option is useful for implementing `strapi import` programmatically. For programmatic use, you must also pass the `--key` option for encrypted files.

### Example of the `--force` option

</Tabs>

## Exclude data types during import

The default `strapi import` command imports your content (entities and relations), files (assets), project configuration, and schemas. The `--exclude` option allows you to exclude content, files, and the project configuration by passing these items in a comma-separated string with no spaces between the types. You can't exclude the schemas, as schema matching is used for `strapi import`.

:::warning
Any types excluded from the import will be deleted in your target instance. For example, if you exclude `config` the project configuration in your target instance will be deleted.
:::

:::note
Media such as images consist of the file (asset) and the entity in the database. If you use the `--exclude` flag to remove assets, the database records are still included, and could render as broken links.
:::

### Example: exclude assets from an import

</Tabs>

## Include only specified data types during import

The default `strapi import` command imports your content (entities and relations), files (assets), project configuration, and schemas. The `--only` option allows you to export only the listed items by passing a comma-separated string  with no spaces between the types. The available values are `content`, `files`, and `config`. Schemas are always imported, as schema matching is used for `strapi import`.

:::note
Media such as images consist of the file (asset) and the entity in the database. If you use the `--only` flag to import `content` the asset database records are still included, and could render as broken links.
:::

### Example: import only the project configuration

</Tabs>



# Data transfer
Source: https://docs-v4.strapi.io/dev-docs/data-management/transfer

# Data transfer

:::strapi v4.10.0+ feature
Data export is available in v4.10.0 and newer versions of Strapi. See the [Updates and Migration documentation](/dev-docs/update-version) to upgrade your application.
:::

The `strapi transfer` command streams your data from one Strapi instance to another Strapi instance. The `transfer` command uses strict schema matching, meaning your two Strapi instances need to be exact copies of each other except for the contained data. The default `transfer` command transfers your content (entities and relations), files (assets), project configuration, and schemas. The command allows you to transfer data:

- from a local Strapi instance to a remote Strapi instance
- from a remote Strapi instance to a local Strapi instance

:::caution

* If you are using an SQLite database in the destination instance other database connections will be blocked while the `transfer` operation is running.
* Admin users and API tokens are not transferred.
* If you use websockets or Socket.io in your projects, the transfer command will fail. You will need to **temporarily disable websockets or Socket.io** or ensure that your websocket server is running on a different port than the Strapi server, or a on a specific route within Strapi to use the transfer command.
:::

The CLI command consists of the following arguments:

| Option         | Description                                                                                                                                  |
|----------------|----------------------------------------------------------------------------------------------------------------------------------------------|
| `--to`         | Full URL of the `/admin` endpoint on the destination Strapi instance<br />(e.g. `--to https://my-beautiful-strapi-website/admin`)            |
| `‑‑to‑token`   | Transfer token from the Strapi destination instance.                                                                                         |
| `--from`       | Full URL of the `/admin` endpoint of the remote Strapi instance to pull data from (e.g., `--from https://my-beautiful-strapi-website/admin`) |
| `‑‑from‑token` | Transfer token from the Strapi source instance.                                                                                              |
| `--force`      | Automatically answer "yes" to all prompts, including potentially destructive requests, and run non-interactively.                            |
| `--exclude`    | Exclude data using comma-separated data types. The available types are: `content`, `files`, and `config`.                                    |
| `--only`       | Include only these data. The available types are: `content`, `files`, and `config`.                                                          |
| `--throttle`   | Time in milliseconds to inject an artificial delay between the "chunks" during a transfer.                                                   |

:::caution
Exactly one remote source `--from` or destination `--to` option must be provided.

If you want to transfer data from one remote Strapi to another you will have to go through your local instance to transfer the data.
:::

:::tip
Data transfers are authorized by transfer tokens, which are [managed from the admin panel](/user-docs/settings/transfer-tokens). From the admin panel, you can manage role-based permissions to tokens including `view`, `create`, `read`, `regenerate` and `delete`.
:::

:::warning
When using nginx and a server that proxies requests into a localhost, issues might occur. To prevent them, ensure all the headers are forwarded correctly by changing the configuration file in `/etc/nginx/sites-available/yourdomain` as follows:

```
server {
    listen 80;
    server_name <yourdomain>;
    location / {
        proxy_pass http://localhost:1337;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
        proxy_set_header Host $host;
        include proxy_params;
    }
}
```

:::

## Generate a transfer token

:::prerequisites
A salt transfer token should be defined in the [admin panel configuration](/dev-docs/configurations/admin-panel) file.
:::

The `strapi transfer` command requires a transfer token issued by the destination instance. To generate a transfer token in the admin panel use the instructions in the [User Guide](/user-docs/settings/transfer-tokens).

## Setup and run the data transfer

Initiating a data transfer depends on whether you want to push data to a remote instance or to pull data from the remote:

    </Tabs>
  
  4. Add the transfer token when prompted to do so.
  5. Answer **Yes** or **No** to the CLI prompt: "The transfer will delete all of the remote Strapi assets and its database. Are you sure you want to proceed?"

</TabItem>

  </Tabs>

4. Add the transfer token when prompted to do so.
5. Answer **Yes** or **No** to the CLI prompt: "The transfer will delete all of the local Strapi assets and its database. Are you sure you want to proceed?".

</TabItem>
</Tabs>

## Bypass all `transfer` command line prompts

When using the `strapi transfer` command, you are required to confirm that the transfer will delete the existing database contents. The `--force` flag allows you to bypass this prompt. This option is useful for implementing `strapi transfer` programmatically. You must pass the `to-token` option with the transfer token if you use the `--force` option.

:::caution
The `--force` option bypasses all warnings about content deletion.
:::

### Example: bypass the `transfer` command line prompts with `--force`

</Tabs>

## Include only specified data types during transfer

The default `strapi transfer` command transfers your content (entities and relations), files (assets), project configuration, and schemas. The `--only` option allows you to transfer only the listed items by passing a comma-separated string with no spaces between the types. The available values are `content`, `files`, and `config`. Schemas are always transferred, as schema matching is used for `strapi transfer`.

### Example: only transfer files

</Tabs>

## Exclude data types during transfer

The default `strapi transfer` command transfers your content (entities and relations), files (assets), project configuration, and schemas. The `--exclude` option allows you to exclude content, files, and the project configuration by passing these items in a comma-separated string with no spaces between the types. You can't exclude the schemas, as schema matching is used for `strapi transfer`.

### Example: exclude files from transfer

</Tabs>

:::warning
Any types excluded from the transfer will be deleted in your destination instance. For example, if you exclude `config` the project configuration in your destination instance will be deleted.
:::

## Manage data transfer with environment variables

The environment variable `STRAPI_DISABLE_REMOTE_DATA_TRANSFER` is available to disable remote data transfer. In addition to the [RBAC permissions](/user-docs/users-roles-permissions/configuring-administrator-roles#plugins-and-settings) in the admin panel this can help you secure your Strapi application. To use `STRAPI_DISABLE_REMOTE_DATA_TRANSFER` you can add it to your `.env` file or preface the `start` script. See the following example:

```bash
STRAPI_DISABLE_REMOTE_DATA_TRANSFER=true yarn start
```

Additional details on using environment variables in Strapi are available in the [Environment configurations documentation](/dev-docs/configurations/environment).

## Test the transfer command locally

The `transfer` command is not intended for transferring data between two local instances. The [`export`](/dev-docs/data-management/export) and [`import`](/dev-docs/data-management/import) commands were designed for this purpose. However, you might want to test `transfer` locally on test instances to better understand the functionality before using it with a remote instance. The following documentation provides a fully-worked example of the `transfer` process.

### Create and clone a new Strapi project

1. Create a new Strapi project using the installation command:

   ```bash
   npx create-strapi-app@latest <project-name> --quickstart
   ```

2. Create at least 1 content type in the project. See the [Quick Start Guide](/dev-docs/quick-start) if you need instructions on creating your first content type.

   :::caution
   Do not add any data to your project at this step.
   :::

3. Commit the project to a git repository:

   ```bash
   git init
   git add .
   git commit -m "first commit"
   ```

4. Clone the project repository:

   ```bash
   cd .. # move to the parent directory
   git clone <path to created git repository>.git/ <new-instance-name>
   ```

### Add data to the first Strapi instance

1. Return to the first Strapi instance and add data to the content type.
2. Stop the server on the first instance.

### Create a transfer token

1. Navigate to the second Strapi instance and run the `build` and `start` commands in the root directory:

</Tabs>

2. Register an admin user.
3. [Create and copy a transfer token](/user-docs/settings/transfer-tokens).
4. Leave the server running.

### Transfer your data

1. Return the the first Strapi instance.
2. In the terminal run the `strapi transfer` command:

</Tabs>

3. When prompted, apply the transfer token.
4. When the transfer is complete you can return to the second Strapi instance and see that the content is successfully transferred.

:::tip
In some cases you might receive a connection refused error targeting `localhost`. Try changing the address to [http://127.0.0.1:1337/admin](http://127.0.0.1:1337/admin).
:::



# Database migrations
Source: https://docs-v4.strapi.io/dev-docs/database-migrations

# Database migrations

Database migrations exist to run one-time queries against the database, typically to modify the tables structure or the data when upgrading the Strapi application. These migrations are run automatically when the application starts and are executed before the automated schema migrations that Strapi also performs on boot.

:::callout 🚧  Experimental feature
Database migrations are experimental. This feature is still a work in progress and will continue to be updated and improved. In the meantime, feel free to ask for help on the [forum](https://forum.strapi.io/) or on the community [Discord](https://discord.strapi.io).
:::

## Understanding database migration files

Migrations are run using JavaScript migration files stored in `./database/migrations`.

Strapi automatically detects migration files and run them once at the next startup in alphabetical order. Every new file is executed once. Migrations are run before the database tables are synced with the content-types schemas.

:::warning
* Currently Strapi does not support down migrations. This means that if you need to revert a migration, you will have to do it manually. It is planned to implement down migrations in the future but no timeline is currently available.

* Strapi will delete any unknown tables without warning. This means that database migrations can only be used to keep data when changing the Strapi schema. The `forceMigration` and `runMigrations` [database configuration parameters](/dev-docs/configurations/database#settings-configuration-object) can be used to fine-tune the database migrations behavior.
:::

Migration files should export the function `up()`, which is used when upgrading (e.g. adding a new table `my_new_table`).

The `up()` function runs in a database transaction which means if a query fails during the migration, the whole migration is cancelled, and no changes are applied to the database. If another transaction is created within the migration function, it will act as a nested transaction.

:::note
There is no CLI to manually execute the database migrations.
:::

## Creating a migration file

To create a migration file:

1. In the `./database/migrations` folder, create a new file named after the date and the name of the migration (e.g. `2022.05.10T00.00.00.name-of-my-migration.js`). Make sure that the file name follows this naming pattern, because the alphabetical order of the files defines the order in which the migrations have to run.

2. Copy and paste the following template in the previously created file:

```jsx
'use strict'

async function up(knex) {}

module.exports = { up };
```

3. Fill in the template by adding actual migration code inside the `up()` function.
`up()` receives a [Knex instance](https://knexjs.org/), already in a transaction state, that can be used to run the database queries.

<details>
<summary>Example of migration file</summary>

```jsx title="./database/migrations/2022.05.10T00.00.00.name-of-my-migration.js"

module.exports = {
  async up(knex) {
    // You have full access to the Knex.js API with an already initialized connection to the database

    // Example: renaming a table
    await knex.schema.renameTable('oldName', 'newName');

    // Example: renaming a column
    await knex.schema.table('someTable', table => {
      table.renameColumn('oldName', 'newName');
    });

    // Example: updating data
    await knex.from('someTable').update({ columnName: 'newValue' }).where({ columnName: 'oldValue' });
  },
};
```

</details>

### Using Strapi Instance for migrations

:::danger
If a user opts not to use Knex directly for migrations and instead utilizes the Strapi instance, it is important to wrap the migration code with `strapi.db.transaction()`. Failure to do so may result in migrations not rolling back if an error occurs.
:::

<details>
<summary>Example of migration file with Strapi instance</summary>

```jsx title="./database/migrations/2022.05.10T00.00.00.name-of-my-migration.js"
module.exports = {
  async up() {
    await strapi.db.transaction(async () => {
      // Your migration code here

      // Example: creating new entries
      await strapi.entityService.create('api::article.article', {
        data: {
          title: 'My Article',
        },
      });

      // Example: custom service method
      await strapi.service('api::article.article').updateRelatedArticles();
    });
  },
};
```

</details>



# Deployment
Source: https://docs-v4.strapi.io/dev-docs/deployment

# Deployment

Strapi provides many deployment options for your project or application. Your Strapi applications can be deployed on traditional hosting servers or your preferred hosting provider. 

The following documentation covers how to develop locally with Strapi and deploy Strapi with several common hosting options.

:::callout ☁️ Strapi Cloud
You can use [Strapi Cloud](/cloud/intro) to quickly deploy and host your project.
:::

:::tip
If you already created a data structure with the Content-Type Builder and added some data through the Content Manager to your local (development) Strapi instance, you can leverage the [data management system](/dev-docs/data-management) to transfer data from a Strapi instance to another one.

Another possible workflow is to first create the data structure locally, push your project to a git-based repository, deploy the changes to production, and only then add content to the production instance.
:::

## General guidelines

### Hardware and software requirements

To provide the best possible environment for Strapi the following requirements apply to development (local) and staging and production workflows.

</Tabs>

Run the server with the `production` settings:

</Tabs>

:::caution
We highly recommend using [pm2](https://github.com/Unitech/pm2/) to manage your process.
:::

If you need a server.js file to be able to run `node server.js` instead of `npm run start` then create a `./server.js` file as follows:

```js title="path: ./server.js"

const strapi = require('@strapi/strapi');
strapi(/* {...} */).start();
```

:::caution

If you are developing a `TypeScript`-based project you must provide the `distDir` option to start the server.
For more information, consult the [TypeScript documentation](/dev-docs/typescript#use-the-strapi-factory).
:::

### Advanced configurations

If you want to host the administration on another server than the API, [please take a look at this dedicated section](/dev-docs/admin-panel-customization#deployment).

## Deployment guides

Click on any of the following cards to read manual guides for deployment and optional software:



# AWS Deployment
Source: https://docs-v4.strapi.io/dev-docs/deployment/amazon-aws

# Amazon AWS

This is a step-by-step guide for deploying a Strapi project to [Amazon AWS EC2](https://aws.amazon.com/ec2/) inside your [AWS VPC](https://aws.amazon.com/vpc/). This guide will connect to an [Amazon AWS RDS](https://aws.amazon.com/rds/) for managing and hosting the database. Optionally, this guide will show you how to connect host and serve images on [Amazon AWS S3](https://aws.amazon.com/s3/).

:::prerequisites
- You have created a [Strapi project](/dev-docs/quick-start), to use for deploying on AWS.
- You have read through the [configuration](/dev-docs/deployment#application-configuration) section.
:::

</Tabs>

#### 3. Install the **Strapi AWS S3 Upload Provider**:

Path: `./my-project/`.

```bash
npm install @strapi/provider-upload-aws-s3
```

To enable and configure the provider, create or edit the file at `./config/plugins.js`.

</Tabs>

See the documentation about using an upload provider [here](/dev-docs/providers).

#### 4. Push your local changes to your project's GitHub repository

```bash
git add .
git commit -m 'Installed pg, aws-S3 upload provider and updated the config files'
git push
```

#### 5. Deploy from GitHub

You will next deploy your Strapi project to your EC2 instance by **cloning it from GitHub**.

:::note
Cloning a GitHub repository requires a personal access token. See the [GitHub documentation](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token) for how to generate and use a personal access token.
:::

From your terminal and logged into your EC2 instance as the `ubuntu` user:

```bash
cd ~
git clone https://github.com/your-name/your-project-repo.git
```

Next, navigate to the `my-project` folder, the root for Strapi. You will need to run `npm install` to install the packages for your project. Make sure to uninstall the sqlite3 package if you changed your database to PostgresSQL.

`Path: ./my-project/`

```bash
cd ./my-project/
npm install
NODE_ENV=production npm run build
```

Next, you need to install **PM2 Runtime** and configure the `ecosystem.config.js` file

#### 6. Install **PM2 Runtime**

[PM2 Runtime](https://pm2.keymetrics.io) allows you to keep your Strapi project alive and to reload it without downtime.

Ensure you are logged in as a **non-root** user. You will install **PM2** globally:

```bash
npm install pm2@latest -g
```

Now, you will need to configure an `ecosystem.config.js` file. This file will set `env` variables that connect Strapi to your database. It will also be used to restart your project whenever any changes are made to files within the Strapi file system itself (such as when an update arrived from Github). You can read more about this file [here](https://pm2.keymetrics.io/docs/usage/application-declaration/).

- You will need to open your `nano` editor and then `copy/paste` the following:

```bash
cd ~
pm2 init
sudo nano ecosystem.config.js
```

- Next, replace the boilerplate content in the file, with the following:

</Tabs>

You can also set your environment variables in a `.env` file in your project like so:

```
DATABASE_HOST=your-unique-url.rds.amazonaws.com
DATABASE_PORT=5432
DATABASE_NAME=strapi
DATABASE_USERNAME=postgres
DATABASE_PASSWORD=Password
AWS_ACCESS_KEY_ID=aws-access-key-id
AWS_ACCESS_SECRET=aws-access-secret
AWS_REGION=aws-region
AWS_BUCKET_NAME=my-project-bucket-name
```

We recommend you continue setting the `NODE_ENV` variable in the `ecosystem.config.js` file.

Use the following command to start `pm2`:

```bash
cd ~
pm2 start ecosystem.config.js
```

Your Strapi project should now be available on `http://your-ip-address:1337/`. Your IP address will be the one corresponding to your Ubuntu server.

:::tip
Earlier, `Port 1337` was allowed access for **testing and setup** purposes. After setting up **NGINX**, the **Port 1337** needs to have access **denied**.
:::

#### 7. Configure **PM2 Runtime** to launch project on system startup.

Follow the steps below to have your app launch on system startup.

:::tip
These steps are based on the [PM2 Runtime Startup Guide](https://pm2.keymetrics.io/docs/usage/startup/#startup-script-generator).
:::

- Generate and configure a startup script to launch PM2, it will generate a Startup Script to copy/paste, do so:

```bash
$ cd ~
$ pm2 startup systemd

[PM2] Init System found: systemd
[PM2] To setup the Startup Script, copy/paste the following command:
sudo env PATH=$PATH:/usr/bin /usr/lib/node_modules/pm2/bin/pm2 startup systemd -u your-name --hp /home/your-name
```

- Copy/paste the generated command:

```bash
$ sudo env PATH=$PATH:/usr/bin /usr/lib/node_modules/pm2/bin/pm2 startup systemd -u your-name --hp /home/your-name

[PM2] Init System found: systemd
Platform systemd

. . .

[PM2] [v] Command successfully executed.
+---------------------------------------+
[PM2] Freeze a process list on reboot via:
   $ pm2 save

[PM2] Remove init script via:
   $ pm2 unstartup systemd
```

- Next, `Save` the new PM2 process list and environment.

```bash
pm2 save

[PM2] Saving current process list...
[PM2] Successfully saved in /home/your-name/.pm2/dump.pm2

```

- **OPTIONAL**: You can test to see if the script above works whenever your system reboots with the `sudo reboot` command. You will need to login again with your **non-root user** and then run `pm2 list` and `systemctl status pm2-ubuntu` to verify everything is working.

### Create you first Administrator user

The next steps will create an Administrator user on the strapi AWS instance.

#### 1. Locate your `IPv4 Public IP`

- Login as your regular user to your `EC2 Dashboard`
- Click on `1 Running Instances`.
- Below, in the **Description** tab, locate your **IPv4 Public IP**

#### 2. Next, create your **Administrator** user, and login to Strapi

- Go to `http://your-ip-address:1337/admin`
- Complete the registration form.
- Click `Ready to Start`

### Set up a webhook

Providing that your project is set-up on GitHub, you will need to configure your **Strapi Project Repository** with a webhook. The following article provides additional information to the steps below: [GitHub Creating Webhooks Guide](https://developer.github.com/webhooks/creating/).

- You need to access the `Settings` tab for your `Strapi Project Repository`:

  1. Navigate and click to `Settings` for your repository.
  2. Click on `Webhooks`, then click `Add Webhook`.
  3. The fields are filled out like this:
     - Payload URL: Enter `http://your-ip-address:8080`
     - Content type: Select `application/json`
     - Which events would you like to trigger this webhook: Select `Just the push event`
     - Secret: Enter `YourSecret`
     - Active: Select the checkbox
  4. Review the fields and click `Add Webhook`.

- Next, you need to create a `Webhook Script` on your server. These commands create a new file called `webhook.js` which will hold two variables:

```bash
cd ~
mkdir NodeWebHooks
cd NodeWebHooks
sudo nano webhook.js
```

- In the `nano` editor, copy/paste the following script, but make sure to replace `your_secret_key` and `repo` with the values that correspond to your project, then save and exit.

(This script creates a variable called `PM2_CMD` which is used after pulling from GitHub to update your project. The script first changes to the home directory and then runs the variable `PM2_CMD` as `pm2 restart strapi`. The project uses the `ecosystem.config.js` as the point of starting your application.)

```js
var secret = 'your_secret_key'; // Your secret key from Settings in GitHub
var repo = '~/path-to-strapi-root-folder/'; // path to the root of your Strapi project on server

const http = require('http');
const crypto = require('crypto');
const exec = require('child_process').exec;

const PM2_CMD = 'cd ~ && pm2 startOrRestart ecosystem.config.js';

http
  .createServer(function(req, res) {
    req.on('data', function(chunk) {
      let sig =
        'sha1=' +
        crypto
          .createHmac('sha1', secret)
          .update(chunk.toString())
          .digest('hex');

      if (req.headers['x-hub-signature'] == sig) {
        exec(`cd ${repo} && git pull && NODE_ENV=production npm run build && ${PM2_CMD}`, (error, stdout, stderr) => {
          if (error) {
            console.error(`exec error: ${error}`);
            return;
          }
          console.log(`stdout: ${stdout}`);
          console.log(`stderr: ${stderr}`);
        });
      }
    });

    res.end();
  })
  .listen(8080);
```

- Allow the port to communicate with outside web traffic for `port 8080`:
  - Within your **AWS EC2** dashboard:
    - In the left hand menu, click on `Security Groups`,
    - Select with the checkbox, the correct `Group Name`, e.g. `strapi`,
    - At the bottom of the screen, in the **Inbound** tab, click `Edit`, and then `Add Rule`:
      - Type: `Custom TCP`
      - Protocol: `TCP`
      - Port Range: `8080`
      - Source: `Custom` `0.0.0.0/0, ::/0`
    - Then `Save`
  - If the `ufw` firewall is enabled, configure settings to include `port 8080` by running the following command:

```bash
sudo ufw allow 8080/tcp
```

Earlier you setup `pm2` to start the services (your **Strapi project**) whenever the **EC2 instance** reboots or is started. You will now do the same for the `webhook` script.

- Install the webhook as a `Systemd` service

  - Run `echo $PATH` and copy the output for use in the next step.

```bash
cd ~
echo $PATH

/home/your-name/.npm-global/bin:/home/your-name/bin:/home/your-name/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
```

- Create a `webhook.service` file:

```bash
sudo nano /etc/systemd/system/webhook.service
```

- In the `nano` editor, copy/paste the following script, but make sure to replace `ubuntu` **in two places** if you changed the default `ubuntu` user, and `paste the $PATH` from above.

:::caution
Delete the #comments before saving, then save and exit.
:::

```bash
[Unit]
Description=Github webhook
After=network.target

[Service]
Environment=PATH=/PASTE-PATH_HERE #path from echo $PATH (as above)
Type=simple
User=ubuntu #replace with your name, if changed from default ubuntu user
ExecStart=/usr/bin/node /home/ubuntu/NodeWebHooks/webhook.js #replace with your name, if changed from default ubuntu user
Restart=on-failure

[Install]
WantedBy=multi-user.target
```

- Enable and start the new service so it starts when the system boots:

```bash
sudo systemctl enable webhook.service
sudo systemctl start webhook
```

- Check the status of the webhook:

```bash
sudo systemctl status webhook
```

- You may test your **webhook** by following the instructions [here](https://www.digitalocean.com/community/tutorials/how-to-use-node-js-and-github-webhooks-to-keep-remote-projects-in-sync#step-4-testing-the-webhook).

### Further steps to take

- You can **add a domain name** or **use a subdomain name** for your Strapi project, you will need to [install NGINX](https://docs.nginx.com/nginx/admin-guide/installing-nginx/installing-nginx-open-source/) and [configure it](https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/nodejs-platform-proxy.html).
  :::tip
  After setting up **NGINX**, for security purposes, you need to disable port access on `Port 1337`. You may do this easily from your **EC2 Dashboard**. In `Security Groups` (left-hand menu), click the checkbox of the group, eg. `strapi`, and below in the `inbound` tab, click `Edit`, and delete the rule for `Port Range` : `1337` by click the `x`.
  :::
- To **install SSL**, you will need to [install and run Certbot by Let's Encrypt](https://certbot.eff.org/docs/using.html).

- Set-up [Nginx with HTTP/2 Support](https://www.digitalocean.com/community/tutorials/how-to-configure-nginx-as-a-reverse-proxy-on-ubuntu-22-04) for Ubuntu 22.04.

Your `Strapi` project has been installed on an **AWS EC2 instance** using **Ubuntu 22.04**.



# Azure Deployment
Source: https://docs-v4.strapi.io/dev-docs/deployment/azure

# Azure

This is a step-by-step guide for deploying a Strapi project to [Azure](https://azure.microsoft.com/) using Platform-as-a-Service (PaaS). If you're interested in using Infrastructure-as-a-Service (IaaS) refer to [IaaS deployment guide](#iaas-deployment-guide).

:::prerequisites

* You should have created a [Strapi project](/dev-docs/quick-start).
* You have should read through the [configuration documentation](/dev-docs/deployment#application-configuration).
* You must have an [Azure account](https://azure.microsoft.com/free/) before doing these steps.
:::

</Tabs>

#### 3. Installing PM2 and running Strapi as a service

Now we will install [PM2](https://pm2.keymetrics.io/docs/usage/quick-start/) to run Strapi as a service, and using the PM2 ecosystem config file we can define our environment variables.

:::tip
Using the lifecycle file **is not** required and is entirely optional, you can instead define your environment variables via the CLI
:::

Using Yarn, we will install `PM2` globally, and adjust our `.bashrc` file to allow us to use global Yarn packages:

```bash
# Install PM2
yarn global add pm2

# Edit our ~/.bashrc file for global Yarn packages
nano ~/.bashrc
```

You will want to paste the following **at the end** of the `.bashrc file:

```bash

```

From here you can either exit the service user and log back in for the changes to take effect or simply run:

```bash
source ~/.bashrc
```

And we will create our `ecosystem.config.js` using the `pm2 init` command, you should run this in your Strapi project directory

```bash
# Create the ecosystem file
pm2 init
```

You should get the message `File /srv/strapi/mystrapiapp/ecosystem.config.js generated`, lets go ahead and edit this file using `nano` and add our config settings.

```bash
nano /srv/strapi/mystrapiapp/ecosystem.config.js
```

Replace the boilerplate information with something like the following:

```js
module.exports = {
  apps: [
    {
      name: 'strapi-dev',
      cwd: '/srv/strapi/mystrapiapp',
      script: 'npm',
      args: 'start',
      env: {
        NODE_ENV: 'development',
        DB_HOST: 'localhost',
        DB_PORT: '5432',
        DB_NAME: 'strapi_dev',
        DB_USER: 'strapi',
        DB_PASS: 'mysecurepassword',
        JWT_SECRET: 'aSecretKey',
      },
    },
  ],
};
```

You can also set your environment variables in a `.env` file in your project like so:

```bash
DB_HOST=localhost
DB_PORT=5432
DB_NAME=strapi_dev
DB_USER=strapi
DB_PASS=mysecurepassword
JWT_SECRET=aSecretKey
```

We recommend you continue setting the `NODE_ENV` variable in the `ecosystem.config.js` file.

Then use the following command to start the Strapi service:

```bash
pm2 start ecosystem.config.js
```

The Strapi `PM2` service is now set-up to use an `ecosystem.config.js` to manage your application.

**OPTIONAL:** You may see your project and set-up your first administrator user, by [creating an admin user](/dev-docs/quick-start).

#### 4. Starting Strapi on boot and persisting service between reboots

Follow the steps below to have your app launch on system startup.

- Generate and configure a startup script to launch PM2, it will generate a Startup Script to copy/paste, do so:

```bash
pm2 startup systemd

[PM2] Init System found: systemd
[PM2] To setup the Startup Script, copy/paste the following command:
sudo env PATH=$PATH:/usr/bin /usr/lib/node_modules/pm2/bin/pm2 startup systemd -u your-name --hp /home/your-name
```

For the following command we want to be using your virtual machine admin user **not the service user**, to exit from the service user you can simply run the command `exit` to return to your admin user.

- Copy/paste the generated command as the virtual machine admin user (**DO NOT** use the below command as you need to replace the service user name, the previous command will give you exactly what you need):

```bash
sudo env PATH=$PATH:/usr/bin /usr/lib/node_modules/pm2/bin/pm2 startup systemd -u your-name --hp /home/your-name

[PM2] Init System found: systemd
Platform systemd

. . .

[PM2] [v] Command successfully executed.
+---------------------------------------+
[PM2] Freeze a process list on reboot via:
   $ pm2 save

[PM2] Remove init script via:
   $ pm2 unstartup systemd
```

Now as the service user run the following (again use `sudo su yourserviceuser` to change back)

- Next, `Save` the new `PM2` process list and environment.

```bash
pm2 save

[PM2] Saving current process list...
[PM2] Successfully saved in /home/your-name/.pm2/dump.pm2
```

- **OPTIONAL**: You can test to see if the script above works whenever your system reboots with the `sudo reboot` command. You will need to login again with your **service user** and then run `pm2 list` and `systemctl status pm2-your-name` to verify everything is working.

### Optional additions

Below are some optional additions to secure your virtual machine and Strapi service.

#### 1. Securing your virtual machine with a firewall

Azure virtual machines come with a firewall at the host level (see previous instructions [here](#_5-networking)). However it is recommended that you use the built in Ubuntu firewall as well known as UFW or Uncomplicated Firewall.

See the following [DigitalOcean guide](https://www.digitalocean.com/community/tutorials/how-to-set-up-a-firewall-with-ufw-on-ubuntu-18-04) to see some examples of using UFW.

#### 2. Installing a proxy for SSL

There are many different types of proxy services you could use, anything from load balancing, offloading SSL, to fault tolerance. You can view a few [examples](/dev-docs/deployment#optional-software-guides) based around Strapi and basic SSL offloading.

#### 3. File upload providers

There are many options for storing files outside of your virtual machine, Strapi have built a few and the community is constantly building new ones. See the [following guide](/dev-docs/providers) on searching for options as well as installing them.



# Caddy Proxying
Source: https://docs-v4.strapi.io/dev-docs/deployment/caddy-proxy

# Caddy Proxying

As Strapi does not handle SSL directly and hosting a Node.js service on the "edge" network is not a secure solution it is recommended that you use some sort of proxy application such as Nginx, Apache, HAProxy, Traefik, or others. This guide contains some sample configurations for Caddy, naturally these configs may not suit all environments and you will likely need to adjust them to fit your needs.

Caddy has some very easy to use options relating to Let's encrypt and automated SSL certificate issuing/renewing, while it is certainly the "newer" web server market, it is quickly becoming a great "non-technical" user application for proxying. 

:::note
 Caddy is still very much in development and as such is evolving often, this guide is based on Caddy v2.0.0.
:::

## Configuration

The following configuration is based on "Caddy File" type, this is a single file configuration that Caddy will use to run the web server. There are multiple other options such as the Caddy REST API that this guide will not cover, you should review the [Caddy documentation](https://caddyserver.com/docs/) for further information on alternatives. You can also visit the [Caddy Community](https://caddy.community/) to speak with others relating to configuration questions.

</Tabs>



# DigitalOcean Droplet Deployment
Source: https://docs-v4.strapi.io/dev-docs/deployment/digitalocean

# DigitalOcean Droplets

This is a step-by-step guide for deploying a Strapi project to a [DigitalOcean Droplet](https://www.digitalocean.com/docs/droplets/). Alternatively, you can also choose to deploy to DigitalOcean's Platform-as-a-Service (PaaS) called [App Platform](/dev-docs/deployment/digitalocean-app-platform) if database-related requirements and budget better fit with your use case.

This guide covers hosting the database on a DigitalOcean Droplet. Another option is to host the database externally as a service using [DigitalOcean Managed Databases](https://www.digitalocean.com/products/managed-databases/).

:::prerequisites
- You have created a [Strapi project with a local PostgreSQL database](https://tute.io/install-configure-strapi-postgresql).
- You have read through the [general deployment configuration](/dev-docs/deployment#application-configuration) section.
- You have created a DigitalOcean account. You can use [this referral link](https://try.digitalocean.com/strapi/).
:::

:::caution
When creating your Strapi project, don't use the `--quickstart` flag as the quick start installation uses SQLite, which is not desired for remote hosting.
:::

  </Tabs>

2. Push these changes to Github by running the following commands:

  ```bash
  git add .
  git commit -m "Configured production/database.json"
  git push
  ```

### Deploy from GitHub

You will now deploy your Strapi project to your Droplet by cloning it from GitHub.

1. From your terminal, logged in as the non-root user to your Droplet, run the following commands, replacing `your-handle` and `your-project` with your GitHub username and project's name:

  ```bash
  cd ~
  git clone https://github.com/your-handle/your-project.git
  ```

2. (_optional_) If using password-based authentication instead of a SSH key:

    - You will be prompted to enter `your-handle` and a password when attempting to clone. This is actually a [personal access token](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens) (PAT) as passwords have been [deprecated](https://github.blog/changelog/2021-08-12-git-password-authentication-is-shutting-down).
    - In order to overcome an [issue](https://stackoverflow.com/questions/22147574/github-fatal-could-not-read-username-for-https-github-com-no-such-file-o) with webhooks later on, run the following commands, replacing `your-handle`, `your-pat`, and `your-project` with the appropriate values:
      ```bash
      cd ~/your-project
      git remote add origin https://your-handle:your-pat@github.com/your-handle/your-project.git

      # If response is "fatal: remote origin already exists.", then run:
      git remote set-url origin https://your-handle:your-pat@github.com/your-handle/your-project.git
      ```

3. Navigate to your project's folder, which is the root folder for Strapi, and install the npm packages for your project by running the following commands, replacing `your-project` by your project's name on GitHub:

  ```bash
  cd your-project
  npm install
  ```

4. Build Strapi's admin panel by running the following command:

  ```bash
  NODE_ENV=production npm run build
  ```

5. As Strapi uses port 1337 by default, you must configure your `ufw` firewall to allow access to this port for testing and installation purposes, by running the following commands:

  ```bash
  cd ~
  sudo ufw allow 1337/tcp
  sudo ufw enable
  ```

  Press `y` to answer yes to the `Command may disrupt existing ssh connections. Proceed with operation (y|n)?` message. 

Your Strapi project is now installed on your DigitalOcean Droplet. Before being able to create your first user, you must install and configure [Nginx](#install-and-configure-nginx-web-server) and [pm2](#install-and-configure-pm2), configure the [`ecosystem.config.js` file and environment variables](#configure-the-ecosystemconfigjs-and-env-files), and [setup webhooks](#set-up-a-webhook-on-digitalocean--github).

### Install and configure Nginx web server

1. Follow the guide on the [official DigitalOcean documentation](https://www.digitalocean.com/community/tutorials/how-to-install-nginx-on-ubuntu-22-04) to install and configure Nginx, keeping in mind the following specificities:

    * You can add a domain name or use a subdomain name for your Strapi project.
    * References to `your_domain` in "Step 5 – Setting Up Server Blocks" should include the TLD, (e.g. `example.com`).
    * The location field in "Step 5 – Setting Up Server Blocks", specified as `try_files $uri $uri/ =404;`, must be replaced with the following:

        ```
        proxy_pass http://localhost:1337;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
        ```
    * Nginx has a [configuration setting](http://nginx.org/en/docs/http/ngx_http_core_module.html#client_max_body_size) called `client_max_body_size` that will prevent file uploads greater than the specified amount. This will need to be adjusted since its default is only 1MB. Note that strapi middleware is already in charge of parsing requests of file sizes up to 200MB.
      ```
      ...
      http {
        ...
        client_max_body_size 200m; # Or 0 to disable
        ...
      }
      ...
      ```

2. Close the port to outside traffic by running the following commands:

    ```bash
    cd ~
    sudo ufw deny 1337
    ```

### Install and configure pm2

[pm2](https://pm2.keymetrics.io) allows you to keep your Strapi project alive and to reload it without downtime.

Ensure you are logged in as a non-root user and install pm2 globally by running the following command:

```bash
npm install pm2@latest -g
```

### Configure the `ecosystem.config.js` and `.env` files

The `ecosystem.config.js` manages the database connection variables that Strapi needs to connect to your database. `ecosystem.config.js` is also used by `pm2` to restart your project whenever any changes are made to files within the Strapi file system itself, such as when an update arrives from GitHub. You can read more about the `ecosystem.config.js` file in the [official pm2 documentation](https://pm2.keymetrics.io/docs/usage/pm2-doc-single-page/).

1. Create the `ecosystem.config.js` file with the command below and open it. We'll use the `nano` editor:

    ```bash
    cd ~
    pm2 init
    sudo nano ecosystem.config.js
    ```

2. Replace the boilerplate content in the file with the following:

    ```js
    module.exports = {
      apps: [
        {
          name: 'strapi-app',
          cwd: '/home/your-name/your-project', // must have absolute path
          script: 'npm',
          args: 'start',
          env: {
            NODE_ENV: 'production',
          },
        },
      ],
    };
    ```

3. Go to `your-project` folder to create and open a `.env` file:

    ```bash
    cd ~/your-project
    sudo nano .env
    ```

4. Copy the contents of the local `.env` file for the Strapi application to the one currently open in `nano`. Replace the database name and credentials with the ones [specified](#install-the-database-for-your-project) during database setup.

    ```bash
    HOST=0.0.0.0
    PORT=1337
    APP_KEYS=your-app-keys # auto-generated
    API_TOKEN_SALT=your-api-token-salt # auto-generated
    ADMIN_JWT_SECRET=your-admin-jwt-secret # auto-generated
    TRANSFER_TOKEN_SALT=your-transfer-token-salt # auto-generated
    # Database
    DATABASE_CLIENT=postgres
    DATABASE_HOST=127.0.0.1
    DATABASE_PORT=5432
    DATABASE_NAME=your-database-name # specified during database setup
    DATABASE_USERNAME=your-database-username # specified during database setup
    DATABASE_PASSWORD=your-database-password # specified during database setup
    DATABASE_SSL=false
    JWT_SECRET=your-jwt-secret # auto-generated
    ```

5. Run the following commands to start `pm2`:

    ```bash
    cd ~
    pm2 start ecosystem.config.js
    ```

`pm2` is now set-up to use an `ecosystem.config.js` to manage restarting your application upon changes. This is a recommended best practice.

#### Configure `.env` to launch Strapi on system startup

The following steps are modified from the DigitalOcean [documentation for setting up PM2](https://www.digitalocean.com/community/tutorials/how-to-set-up-a-node-js-application-for-production-on-ubuntu-22-04#step-2-installing-pm2):

1. Generate a startup script to launch PM2 by running:

    ```bash
    $ cd ~
    $ pm2 startup systemd

    # Shell output
    [PM2] Init System found: systemd
    [PM2] To setup the Startup Script, copy/paste the following command:
    sudo env PATH=$PATH:/usr/bin /usr/lib/node_modules/pm2/bin/pm2 startup systemd -u your-name --hp /home/your-name
    ```

2. Copy the generated command from above and paste to the terminal:

    ```bash
    $ sudo env PATH=$PATH:/usr/bin /usr/lib/node_modules/pm2/bin/pm2 startup systemd -u your-name --hp /home/your-name

    # Shell output
    [PM2] Init System found: systemd
    Platform systemd

    # ...

    [PM2] [v] Command successfully executed.
    +---------------------------------------+
    [PM2] Freeze a process list on reboot via:
      $ pm2 save

    [PM2] Remove init script via:
      $ pm2 unstartup systemd
    ```

3. Save the new PM2 process list and environment:

    ```bash
    pm2 save

    # Shell output
    [PM2] Saving current process list...
    [PM2] Successfully saved in /home/your-name/.pm2/dump.pm2

    ```

:::tip
You can test to see if the script above works whenever your system reboots with the `sudo reboot` command. Login again with your non-root user and run `pm2 list` and `systemctl status pm2-your-name` to verify everything is working. You can also check logs with `pm2 logs strapi-app --lines 20`.
:::

The Strapi production server should now be available at the domain that was [specified](#install-and-configure-nginx-web-server) during Nginx setup. The login screen is available at the `/admin` endpoint to that same domain.

### Set up a webhook on DigitalOcean/GitHub

Providing that your project is set up on GitHub, you must configure your Strapi project repository there with a webhook.

:::note
More information can be found on webhooks in general in the [GitHub documentation](https://developer.github.com/webhooks/creating/) and [DigitalOcean documentation](https://www.digitalocean.com/community/tutorials/how-to-use-node-js-and-github-webhooks-to-keep-remote-projects-in-sync).
:::

1. Go to `your-project` on GitHub and set up a webhook by following [step 1](https://www.digitalocean.com/community/tutorials/how-to-use-node-js-and-github-webhooks-to-keep-remote-projects-in-sync#step-1-setting-up-a-webhook) from the DigitalOcean article. Make note of what was entered for `your-webhook-secret` for later.

2. Create a webhook script on your server. The following commands create a new file called `webhook.js` which will hold 2 variables:

    ```bash
    cd ~
    mkdir NodeWebhooks
    cd NodeWebhooks
    sudo nano webhook.js
    ```

3. In the open `nano` editor, paste the following script, ensuring to update the values for the `secret` and `repo` variables at the top of the file. Then save and exit.

    ```js
    var secret = 'your-webhook-secret'; // created in GitHub earlier
    var repo = '~/your-project';

    const http = require('http');
    const crypto = require('crypto');
    const exec = require('child_process').exec;

    const PM2_CMD = 'cd ~ && pm2 startOrRestart ecosystem.config.js';

    http
      .createServer(function(req, res) {
        req.on('data', function(chunk) {
          let sig =
            'sha1=' +
            crypto
              .createHmac('sha1', secret)
              .update(chunk.toString())
              .digest('hex');

          if (req.headers['x-hub-signature'] == sig) {
            exec(`cd ${repo} && git pull && NODE_ENV=production npm run build && ${PM2_CMD}`, (error, stdout, stderr) => {
              if (error) {
                console.error(`exec error: ${error}`);
                return;
              }
              console.log(`stdout: ${stdout}`);
              console.log(`stderr: ${stderr}`);
            });
          }
        });

        res.end();
      })
      .listen(8080);
    ```

  :::info
  The script above declares a variable called `PM2_CMD` which is used after pulling from GitHub to update your project. The script first changes to the home directory and then runs the variable `PM2_CMD` as `pm2 restart strapi`.
  :::

4. Allow the port to communicate with outside web traffic for port 8080 by running the following scripts:

    ```bash
    sudo ufw allow 8080/tcp
    sudo ufw enable
    ```

    Press `y` to accept the `Command may disrupt existing ssh connections. Proceed with operation (y|n)?` message.

  Earlier you setup `pm2` to start the services for `your-project` whenever the Droplet reboots or is started. You will now do the same for the `webhook.js` script.

5. Install the webhook as a `systemd` service. First run `echo $PATH` and copy the output for use in the next step.

  ```bash
  echo $PATH

  # Shell output
  /home/your-name/.npm-global/bin:/home/your-name/bin:/home/your-name/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
  ```

6. Create a `webhook.service` file:

  ```bash
  sudo nano /etc/systemd/system/webhook.service
  ```

7. Paste the configuration details below into the open `nano` editor. Make sure to replace `your-name` in both places with your username. Following that, paste the path that was outputted to the shell above in place of `your-path`, then save and exit:

  ```bash
  [Unit]
  Description=Github webhook
  After=network.target

  [Service]
  Environment=PATH=your-path
  Type=simple
  User=your-name
  ExecStart=/usr/bin/node /home/your-name/NodeWebhooks/webhook.js
  Restart=on-failure

  [Install]
  WantedBy=multi-user.target
  ```

8. Enable and start the new service so it starts when the system boots:

  ```bash
  sudo systemctl enable webhook.service
  sudo systemctl start webhook
  ```

9. Check the status of the webhook:

  ```bash
  sudo systemctl status webhook
  ```

10. (_optional_) Test your webhook as shown [in the DigitalOcean documentation](https://www.digitalocean.com/community/tutorials/how-to-use-node-js-and-github-webhooks-to-keep-remote-projects-in-sync#step-4-testing-the-webhook) except using the `node webhook.js` command since `nodejs` is depreciated. Sometimes GitHub will show a successful recent delivery even if there is an authentication failure. The most reliable way is to push code changes to the GitHub repository and then run `sudo systemctl status webhook` again to see if the latest commit SHA has been registered.

### Further steps to take

- To install SSL, you will need to [install and run Certbot](https://www.digitalocean.com/community/tutorials/how-to-secure-nginx-with-let-s-encrypt-on-ubuntu-22-04) by Let's Encrypt.
- Set-up [Nginx with HTTP/2 Support](https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-with-http-2-support-on-ubuntu-22-04) for Ubuntu 22.04.

🥳 Your Strapi project has been installed on a DigitalOcean Droplet using Ubuntu 22.04.



# DigitalOcean App Platform
Source: https://docs-v4.strapi.io/dev-docs/deployment/digitalocean-app-platform

# Deploy to the DigitalOcean App Platform

The purpose of this guide is to allow users to deploy Strapi applications on the DigitalOcean App Platform. This guide uses the PostgreSQL development database provided by DigitalOcean, so applications can be tested in a deployed environment. At the end of the guide there is information on how to connect a Strapi application to a DigitalOcean Managed Database. Additional information about [migrating local database content to a production database](https://docs.digitalocean.com/products/databases/postgresql/how-to/import-databases/) and other deployment topics are provided in the [DigitalOcean documentation](https://docs.digitalocean.com/).

:::caution
Strapi maintains deployment guides to assist users in deploying projects. Since there are frequent updates to Strapi and to the hosting provider platforms, the guides are sometimes out of date. If you encounter an issue deploying your project following this guide, please [open an issue on GitHub](https://github.com/strapi/documentation/issues) or [submit a pull request](https://github.com/strapi/documentation/pulls) to improve the documentation.
:::

</Tabs>

4. Create `server.js` inside the `./config/env/production` directory.
5. Add the code snippet to the `server` configuration file:

</Tabs>

6. Add PostgreSQL dependencies by installing [`pg` package](https://www.npmjs.com/package/pg):

</Tabs>

7. Verify that all of the new and modified files are saved locally.
8. Commit the project to a remote repository:

```sh
git add .
git commit -m "commit message"
git push
```

## Create and configure a DigitalOcean App

Deploying on the DigitalOcean App Platform requires creating an App, connecting the App to a development database, and setting environment variables. At the end of the following steps a Strapi application should be successfully deployed.

### Create a DigitalOcean App

From the DigitalOcean website create and App and connect it to a GitHub repository:

1. Click on the **Create** button and select *Apps*.
2. Select GitHub and authorize access to the correct repository.
3. Select the branch.
4. (optional) Select the source directory.
5. Choose whether or not to "Autodeploy" when an update is pushed to the GitHub repository.
6. Click the **Next** button.

### Connect an App to a database

After creating an App attach a development database. To add a development database on the following screen:

1. Click **Add Resource**.
2. Select *Database* and click **Add**.
3. Select *Dev Database* and name the database. The default database name is "db" and is used to prefix the database values in the [global environment table](#add-environment-variables). If another database name is used, it should be substituted for "db".
4. Click the **Create and Attach** button.
5. Click the **Next** button to set the Environment Variables (Env Vars).

### Add environment variables

In the DigitalOcean App Platform there are Global and Component-level environment variables. Strapi applications in production need Global-level variables to set the database connection, and can use either Component or Global-level variables for secrets storage. The following procedure is to add the database variables at the Global level and store the Strapi secrets at the Component level.

1. Add the database, URL, and NODE_ENV variables to the global environment table:

    | Variable name       | Value            |
    |---------------------|------------------|
    | `APP_URL`           | `${APP_URL}`     |
    | `DATABASE_HOST`     | `${db.HOSTNAME}` |
    | `DATABASE_PORT`     | `${db.PORT}`     |
    | `DATABASE_NAME`     | `${db.DATABASE}` |
    | `DATABASE_USERNAME` | `${db.USERNAME}` |
    | `DATABASE_PASSWORD` | `${db.PASSWORD}` |
    | `NODE_ENV`          | `production`     |

    :::tip
    You can use the **Bulk Editor** button in the App Platform to add the preceding variables by copying and pasting the following code block:

    ```bash
    APP_URL=${APP_URL}
    DATABASE_HOST=${db.HOSTNAME}
    DATABASE_PORT=${db.PORT}
    DATABASE_NAME=${db.DATABASE}
    DATABASE_USERNAME=${db.USERNAME}
    DATABASE_PASSWORD=${db.PASSWORD}
    NODE_ENV=production
    ```

    :::
2. Add the key-value pairs for the Strapi secrets to the component environment variables table:

    | Variable name                     | value                                 |
    |-----------------------------------|---------------------------------------|
    | `APP_KEYS`                        | `"unique user-generated secrets here"`|
    | `API_TOKEN_SALT`                  | `"unique user-generated secret here"` |
    | `ADMIN_JWT_SECRET`                | `"unique user-generated secret here"` |
    | `JWT_SECRET`                      | `"unique user-generated secret here"` |
    | (optional)`TRANSFER_TOKEN_SALT`   | `"unique user-generated secret here"` |

3. Click **Next**.

:::note
It is possible to copy the secrets from the local `.env` file or to generate new secrets using a random secret generator. Examples can be found at [OpenSSL](https://www.openssl.org/).
:::

4. (optional) Edit the App name and Region and click **Save**
5. Click **Next**.
6. Click **Create Resources** to create the App and database.

## Deploy and access a Strapi application

When the preceding steps are completed DigitalOcean should automatically try to build and deploy the application. The Strapi admin panel is accessed at `{your App domain}/admin` once the application is successfully deployed.

:::tip
If the build does not start, click the **Actions** button and select *force rebuild and deploy*.
:::

## Add a managed database

DigitalOcean managed databases are a production-scale database solution for a deployed Strapi application. Switching from a development database to a managed database requires modifying the Strapi application and modifying the settings on DigitalOcean:

- removing the development database and database environment variables,
- installing the `pg-connection-string` dependency,
- changing the production `database` configuration file,
- creating and attaching the database in the DigitalOcean platform.

### Modify the Strapi application

When a managed database is attached to a Strapi application, the connection parameters are passed directly from the database to the application `.yaml` file (*App Spec* in the DigitalOcean settings). This requires a modification to the `config/env/production/database` file and the addition of the `pg-connection-string` dependency.

To add the `pg-connection-string` dependency navigate to the project directory and install `pg-connection-string`:

</Tabs>

To switch to a managed database modify the `config/env/production/database` file to be able to parse the `DATABASE_URL`:

</Tabs>

### Create a managed database on DigitalOcean

Changing the settings on the DigitalOcean App Platform to incorporate a managed database requires creating and attaching the database to an existing Strapi application. Additionally, the database environment variables must be removed, as managed databases propagate the connection properties automatically.  

1. Click on the **Create** button from any DigitalOcean page and select *Databases*.
2. Select a location (use the same location as the application location).
3. Select the PostgreSQL database engine.
4. Select a database configuration.
5. Click the **Create a Database Cluster** button.

### Attach the managed database to an App

After creating the managed database, navigate to the application page:

1. Click on the **Create** button and select *Create/Attach Database*.
2. Select *Previously Created DigitalOcean Database*.
3. Use the picklist to select the previously created database.
4. Click **Attach Database**.

### Configure environment variables for production-ready managed database

Remove the previously added 'DATABASE_*' global variables added for connecting to the dev database, then set the following environment variables, inserting your database name (e.g. `db-postgresql-nyc3-1234`) in place of `dbClusterName`:

  | Variable name       | Value                          |
  |---------------------|--------------------------------|
  | `DATABASE_URL`      | `${dbClusterName.DATABASE_URL}`|
  | `DATABASE_CA`       | `${dbClusterName.CA_CERT}`     |

After attaching the database, DigitalOcean will attempt to auto-deploy the application. If the deployment is successful a link to the application will be provided at the top of the application page.

:::caution
The environmental variables for the development and managed database are handled differently by DigitalOcean. When connected to a managed database DigitalOcean passes the environmental variables automatically. If the App build fails due to database connection errors check the `.yaml` file (*App Spec* in the DigitalOcean Settings) to confirm the database settings are set at the top of the file and that there are no database environment variables in the file. If there are database environment variables, download the file, delete the environment variables and upload the edited file to DigitalOcean.
:::



# HAProxy Proxying
Source: https://docs-v4.strapi.io/dev-docs/deployment/haproxy-proxy

# HAProxy Proxying

As Strapi does not handle SSL directly and hosting a Node.js service on the "edge" network is not a secure solution it is recommended that you use some sort of proxy application such as Nginx, Apache, HAProxy, Traefik, or others. The following documentation provides some sample configurations for HAProxy, naturally these configs may not suit all environments and you will likely need to adjust them to fit your needs.

## Configuration

The following examples are acting as an "SSL termination" proxy, meaning that HAProxy is only accepting the requests on SSL and proxying to other backend services such as Strapi or other web servers. HAProxy cannot serve static content and as such it is usually used to handle multi-server deployments in a failover or load-balance situation. The following examples are based around everything existing on the same server, but could easily be tweaked for multi-server deployments.

</Tabs>



# Heroku
Source: https://docs-v4.strapi.io/dev-docs/deployment/heroku

# Deploy to Heroku

The purpose of this guide is to allow users to deploy Strapi applications on Heroku. This guide uses the Heroku CLI tool with a PostgreSQL database provided by Heroku. There are other options for how to deploy to Heroku available in the [Heroku documentation](https://devcenter.heroku.com/categories/data-management).

:::caution

- The Content-type Builder is disabled in production. See the documentation [FAQ for PaaS](/dev-docs/faq#why-are-my-application-s-database-and-uploads-resetting-on-paas) and the [FAQ for content-types in production](/dev-docs/faq#why-can-t-i-create-or-update-content-types-in-production-staging) for more information. Changes to the content structure should be developed locally and then deployed to production.

- Strapi maintains deployment guides to assist users in deploying projects. Since there are frequent updates to Strapi and to the hosting provider platforms, the guides are sometimes out of date. If you encounter an issue deploying your project following this guide, please [open an issue on GitHub](https://github.com/strapi/documentation/issues) or [submit a pull request](https://github.com/strapi/documentation/pulls) to improve the documentation.

:::

Prior to starting the deployment process, each user needs:

- a [Heroku account](https://signup.heroku.com/),
- [Git version control](https://docs.github.com/en/get-started/quickstart/set-up-git),
- an existing Strapi application.

</Tabs>

4. Create `server.js` inside the `./config/env/production` directory.
5. Add the following code snippet to the `server` configuration file:

</Tabs>

6. Add PostgreSQL dependencies by installing [`pg` package](https://www.npmjs.com/package/pg) and [`pg-connection-string` package](https://www.npmjs.com/package/pg-connection-string):

</Tabs>

7. Add `package-lock.json` to the end of the `.gitignore` file at the root of the Strapi project:

  ```sh
  # path: ./.gitignore
  package-lock.json
  ```

  :::info
  It is usually recommended to version the `package-lock.json` file, but it might cause issues on Heroku.
  :::

8. Verify that all of the new and modified files are saved locally.

9. Commit the project to a local repository:

  ```sh
  git init
  git add .
  git commit -m "commit message"
  ```

## Create and configure a Heroku App

Deploying to Heroku requires installing the CLI tool, creating an App, connecting the App to a database, and setting environment variables. At the end of the following steps, a Strapi application should be successfully deployed.

### Install and use the Heroku CLI

1. Use the following OS-specific installation instructions to install the Heroku CLI tool:

</Tabs>

2. Login to Heroku from the CLI, following the command-line instructions:

  ```bash
  heroku login
  ```

### Create a Heroku project

Create a new Heroku project by running the following command in the root directory of the Strapi project:

```bash
# path: ./my-project/
heroku create
```

:::tip
The command `heroku create custom-project-name`, creates the `custom-project-name.heroku.com` URL. Otherwise, Heroku automatically generates a random project name (and URL).
:::

To initialize a local project folder with an existing Heroku project use the following command:

```bash
# path: ./my-project/
heroku git:remote -a your-heroku-app-name
```

The local development environment is now set up and configured to work with Heroku.

### Create a Heroku database

The following command creates and connects a PostgreSQL database with the Heroku project. Consult the [Heroku documentation](https://devcenter.heroku.com/articles/heroku-postgresql) for database plan names and costs.

```bash
# path: ./my-project/
heroku addons:create heroku-postgresql:

</Tabs>

:::tip
On Windows, secrets can be generated manually by running `node -p "require('crypto').randomBytes(48).toString('base64');"` and subsequently set on Heroku using the command `heroku config:set SECRET_NAME=your-key-here` for each variable.
:::

### Deploy an application to Heroku

In the project root directory run the `git push heroku HEAD:main` CLI command to push the project to the Heroku server:

```bash
# path: ./my-project/`
git push heroku HEAD:main
```

The deployment may take a few minutes. At the end, logs will display the URL of the project (e.g. `https://mighty-taiga-80884.herokuapp.com`). The project can also be opened from the command line:

```bash
# path: ./my-project/`
heroku open
```

The Strapi Welcome page indicates that the project is correctly set up, configured, and deployed on Heroku. Next, set up an `admin user` as the production database is brand-new and empty. Add `/admin` to the end of the website address to access the signup page.

## Update your project

Modifications that require writing to model creation or other JSON files, such as creating or changing content types, require making those changes on the local development environment and then pushing the changes to Heroku. See the documentation [FAQ for PaaS](/dev-docs/faq#why-are-my-application-s-database-and-uploads-resetting-on-paas) and the [FAQ for content-types in production](/dev-docs/faq#why-can-t-i-create-or-update-content-types-in-production-staging) for more information.

Further development can benefit from [version control](https://devcenter.heroku.com/articles/github-integration), or continue  using `git push heroku HEAD:main` to commit and push changes to Heroku directly.

`Path: ./my-project/`

```bash
git add .
git commit -am "Changes to my-project noted"
git push heroku HEAD:main
heroku open
```

:::tip
If you encounter the error `'heroku' does not appear to be a git repository` when running `git push`, run the following command: `heroku git:remote -a your-app-name`.
:::

## Upload Files

Like with project updates on Heroku, the file system doesn't support local uploading of files as they are deleted when Heroku "cycles" the dyno. This type of file system is called [ephemeral](https://devcenter.heroku.com/articles/dynos#ephemeral-filesystem), which means the file system only lasts until the dyno is restarted (with Heroku this happens any time the application is redeployed or during the regular restart which can happen every few hours or every day).

Due to Heroku's filesystem, an upload provider such as AWS S3 or Cloudinary is required. Additional details are available in the [installing providers documentation](/dev-docs/providers). The [Strapi Market](https://market.strapi.io/providers) contains providers from both Strapi and the community. Additional community providers are available from [npmjs.com](https://www.npmjs.com/search?q=strapi-provider-upload-&page=0&perPage=20).



# Hosting Guides
Source: https://docs-v4.strapi.io/dev-docs/deployment/hosting-guides

# Hosting Provider Guides

:::prerequisites
* Your Strapi project is [created](/dev-docs/installation) and its code is hosted on GitHub.
* You have read the [general deployment guidelines](/dev-docs/deployment#general-guidelines).
:::

To manually deploy your Strapi project on 3rd-party platforms, click on any of the following guides:



# Nginx Proxying
Source: https://docs-v4.strapi.io/dev-docs/deployment/nginx-proxy

# Nginx Proxying

As Strapi does not handle SSL directly and hosting a Node.js service on the "edge" network is not a secure solution it is recommended that you use some sort of proxy application such as Nginx, Apache, HAProxy, Traefik, or others. The following documentation provides some sample configurations for Nginx, naturally these configs may not suit all environments and you will likely need to adjust them to fit your needs.

## Configuration

The following configuration is based on Nginx virtual hosts, this means that you create configurations for each domain to allow serving multiple domains on the same port such as 80 (HTTP) or 443 (HTTPS). It also uses a central upstream file to store an alias to allow for easier management, load balancing, and failover in the case of clustering multiple Strapi deployments.

</Tabs>



# Optional Software Guides
Source: https://docs-v4.strapi.io/dev-docs/deployment/optional-software-guides

# Optional Software Guides

:::prerequisites
* Your Strapi project is [created](/dev-docs/installation) and its code is hosted on GitHub.
* You have read the [general deployment guidelines](/dev-docs/deployment#general-guidelines).
* You have deployed Strapi on a [3rd-party platform](/dev-docs/deployment/hosting-guides) or on your own server.
:::

The following guides are for optional software additions that compliment or improve the [deployment](/dev-docs/deployment) process when using Strapi in a production or production-like environment:



# Process Manager
Source: https://docs-v4.strapi.io/dev-docs/deployment/process-manager

# Process manager

Process managers allow you to keep your Strapi application running and to reload it without downtime. The following documentation uses the [PM2](https://pm2.keymetrics.io/) process manager and describes:

- installing PM2,
- starting Strapi using a `server.js` file,
- starting Strapi using the `strapi` command,
- starting and managing Strapi using an `ecosystem.config.js` file.

The appropriate procedure for starting PM2 depends on the hosting provider and your application configuration.

## Install PM2

Install PM2 globally:

</Tabs>

## Start PM2 with a `server.js` file

The basic usage to start an application with PM2 is to run a command such as `pm2 start server.js`. To configure and run your application:

1. Create a `server.js` file at the application root.
2. Add the following code snippet to the `server.js` file:

</Tabs>

3. Start the server by running `pm2 start server.js` in the project root directory.

:::note
TypeScript projects require additional code in the `server.js` file to identify the correct directory. See the previous TypeScript code example or the [TypeScript documentation](/dev-docs/typescript#start-strapi-programmatically) for additional details.
:::

## Start PM2 with the `strapi` command - Production

To start PM2 and your application from a terminal you should start PM2 and pass the application name and start command as arguments:

</Tabs>

## Start PM2 with the `strapi` command - Development

To start PM2 and your development application from a terminal you should start PM2 and pass the application name and start command as arguments:

</Tabs>

## Start and configure PM2 with a `config.js` file

A PM2 configuration file allows you to save the information necessary to start your server properly at any time. This is commonly used for cloud hosting providers, where you might not have access to a terminal window to start the server. To use a configuration file:

1. Run `pm2 init` at the application root to create an `ecosystem.config.js` file.
2. Replace the `ecosystem.config.js` file content with the following code example:

</Tabs>

3. Run `pm2 start ecosystem.config.js` to start the PM2 process.

:::note
The `ecosystem.config.js` code example is the minimum configuration. The [PM2 ecosystem file documentation](https://pm2.keymetrics.io/docs/usage/application-declaration/) provides all of the configuration options.
:::



# Error handling
Source: https://docs-v4.strapi.io/dev-docs/error-handling

# Error handling

Strapi is natively handling errors with a standard format.

There are 2 use cases for error handling:

- As a developer querying content through the [REST](/dev-docs/api/rest) or [GraphQL](/dev-docs/api/graphql) APIs, you might [receive errors](#receiving-errors) in response to the requests.
- As a developer customizing the backend of your Strapi application, you could use controllers and services to [throw errors](#throwing-errors).

## Receiving errors

Errors are included in the response object with the `error` key and include information such as the HTTP status code, the name of the error, and additional information.

### REST errors

Errors thrown by the REST API are included in the [response](/dev-docs/api/rest#requests) that has the following format:

```json
{
  "data": null,
  "error": {
    "status": "", // HTTP status
    "name": "", // Strapi error name ('ApplicationError' or 'ValidationError')
    "message": "", // A human readable error message
    "details": {
      // error info specific to the error type
    }
  }
}
```

### GraphQL errors

Errors thrown by the GraphQL API are included in the [response](/dev-docs/api/graphql#unified-response-format) that has the following format:

```json
{ "errors": [
    {
      "message": "", // A human reable error message
      "extensions": {
        "error": {
          "name": "", // Strapi error name ('ApplicationError' or 'ValidationError'),
          "message": "", // A human reable error message (same one as above);
          "details": {}, // Error info specific to the error type
        },
        "code": "" // GraphQL error code (ex: BAD_USER_INPUT)
      }
    }
  ],
  "data": {
    "graphQLQueryName": null
  }
}
```

## Throwing errors

### Controllers and middlewares

The recommended way to throw errors when developing any custom logic with Strapi is to have the [controller](/dev-docs/backend-customization/controllers) or [middleware](/dev-docs/backend-customization/middlewares) respond with the correct status and body.

This can be done by calling an error function on the context (i.e. `ctx`). Available error functions are listed in the [http-errors documentation](https://github.com/jshttp/http-errors#list-of-all-constructors) but their name should be lower camel-cased to be used by Strapi (e.g. `badRequest`).

Error functions accept 2 parameters that correspond to the `error.message` and `error.details` attributes [received](#receiving-errors) by a developer querying the API:

- the first parameter of the function is the error `message`
- and the second one is the object that will be set as `details` in the response received

</Tabs>

### Services and models lifecycles

Once you are working at a deeper layer than the controllers or middlewares there are dedicated error classes that can be used to throw errors. These classes are extensions of [Node `Error` class](https://nodejs.org/api/errors.html#errors_class_error) and are specifically targeted for certain use-cases.

These error classes are imported through the `@strapi/utils` package and can be called from several different layers. The following examples use the service layer but error classes are not just limited to services and model lifecycles. When throwing errors in the model lifecycle layer, it's recommended to use the `ApplicationError` class so that proper error messages are shown in the admin panel.

:::note
See the [default error classes](#default-error-classes) section for more information on the error classes provided by Strapi.
:::

<details>
<summary>Example: Throwing an error in a service</summary>

This example shows wrapping a [core service](/dev-docs/backend-customization/services#extending-core-services) and doing a custom validation on the `create` method:

</Tabs>

</details>

<details>
<summary>Example: Throwing an error in a model lifecycle</summary>

This example shows building a [custom model lifecycle](/dev-docs/backend-customization/models#lifecycle-hooks) and being able to throw an error that stops the request and will return proper error messages to the admin panel. Generally you should only throw an error in `beforeX` lifecycles, not `afterX` lifecycles.

</Tabs>

</details>

### Policies

[Policies](/dev-docs/backend-customization/policies) are a special type of middleware that are executed before a controller. They are used to check if the user is allowed to perform the action or not. If the user is not allowed to perform the action and a `return false` is used then a generic error will be thrown. As an alternative, you can throw a custom error message using a nested class extensions from the Strapi `ForbiddenError` class, `ApplicationError` class (see [Default error classes](#default-error-classes) for both classes), and finally the [Node `Error` class](https://nodejs.org/api/errors.html#errors_class_error).

The `PolicyError` class is available from `@strapi/utils` package and accepts 2 parameters:

- the first parameter of the function is the error `message`
- (optional) the second parameter is the object that will be set as `details` in the response received; a best practice is to set a `policy` key with the name of the policy that threw the error.

<details>
<summary>Example: Throwing a PolicyError in a custom policy</summary>

This example shows building a [custom policy](/dev-docs/backend-customization/policies) that will throw a custom error message and stop the request.

</Tabs>

</details>

### Default error classes

The default error classes are available from the `@strapi/utils` package and can be imported and used in your code. Any of the default error classes can be extended to create a custom error class. The custom error class can then be used in your code to throw errors.

<!-- Not sure if it's worth keeping this tab or not as it's very specific to Strapi internal use-cases -->
<!-- ::: tab Validation

The `ValidationError` and `YupValidationError` classes are specific error classes designed to be used with the built in validations system and specifically format the errors coming from [Yup](https://www.npmjs.com/package/yup). The `ValidationError` does not accept any parameters but the `YupValidationError` accepts the following parameters:

| Parameter | Type | Description | Default |
| --- | --- | --- | --- |
| `message` | `string` | The error message | - |
| `details` | `object` | Object to define additional details | `{ yupErrors }` |

```js

```js
throw new PolicyError('Something went wrong', { policy: 'my-policy' });
```

::: -->

</Tabs>



# FAQ
Source: https://docs-v4.strapi.io/dev-docs/faq

# Frequently Asked Questions

Below are answers and solutions to most common issues that you may experience when working with Strapi.

## Why can't I create or update content-types in production/staging?

Strapi stores model configuration files (what defines the model schema) in files such as `./src/api/restaurant/content-types/restaurant/schema.json`. Due to how Node.js works, in order for changes to take effect, that would require Node to restart the server. This could potentially cause downtime of your production service and likewise these changes should be tracked in some kind of source control.

Generally your "flow" of development would follow the following path:

- Development - Develop your Strapi application locally on your host machine, then push changes into source control
- Staging - Deploy changes from source control to a "production-like" environment for testing
- Production - If no other changes are needed, deploy into production
- Repeat as needed, it is recommended that you properly version and test your application as you go

At this time and in the future there is no plan to allow model creating or updating while in a production environment, and there is currently no plans to move model settings into the database. There are no known nor recommended workarounds for this.

## Does Strapi handle deploying or migrating of content?

Strapi does offer a feature known as [Data Transfer](/dev-docs/data-management/transfer) that allows you to export and import content from one Strapi instance to another or exporting and importing from a file archive. This is useful for migrating content from one environment to another.

## User can't login to the admin panel

With the release of the Strapi beta version a fundamental change occurred in that the end users (REST and GraphQL users) were split from the Administrators (admin panel users) in such a way that normal users can not be given access to the admin panel. If you would like to read more on why this change was done, you can read the Strapi [blog post](https://strapi.io/blog/why-we-split-the-management-of-the-admin-users-and-end-users) about it.

Strapi has released the Admin & Permissions (RBAC - Role-Based Access Control) that does allow for some degree of control over what users can access within the admin panel and includes some field level permissions. You can also give roles specific permissions for things like content-types, single types, plugins, and settings.

## Why are my application's database and uploads resetting on PaaS-type services?

If you used `--quickstart` to create your Strapi project, by default this uses the SQLite database. PaaS systems (Heroku, DigitalOcean Apps, Google App Engine, etc.) file systems are typically [ephemeral](https://devcenter.heroku.com/articles/dynos#ephemeral-filesystem) or read-only meaning that each time a dyno (container) is reset all filesystem changes are lost. And since both SQLite and local uploads are stored on the filesystem, any changes made to these since the last dyno reset will be deleted. Typically dynos are reset at least once a day, and in most cases multiple times per day or when new code is pushed to these services.

It is recommended you use a database add-on like Heroku's PostgreSQL. For file uploads, you will need to use one of the 3rd party providers such as Cloudinary or AWS S3.

## How can I upgrade my free Strapi Cloud trial to a paid plan?

Strapi Cloud provides a free, 14-day trial. Whenever you're ready to upgrade to one of the [paid plans](https://strapi.io/pricing-cloud), please use the _Plans_ section of your Strapi Cloud project's settings (see [Cloud documentation](/cloud/projects/settings#upgrading-to-another-plan) for more details).

## Can Strapi be run in serverless environments?

Strapi is not well suited for serverless environments due to how the application is structured. Several actions happen while Strapi is booting that can take several seconds. Serverless deployment usually requires an application to cold boot very quickly. Strapi is designed to run as an always-on service, and we don't plan to decrease the cold boot time for the foreseeable future. Therefore, running Strapi in serverless environments is not a great experience, as every request will take seconds to respond to instead of milliseconds. Choosing between a cold boot or a warm boot is an architectural decision that many software developers need to take from a very early stage, so please consider this when choosing to use Strapi.

## Can I store my Content Manager layout configurations in the model settings?

Currently Strapi does not support this, a `config:dump` and `config:restore` command has been added to make migration of these settings easier when moving between different deployments and environments.

We don't offer the ability to store these configurations in the model settings for several reasons:

- It will create conflicts in case of content internationalization and translations in the admin interface.
- The layout might be different according to the roles and permissions.
- While the model is the same whatever the content created, the contribution interface can be different. For instance, we have an idea to create a mobile application for contributors only. The labels and layout configurations could be different according the device & interface.

For all these reasons, and others, we think it'll be a mistake and might confuse users if we store the configuration in the model settings file. The final solution is to make the migration and deployment across environment easier.

## How do I customize a plugin?

Strapi uses a system called [extension](/dev-docs/plugins-extension) as plugins are stored in the `node_modules` folder. Due to this extensions work by Strapi utilizing programmatic hooks to override certain parts of the plugin.

## Can I add my own 3rd party auth provider?

<!-- TODO: convert this link to an internal link when U&P is updated -->
Yes, you can either follow the following [guide](https://docs.strapi.io/developer-docs/latest/plugins/users-permissions.html#providers) or you can take a look at the [users-permissions](https://github.com/strapi/strapi/tree/master/packages/plugins/users-permissions) and submit a pull request to include the provider for everyone. Eventually Strapi does plan to move from the current grant/purest provider to a split natured system similar to the upload providers.

There is currently no ETA on this migration however.

## Does Strapi allow me to change the default ID type or name?

No, currently does not have the ability to allow for changing the default id name nor does it allow you to switch the data type (such as UUID in PostgreSQL), support for this is being looked at in future.

## Can you filter and/or deep filter on dynamic zones and polymorphic relations?

At this time we do not plan to allow for filtering on dynamic zones or polymorphic relations due to various complexity and performance issues that come from doing so.

## How do I setup SSL with Strapi?

Strapi implements no SSL solution natively, this is due to the fact that it is extremely insecure to directly offer a Node.js application to the public web on a low port.

On Linux based operating systems you need root permissions to bind to any port below 1024 and with typical SSL being port 443 you would need to run your application as root.

Likewise since Strapi is Node.js based, in order for changes with the SSL certificate to take place (say when it expires) you would need to restart your application for that change to take effect.

Due to these two issues, it is recommended you use a proxy application such as [Nginx](/dev-docs/deployment/nginx-proxy), [Caddy](/dev-docs/deployment/caddy-proxy), [HAProxy](/dev-docs/deployment/haproxy-proxy), Apache, Traefik, or many others to handle your edge routing to Strapi. There are settings in the environment [server.json](/dev-docs/configurations/server) to handle upstream proxies. The proxy block requires all settings to be filled out and will modify any backend plugins such as authentication providers and the upload plugin to replace your standard `localhost:1337` with the proxy URL.

## Can I use TypeScript in a Strapi project?

TypeScript is supported in Strapi projects from v4.2.0-beta.1 TypeScript code examples are available throughout the core Developer Documentation and a [dedicated TypeScript support page](/dev-docs/typescript.md).

## Is X feature available yet?

You can see the [public roadmap](https://feedback.strapi.io/) to see which feature requests are currently being worked on and which have not been started yet, and to add new feature requests.



# Installation
Source: https://docs-v4.strapi.io/dev-docs/installation

# Installation

Strapi projects can be installed either locally on a computer or on a remote server. The following installation guide provides step-by-step instructions on how to install and create a new Strapi project on your local machine.

If you already have an existing Strapi project on your local machine, the following guide provides step-by-step instructions on creating a custom Docker image for your project.



# CLI
Source: https://docs-v4.strapi.io/dev-docs/installation/cli

# Installing from CLI

Strapi CLI (Command Line Interface) installation scripts are the fastest way to get Strapi running locally. The following guide is the installation option most recommended by Strapi.

## Preparing the installation

</Tabs>

:::info Where is my content?
For self-hosted Strapi projects, all your content is saved in a database file (by default, SQLite) found in the `.tmp` subfolder in your project's folder. So anytime you start the Strapi application from the folder where you created your Strapi project, your content will be available (see [database configuration](/dev-docs/configurations/database) for additional information).

If the content was added to a Strapi Cloud project, it is stored in the database managed with your Strapi Cloud project (see [advanced database configuration for Strapi Cloud](/cloud/advanced/database) for additional information).
:::



# Docker
Source: https://docs-v4.strapi.io/dev-docs/installation/docker

# Running Strapi in a Docker container

:::caution
Strapi does not build any official container images. The following instructions are provided as a courtesy to the community. If you have any questions please reach out on [Discord](https://discord.strapi.io).
:::

:::danger
Strapi applications are not meant to be connected to a pre-existing database, not created by a Strapi application, nor connected to a Strapi v3 database. The Strapi team will not support such attempts. Attempting to connect to an unsupported database may, and most likely will, result in lost data such as dropped tables.
:::

The following documentation will guide you through building a custom [Docker](https://www.docker.com/) container with an existing Strapi project.

Docker is an open platform that allows developing, shipping, and running applications by using containers (i.e. packages containing all the parts an application needs to function, such as libraries and dependencies). Containers are isolated from each other and bundle their own software, libraries, and configuration files; they can communicate with each other through well-defined channels.

:::prerequisites

- [Docker](https://www.docker.com/) installed on your machine
- A [supported version of Node.js](./cli.md#step-1-make-sure-requirements-are-met)
- An existing Strapi v4 project, or a new one created with the [Quick Start guide](/dev-docs/quick-start.md)
- (_optional_) [Yarn](https://yarnpkg.com/) installed on your machine
- (_optional_) [Docker Compose](https://docs.docker.com/compose/) installed on your machine

:::

## Development and/or Staging environments

For working with Strapi locally on your host machine you can use the [Dockerfile](https://docs.docker.com/engine/reference/builder/), and if needed the [docker-compose.yml](https://docs.docker.com/compose/compose-file/) can also be used to start up a database container.

Both methods require an existing Strapi project or a new one created (see [Quick Start guide](/dev-docs/quick-start.md)).

### Development Dockerfile

The following `Dockerfile` can be used to build a non-production Docker image for a Strapi project.

:::note

If you are using `docker-compose`, you can skip setting the environment variables manually, as they will be set in the `docker-compose.yml` file or a `.env` file.

:::

</Tabs>

### (Optional) Docker Compose

The following `docker-compose.yml` can be used to start up a database container and a Strapi container along with a shared network for communication between the two.

:::note
For more information about running Docker compose and its commands, please refer to the [Docker Compose documentation](https://docs.docker.com/compose/).
:::

Sample `docker-compose.yml`:

</Tabs>

### (Optional) .dockerignore

When building Docker images, it's essential to include only the files necessary for running the application inside the container. This is where the `.dockerignore` file comes into play. Similar to how `.gitignore` works for Git, specifying files and directories that should not be tracked or uploaded, `.dockerignore` tells Docker which files and directories to ignore when building an image.

Sample `.dockerignore`:

```bash
.tmp/
.cache/
.git/
.env
build/
node_modules/
# Ignoring folders that might be used in starter templates
data/
backup/
```

#### Why Use .dockerignore?

Including unnecessary files in a Docker build context can significantly slow down the build process. By excluding files and directories like .tmp, .cache, .git, build, node_modules, and .env through .dockerignore, the amount of data sent to the Docker daemon is reduced. This leads to faster build times since Docker has fewer files to process and include in the image.

#### Security

Excluding files and directories can also enhance the security of the Docker image. Sensitive files, such as `.env`, which might contain environment-specific secrets or credentials, should not be included in Docker images. This prevents accidental exposure of sensitive information.

#### Cleaner Images

A Docker image cluttered with unnecessary files can lead to potential confusion and issues, especially when the image is shared across teams or used in production. By keeping the image clean and focused only on the essentials, it becomes easier to maintain and troubleshoot.

#### Reduced Image Size

Smaller Docker images are more efficient to store, transfer, and launch. By excluding non-essential files, the final image size can be significantly reduced, leading to quicker pull and start times, especially in distributed and cloud environments.

## Production Environments

The Docker image in production is different from the one used in development/staging environments because of the differences in the admin build process in addition to the command used to run the application. Typical production environments will use a reverse proxy to serve the application and the admin panel. The Docker image is built with the production build of the admin panel and the command used to run the application is `strapi start`.

Once the [Dockerfile](#production-dockerfile) is created, the [production container](#building-the-production-container) can be built. Optionally, the container can be published to a [registry](#optional-publishing-the-container-to-a-registry) to make it available to the community. [Community tools](#community-tools) can help you
in the process of building a production Docker image and deploying it to a production environment.

### Production Dockerfile

The following `Dockerfile` can be used to build a production Docker image for a Strapi project.

</Tabs>

### Building the production container

Building production Docker images can have several options. The following example uses the `docker build` command to build a production Docker image for a Strapi project. However, it is recommended you review the [Docker documentation](https://docs.docker.com/engine/reference/commandline/build/) for more information on building Docker images with more advanced options.

To build a production Docker image for a Strapi project, run the following command:

```bash
docker build \
  --build-arg NODE_ENV=production \
  # --build-arg STRAPI_URL=https://api.example.com \ # Uncomment to set the Strapi Server URL
  -t mystrapiapp:latest \ # Replace with your image name
  -f Dockerfile.prod .
```

### (Optional) Publishing the container to a registry

After you have built a production Docker image for a Strapi project, you can publish the image to a Docker registry. Ideally for production usage this should be a private registry as your Docker image will contain sensitive information.

Depending on your hosting provider you may need to use a different command to publish your image. It is recommended you review the [Docker documentation](https://docs.docker.com/engine/reference/commandline/push/) for more information on publishing Docker images with more advanced options.

Some popular hosting providers are:

- [AWS ECR](https://aws.amazon.com/ecr/)
- [Azure Container Registry](https://azure.microsoft.com/en-us/services/container-registry/)
- [GCP Container Registry](https://cloud.google.com/container-registry)
- [Digital Ocean Container Registry](https://www.digitalocean.com/products/container-registry/)
- [IBM Cloud Container Registry](https://www.ibm.com/cloud/container-registry)
- [GitHub Container Registry](https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-container-registry)
- [Gitlab Container Registry](https://docs.gitlab.com/ee/user/packages/container_registry/)

## Community tools

Several community tools are available to assist you in deploying Strapi to various cloud providers and setting up Docker in a development or production environment.

We strongly support our community efforts and encourage you to check out the following tools, please help support them by contributing to their development.

If you would like to add your tool to this list, please open a pull request on the [Strapi documentation repository](https://github.com/strapi/documentation).

### @strapi-community/dockerize

The `@strapi-community/dockerize` package is a CLI tool that can be used to generate a `Dockerfile` and `docker-compose.yml` file for a Strapi project.

To get started run `npx @strapi-community/dockerize@latest` within an existing Strapi project folder and follow the CLI prompts.

For more information please see the official [GitHub repository](https://github.com/strapi-community/strapi-tool-dockerize) or the [npm package](https://www.npmjs.com/package/@strapi-community/dockerize).

### @strapi-community/deployify

The `@strapi-community/deployify` package is a CLI tool that can be used to deploy your application to various cloud providers and hosting services. Several of these also support deploying a Strapi project with a Docker container and will call on the `@strapi-community/dockerize` package to generate the required files if they don't already exist.

To get started run `npx @strapi-community/deployify@latest` within an existing Strapi project folder and follow the CLI prompts.

For more information please see the official [GitHub repository](https://github.com/strapi-community/strapi-tool-deployify) or the [npm package](https://www.npmjs.com/package/@strapi-community/deployify).

## Docker FAQ

### Why doesn't Strapi provide official Docker images?

Strapi is a framework that can be used to build many different types of applications. As such, it is not possible to provide a single Docker image that can be used for all use cases.

### Why do we have different Dockerfiles for development and production?

The primary reason for various Docker images is due to the way our Admin panel is built. The Admin panel is built using React and is bundled into the Strapi application during the build process. This means that the Strapi backend is acting as a web server to serve the Admin panel and thus certain environment variables are statically compiled into the built Admin panel.

It is generally considered a best practice with Strapi to build different Docker images for development and production environments. This is because the development environment is not optimized for performance and is not intended to be exposed to the public internet.



# Integrations
Source: https://docs-v4.strapi.io/dev-docs/integrations

# Integrations

Strapi generates an API for you to access your content. But how can you connect a React, Ruby, Gatsby application to it?
It is important to know what is an API.

## What is an API?

API is the acronym for Application Programming Interface, which is a software intermediary that allows two applications to talk to each other.
In case you want to connect a React application with Strapi, we say that React is the client and Strapi the system. Indeed, React will communicate to Strapi, by making HTTP requests. Strapi will then give a response back to your client.

If your Strapi application contains restaurants and you want to list them in your React application, all you need to do is to make an HTTP request to Strapi which will take care to give you a response containing your restaurants.

The [API Endpoints](/dev-docs/api/rest#endpoints) documentation will give you all the keys in hand to interact with your Strapi API.

## Get started

Today, any programming language has an HTTP client allowing you to execute requests to an API and therefore interact with it. Javascript has [Axios](https://github.com/axios/axios), [Fetch](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API), Ruby has [Faraday](https://github.com/lostisland/faraday), [HTTParty](https://github.com/jnunemaker/httparty), Python has [Requests](https://requests.readthedocs.io/en/master/) etc...

Integrate Strapi with a multitude of frameworks, frontend or backend programming languages just below.



# 11ty
Source: https://docs-v4.strapi.io/dev-docs/integrations/11ty

# Getting Started with 11ty

This integration guide follows the [Quick Start Guide](/dev-docs/quick-start) and assumes you have you have fully completed the "Hands-on" path. You should be able to consume the API by browsing the URL [http://localhost:1337/api/restaurants](http://localhost:1337/api/restaurants).

If you haven't gone through the Quick Start Guide, the way you request a Strapi API with [11ty](https://www.11ty.dev/) remains the same except that you do not fetch the same content.

## Create an 11ty app

Create a `package.json` file, install and save Eleventy into your project.

</Tabs>

Confirm the installation went ok:

```bash
npx @11ty/eleventy
# Wrote 0 files in 0.02 seconds (v0.11.0)
```

## Configure 11ty

11ty does not create any file structure for you. It's up to you to do it.

- Create a `./src/_data` folder containing a `categories.js` and a `restaurants.js` file. They will be used to fetch your content from Strapi.
- Create a `./src/_templates` folder containing a `default.liquid` file. It will be the default template of your project.

```html
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta content="width=device-width, initial-scale=1.0" name="viewport" />
    <title>
      {{ renderData.title }}
    </title>
  </head>

  <body>
    <a href="/">Home</a>
    {{ content }}
  </body>
</html>
```

- Create a `./src/index.md`, `./src/restaurant.md` and a `./src/category.md` file. They will define how you'll present the data.
- Create a `.eleventy.js` file containing the following (make sure to prefix the file's name with the dot):

```js
const HtmlMin = require('html-minifier');
const ErrorOverlay = require('eleventy-plugin-error-overlay');

module.exports = eleventyConfig => {
  eleventyConfig.setTemplateFormats(['md']);
  eleventyConfig.addPlugin(ErrorOverlay);
  eleventyConfig.addTransform('htmlmin', (content, outputPath) => {
    if (outputPath.endsWith('.html')) {
      let minified = HtmlMin.minify(content, {
        useShortDoctype: true,
        removeComments: true,
        collapseWhitespace: true,
      });
      return minified;
    }
    return content;
  });
  return {
    dir: {
      input: 'src',
      output: 'dist',
      includes: '_templates',
      data: '_data',
    },
    jsDataFileSuffix: '.data',
  };
};
```

- Finally, add the following packages to your application:

</Tabs>

## GET Request your collection type

Execute a `GET` request on the `restaurant` collection type in order to fetch all your restaurants.

Be sure that you activated the `find` permission for the `restaurant` collection type.

</ApiCall>

### Example

`./src/_data/restaurants.js`

```js
const { default: axios } = require('axios');

module.exports = async () => {
  try {
    const res = await axios.get('http://localhost:1337/api/restaurants?populate=*');
    return res.data;
  } catch (error) {
    console.error(error);
  }
};
```

`./src/index.md`

```md
---
title: Restaurants
layout: default.liquid
pagination:
  data: restaurants.data
  size: 100
  alias: restaurants
---

# Restaurants

<ul>
{%- for restaurant in restaurants -%}
  <li><a href="/restaurants/{{ restaurant.id }}/">{{ restaurant.attributes.name }}</a></li>
{%- endfor -%}
</ul>
```

`./src/restaurant.md`

```md
---
eleventyComputed:
  title: {{ restaurant.attributes.name }}
layout: default.liquid
pagination:
  data: restaurants.data
  size: 1
  alias: restaurant
permalink: 'restaurants/{{ restaurant.id }}/'
---

# {{ restaurant.attributes.name }}

{{ restaurant.attributes.description }}

## Categories

{% for category in restaurant.attributes.categories.data %}

  <li><a href="/categories/{{ category.id }}/">{{ category.attributes.name }}</a></li>
{% endfor %}
```

Execute a `GET` request on the `category` collection type in order to fetch a specific category with all the associated restaurants.

Be sure that you activated the `find` permission for the `category` collection type.

</ApiCall>

### Example

`./src/_data/categories.js`

```js
const { default: axios } = require('axios');

module.exports = async () => {
  try {
    const res = await axios.get('http://localhost:1337/api/categories?populate=*');
    return res.data;
  } catch (error) {
    console.error(error);
  }
};
```

`./src/category.md`

```md
---
eleventyComputed:
  title: {{ category.attributes.name }}
layout: default.liquid
pagination:
  data: categories.data
  size: 1
  alias: category
permalink: 'categories/{{ category.id }}/'
---

# {{ category.name }}

## Restaurants

{% for restaurant in category.attributes.restaurants.data %}

<li><a href="/restaurants/{{ restaurant.id }}/">{{ restaurant.attributes.name }}</a></li>
{% endfor %}
```

You can find your restaurants and categories by browsing `http://localhost:8081/restaurants/<id-of-restaurant>` and `http://localhost:8081/categories/<id-of-category>`.

## User Stories

- How [Paradigma Digital](https://strapi.io/user-stories/paradigma-digital-brand) switched from Wordpress to Strapi and Eleventy.



# Angular
Source: https://docs-v4.strapi.io/dev-docs/integrations/angular

# Getting Started with Angular

This integration guide follows the [Quick Start Guide](/dev-docs/quick-start) and assumes you have fully completed the "Hands-on" path. You should be able to consume the API by browsing the URL [http://localhost:1337/api/restaurants](http://localhost:1337/api/restaurants).

If you haven't gone through the Quick Start Guide, the way you request a Strapi API with [Angular](https://angular.io) remains the same except that you do not fetch the same content.

## Create a Angular app

Create a basic Angular application using [angular CLI](https://angular.io/guide/setup-local).

```bash
npx -p @angular/cli ng new angular-app
```

## Use the Angular HTTP client

Import the Angular HttpClientModule:

```ts title="./src/app/app.module.ts"

@NgModule({
  declarations: [AppComponent],
  imports: [BrowserModule, HttpClientModule],
  providers: [],
  bootstrap: [AppComponent],
})

```

## GET Request your collection type

Execute a `GET` request on the `restaurant` collection type in order to fetch all your restaurants.

Be sure that you activated the `find` permission for the `restaurant` collection type.

### Example

```ts title="./src/app/app.component.ts"

interface Restaurant {
  name: string;
  description: string;
}

interface Entry

### Example

```ts title="./src/app/app.module.ts"

@NgModule({
  declarations: [AppComponent],
  imports: [BrowserModule, FormsModule, HttpClientModule],
  providers: [],
  bootstrap: [AppComponent],
})

```

`./src/app/app.component.ts`

```js

interface Category {
  name: string;
}

interface Entry



# Dart
Source: https://docs-v4.strapi.io/dev-docs/integrations/dart

# Getting Started with Dart

This integration guide follows the [Quick Start Guide](/dev-docs/quick-start) and assumes you have you have fully completed the "Hands-on" path. You should be able to consume the API by browsing the URL [http://localhost:1337/api/restaurants](http://localhost:1337/api/restaurants).

If you haven't gone through the Quick Start Guide, the way you request a Strapi API with [Dart](https://dart.dev/) remains the same except that you do not fetch the same content.

## Create a Dart file

Be sure to have [Dart installed](https://dart.dev/get-dart) on your computer.

```bash
take dart-app
touch main.dart
```

## Use an HTTP client

We'll use [http](https://pub.dev/packages/http) for making HTTP requests.

- Create a `pubspec.yaml` file containing the following:

```yaml
name: my_app
dependencies:
  http: ^0.12.2
```

- Install your dependencies by running the following command:

```bash
dart pub get
```

## GET Request your collection type

Execute a `GET` request on the `restaurant` collection type in order to fetch all your restaurants.

Be sure that you activated the `find` permission for the `restaurant` collection type.

</ApiCall>

### Example

```dart

class Restaurant {
  static String api_url = 'http://localhost:1337';
  static Map

</ApiCall>

### Example

```dart

class Restaurant {
  static String api_url = 'http://localhost:1337';
  static Map

</ApiCall>

### Example

```dart

class Restaurant {
  static String api_url = 'http://localhost:1337';
  static Map<String,String> headers = {
    'Content-Type':'application/json',
    'Accept': 'application/json'
  };

  void all() async {
    var response = await http.get('${api_url}/restaurants', headers: headers);
    print(response.body);
  }

  void create(name, description, category) async {
    final data = jsonEncode({
      'name': name,
      'description': description,
      'categories': category
    });

    var response = await http.post('${api_url}/restaurants', headers: headers, body: data);
  }

  void update(id, params) async {
    final data = jsonEncode({
      'categories': params['categories']
    });

    var response = await http.put("${api_url}/restaurants/${id}", headers: headers, body: data);
  }
}

void main() {
  var restaurant = Restaurant();
  restaurant.update(2, {'categories': [2]});
}
```



# Flutter
Source: https://docs-v4.strapi.io/dev-docs/integrations/flutter

# Getting Started with Flutter

This integration guide follows the [Quick Start Guide](/dev-docs/quick-start) and assumes you have you have fully completed the "Hands-on" path. You should be able to consume the API by browsing the URL [http://localhost:1337/api/restaurants](http://localhost:1337/api/restaurants).

If you haven't gone through the Quick Start Guide, the way you request a Strapi API with [Flutter](https://flutter.dev/) remains the same except that you do not fetch the same content.

## Create a Flutter application

Be sure to have [Flutter installed](https://flutter.dev/docs/get-started/install) on your computer.

```bash
flutter create flutterapp
cd flutterapp
```

## Use an HTTP client

We'll use [http](https://pub.dev/packages/http) for making HTTP requests.

- Update the `pubspec.yaml` file with the following:

```yaml
...
dependencies:
  flutter:
    sdk: flutter

  # The following adds the Cupertino Icons font to your application.
  # Use with the CupertinoIcons class for iOS style icons.
  cupertino_icons: ^1.0.0
  http: ^0.12.2
...
```

- Install your dependencies by running the following command:

```bash
flutter pub get
```

## GET Request to your collection type

Execute a `GET` request on the `restaurant` collection type in order to fetch all your restaurants.

Be sure that you activated the `find` permission for the `restaurant` collection type.

</ApiCall>

## POST Request your collection type

Execute a `POST` request on the `restaurant` collection type in order to create a restaurant.

Be sure that you activated the `create` permission for the `restaurant` collection type and the `find` permission for the `category` Collection type.

In this example a `japanese` category has been created which has the id: 3.

</ApiCall>

## PUT Request your collection type

Execute a `PUT` request on the `restaurant` collection type in order to update the category of a restaurant.

Be sure that you activated the `put` permission for the `restaurant` collection type.

</ApiCall>



# Gatsby
Source: https://docs-v4.strapi.io/dev-docs/integrations/gatsby

# Getting Started with Gatsby

This integration guide follows the [Quick Start Guide](/dev-docs/quick-start) and assumes you have you have fully completed the "Hands-on" path. You should be able to consume the API by browsing the URL [http://localhost:1337/api/restaurants](http://localhost:1337/api/restaurants).

If you haven't gone through the Quick Start Guide, the way you request a Strapi API with [Gatsby](https://www.gatsbyjs.org/) remains the same except that you do not fetch the same content.

## Create a Gatsby app

Create a basic Gatsby application using the [Gatsby CLI](https://www.gatsbyjs.org/docs/gatsby-cli/).

```bash
gatsby new gatsby-app
```

## Configure Gatsby

Gatsby is a [Static Site Generator](https://www.staticgen.com/) and will fetch your content from Strapi at build time. You need to configure Gatsby to communicate with your Strapi application.

```bash
yarn add gatsby-source-strapi
```

- Add the `gatsby-source-strapi` to the plugins section in the `gatsby-config.js` file:

```js
{
  resolve: "gatsby-source-strapi",
  options: {
    apiURL: "http://localhost:1337",
    collectionTypes: [
      "restaurant",
      "category",
    ],
    queryLimit: 1000,
  },
},
```

## GET Request your collection type

Execute a `GET` request on the `restaurant` collection type in order to fetch all your restaurants.

Be sure that you activated the `find` permission for the `restaurant` collection type.

</ApiCall>

### Example

`./src/pages/index.js`

```js

const query = graphql`
  query {
    allStrapiRestaurant {
      edges {
        node {
          data {
            id
            attributes {
              name
              description
            }
          }
        }
      }
    }
  }
`;

const IndexPage = () => (

</ApiCall>

### Example

`./src/pages/index.js`

```js

const query = graphql`
  query {
    strapiCategory(data: { elemMatch: { id: { eq: 1 } } }) {
      data {
        id
        attributes {
          name
          restaurants {
            id
            name
            description
          }
        }
      }
    }
  }
`;

const IndexPage = () => (
  <StaticQuery
    query={query}
    render={data => (
      <div>
        <h1>{data.strapiCategory.data[0].attributes.name}</h1>
        <ul>
          {data.strapiCategory.data[0].attributes.restaurants.map(restaurant => (
            <li key={restaurant.id}>{restaurant.name}</li>
          ))}
        </ul>
      </div>
    )}
  />
);

```

We can generate pages for each category.

- Tell Gatsby to generate a page for each category by updating the `gatsby-node.js` file with the following:

```js
exports.createPages = async ({ graphql, actions }) => {
  const { createPage } = actions;
  const result = await graphql(
    `
      {
        categories: allStrapiCategory {
          edges {
            node {
              name
            }
          }
        }
      }
    `
  );

  if (result.errors) {
    throw result.errors;
  }

  // Create blog articles pages.
  const categories = result.data.categories.edges;

  const CategoryTemplate = require.resolve('./src/templates/category.js');

  categories.forEach((category, index) => {
    createPage({
      path: `/category/${category.node.name}`,
      component: CategoryTemplate,
      context: {
        name: category.node.name,
      },
    });
  });
};
```

- Create a `./src/templates/category.js` file that will display the content of each one of your category:

```js

  query Category($name: String!) {
    category: strapiCategory(name: { eq: $name }) {
      name
      restaurants {
        id
        name
      }
    }
  }
`;

const Category = ({ data }) => {
  const restaurants = data.category.restaurants;
  const category = data.category.name;

  return (
    <div>
      <h1>{category}</h1>
      <ul>
        {restaurants.map(restaurant => {
          return <li key={restaurant.id}>{restaurant.name}</li>;
        })}
      </ul>
    </div>
  );
};

```

You can find your restaurant categories by browsing `http://localhost:8000/category/<name-of-category>`.



# Go
Source: https://docs-v4.strapi.io/dev-docs/integrations/go

# Getting Started with GO

This integration guide follows the [Quick Start Guide](/dev-docs/quick-start) and assumes you have you have fully completed the "Hands-on" path. You should be able to consume the API by browsing the URL [http://localhost:1337/api/restaurants](http://localhost:1337/api/restaurants).

If you haven't gone through the Quick Start guide, the way you request a Strapi API with [GO](https://golang.org/) remains the same except that you do not fetch the same content.

## Create a Go file

Be sure to have [Go installed](https://golang.org/doc/install) on your computer.

```bash
touch strapi.go
```

Go has built-in packages to make HTTP Requests like GET, POST, PUT, and DELETE.
We will use the "net/http" package along with other packages.

## GET Request your collection type

Execute a `GET` request on the `restaurant` collection type in order to fetch all your restaurants.

Be sure that you activated the `find` permission for the `restaurant` collection type.

</ApiCall>

### Example

```go
package main

	"fmt"
	"io/ioutil"
	"net/http"
)

func main() {
	getD()
}

func getD() {
	fmt.Println("Getting data...")
	res, error := http.Get("http://localhost:1337/api/restaurants")
	if error != nil {
		fmt.Printf("The HTTP request failed with error %s\n", error)
	} else {
		data, _ := ioutil.ReadAll(res.Body)
		fmt.Println(string(data))
	}
}
```
## POST Request your collection type

Execute a `POST` request on the `restaurant` collection type in order to create a restaurant.

Be sure that you activated the `create` permission for the `restaurant` collection type and the `find` permission for the `category` Collection type.

</ApiCall>

### Example

```go
package main

  "bytes"
  "encoding/json"
  "fmt"
  "io/ioutil"
  "log"
  "net/http"
)

func main() {
  postD()
}

func getD() {
  fmt.Println("Getting data...")
  resp, error := http.Get("http://localhost:1337/api/restaurants")
  if error != nil {
    fmt.Printf("The HTTP request failed with error %s\n", error)
  } else {
    data, _ := ioutil.ReadAll(resp.Body)
    fmt.Println(string(data))
  }
}

func postD() {
  fmt.Println("Posting  data...")
  //Encode the data
  postRest, _ := json.Marshal(map[string]string{
    "name":        "Nwanyi Igbo",
    "description": "This is a very nice place to eat native soup",
  })
  responseBody := bytes.NewBuffer(postRest)
  resp, error := http.Post("http://localhost:1337/api/restaurants", "application/json", responseBody)
  //Handle Error
  if error != nil {
    log.Fatalf("An Error Occurred %v", error)
  }
  defer resp.Body.Close()
  //Read the response body
  body, error := ioutil.ReadAll(resp.Body)
  if error != nil {
    log.Fatalln(error)
  }
  fmt.Println(string(body))
}
```

## PUT Request your collection type

Execute a `PUT` request on the `restaurant` collection type in order to update the category of a restaurant.

Be sure that you activated the `update` permission for the `restaurant` collection type.
PUT Request is sligtly different as we need to target the particular thing we want update. We do this by first making a request to http://localhost:1337/api/restaurants/1 and then update what we want to update. In this example, we are going to update  "Biscotte Restaurant" to "Restaurant Home".

</ApiCall>

### Example

```go
package main

	"bytes"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"net/http"
)

func main() {
	//getD()
	//postD()
	putD()
}
func getD() {
	fmt.Println("Getting data...")
	resp, error := http.Get("http://localhost:1337/api/restaurants")
	if error != nil {
		fmt.Printf("The HTTP request failed with error %s\n", error)
	} else {
		data, _ := ioutil.ReadAll(resp.Body)
		fmt.Println(string(data))
	}
}
func postD() {
	fmt.Println("Posting  data...")

	// Encode the data
	postRest, _ := json.Marshal(map[string]string{
		"name":        "Nwanyi Igbo",
		"description": "This is a very nice place to eat native soup",
	})

	responseBody := bytes.NewBuffer(postRest)
	resp, error := http.Post("http://localhost:1337/api/restaurants", "application/json", responseBody)
	// Handle Error
	if error != nil {
		log.Fatalf("An Error Occured %v", error)
	}
	defer resp.Body.Close()
	// Read the response body
	body, error := ioutil.ReadAll(resp.Body)
	if error != nil {
		log.Fatalln(error)
	}

	fmt.Println(string(body))
}
func putD() {
	putRest, _ := json.Marshal(map[string]string{
		"name": "Restaurant Homes",
	})
	client := &http.Client{}
	url := "http://localhost:1337/api/restaurants/1"
	req, error := http.NewRequest(http.MethodPut, url, bytes.NewBuffer(putRest))
	req.Header.Set("Content-Type", "application/json")
	if error != nil {
		log.Fatal(error)
	}
	resp, error := client.Do(req)
	if error != nil {
		log.Fatal(error)
	}
	defer resp.Body.Close()

	body, error := ioutil.ReadAll(resp.Body)
	if error != nil {
		log.Fatal(error)
	}
	fmt.Println(string(body))
}

```



# GraphQL
Source: https://docs-v4.strapi.io/dev-docs/integrations/graphql

# Getting Started with GraphQL

This integration guide follows the [Quick Start Guide](/dev-docs/quick-start) and assumes you have you have fully completed the "Hands-on" path. You should be able to consume the API by browsing the URL [http://localhost:1337/api/restaurants](http://localhost:1337/api/restaurants).

If you haven't gone through the Quick Start Guide, the way you request a Strapi API with [GraphQL](https://graphql.org/) remains the same except that you will not fetch the same content.

## Install the GraphQL plugin

Install the GraphQL plugin in your Strapi project.

</Tabs>

## Fetch your Restaurant collection type

Use the [GraphQL Playground](http://localhost:1337/graphql) to fetch your content.

</ApiCall>

### Examples

These examples do not include configuring your client with Apollo for your [GraphQL endpoint](http://localhost:1337/graphql). Please follow the associated documentation for [React](https://www.apollographql.com/docs/react/get-started/) or [Vue.js](https://apollo.vuejs.org/guide/installation.html#_1-apollo-client).

</Tabs>

## Fetch your Category collection type

</ApiCall>

## Examples

</Tabs>



# Gridsome
Source: https://docs-v4.strapi.io/dev-docs/integrations/gridsome

# Getting Started with Gridsome

This integration guide follows the [Quick Start Guide](/dev-docs/quick-start) and assumes you have you have fully completed the "Hands-on" path. You should be able to consume the API by browsing the URL [http://localhost:1337/api/restaurants](http://localhost:1337/api/restaurants).

If you haven't gone through the Quick Start Guide, the way you request a Strapi API with [Gridsome](https://gridsome.org/) remains the same except that you do not fetch the same content.

## Create a Gridsome app

Create a basic Gridsome application using the [Gridsome CLI](https://gridsome.org/docs/gridsome-cli/).

```bash
gridsome create gridsome-app
```

## Configure Gridsome

Gridsome is a [Static Site Generator](https://www.staticgen.com/) and will fetch your content from Strapi at build time. You need to configure Gridsome to communicate with your Strapi application.

```bash
yarn add @gridsome/source-strapi
```

- Add the `@gridsome/source-strapi` to the plugins section in the `gridsome.config.js` file:

```js
module.exports = {
  siteName: 'Gridsome',
  plugins: [
    {
      use: '@gridsome/source-strapi',
      options: {
        apiURL: `http://localhost:1337`,
        queryLimit: 1000, // Defaults to 100
        contentTypes: [`restaurant`, `category`],
      },
    },
  ],
};
```

## GET Request your collection type

Execute a `GET` request on the `restaurant` collection type in order to fetch all your restaurants.

Be sure that you activated the `find` permission for the `restaurant` collection type.

</ApiCall>

### Example

`./src/pages/Index.vue`

```jsx
<template>

</template>

<page-query>
  query {
      allStrapiRestaurant {
        edges {
          node {
            id
            name
            categories {
              id
              name
            }
          }
        }
      }
    }
</page-query>
```

Execute a `GET` request on the `category` collection type in order to fetch a specific category with all the associated restaurants.

Be sure that you activated the `findOne` permission for the `category` collection type.

</ApiCall>

### Example

`./src/pages/Index.vue`

```jsx
<template>

</template>

<page-query>
  query  {
    strapiCategory(id: 1) {
      id
      name
      restaurants {
        name
        description
      }
    }
  }
</page-query>
```

We can generate pages for each category.

- Tell Gridsome to generate a page for each category by updating the `gridsome-server.js` file with the following:

```js
module.exports = function(api) {
  api.createPages(async ({ graphql, createPage }) => {
    const { data } = await graphql(`
      {
        allStrapiCategory {
          edges {
            node {
              id
              name
            }
          }
        }
      }
    `);

    const categories = data.allStrapiCategory.edges;

    categories.forEach(category => {
      createPage({
        path: `/categories/${category.node.id}`,
        component: './src/templates/Category.vue',
        context: {
          id: category.node.id,
        },
      });
    });
  });
};
```

- Create a `./src/templates/Category.vue` file that will display the content of each one of your category:

```js
<template>
  
</template>

<page-query>
  query Category($id: ID!) {
      category: strapiCategory(id: $id) {
        name
        restaurants {
          id
          name
        }
      }
    }
</page-query>
```

You can find your restaurant categories by browsing `http://localhost:8080/categories/<id-of-category>`.



# Jekyll
Source: https://docs-v4.strapi.io/dev-docs/integrations/jekyll

# Getting Started with Jekyll

This integration guide follows the [Quick Start Guide](/dev-docs/quick-start) and assumes you have you have fully completed the "Hands-on" path. You should be able to consume the API by browsing the URL [http://localhost:1337/api/restaurants](http://localhost:1337/api/restaurants).

If you haven't gone through the Quick Start Guide, the way you request a Strapi API with [Jekyll](https://jekyllrb.com) remains the same except that you do not fetch the same content.

## Create a Jekyll app

Be sure to have [Jekyll installed](https://jekyllrb.com/docs/installation/) on your computer.

```bash
jekyll new jekyll-app
```

## Configure Jekyll

Jekyll is a [Static Site Generator](https://www.staticgen.com/) and will fetch your content from Strapi at build time. You need to configure Jekyll to communicate with your Strapi application.

- Add `jekyll-strapi` to your `Gemfile`

```
group :jekyll_plugins do
  gem "jekyll-feed", "~> 0.12"
  gem "jekyll-strapi"
end
```

- Add `jekyll-strapi` to your plugins in `_config.yml`.

```yml
plugins:
  - jekyll-feed
  - jekyll-strapi
```

- Add the configuration of Strapi at the end of the `_config.yml`.

```yml
strapi:
  # Your API endpoint (optional, default to http://localhost:1337)
  endpoint: http://localhost:1337
  collections:
    restaurants:
      type: restaurants

    categories:
      type: categories
```

- Run `bundle install` to install your gems.

```bash
bundle install
```

## GET Request your collection type

Execute a `GET` request on the `restaurant` collection type in order to fetch all your restaurants.

Be sure that you activated the `find` permission for the `restaurant` collection type.

### Example

`./_layouts/home.html`

```html
---
layout: default
---

<div class="home">
  <h1 class="page-heading">Restaurants</h1>
  {%- if strapi.collections.restaurants.size > 0 -%}
  <ul>
    {%- for restaurant in strapi.collections.restaurants -%}
    <li>
      {{ restaurant.name }}
    </li>
    {%- endfor -%}
  </ul>
  {%- endif -%}
</div>
```

Execute a `GET` request on the `category` collection type in order to fetch a specific category with all the associated restaurants.

Be sure that you activated the `findOne` permission for the `category` collection type.

### Example

`./layouts/index.html`

```js
---
layout: default
---

<div class="home">
    {%- if strapi.collections.categories[0].restaurants.size > 0 -%}
    <h1 class="page-heading">{{ strapi.collections.categories[0].name }}</h1>
    <ul>
        {%- for restaurant in strapi.collections.categories[0].restaurants -%}
        <li>
            {{ restaurant.name }}
        </li>
        {%- endfor -%}
    </ul>
    {%- endif -%}
</div>
```

Run your application with:

```bash
bundle exec jekyll serve
```

We can generate pages for each category.

- Tell Jekyll to generate a page for each category by updating the `_config.yml` file with the following:

```yaml
strapi:
  # Your API endpoint (optional, default to http://localhost:1337)
  endpoint: http://localhost:1337
  # Collections, key is used to access in the strapi.collections
  # template variable
  collections:
    # Example for a "posts" collection
    restaurants:
      # Collection name (optional). Used to construct the url requested. Example: type `foo` would generate the following url `http://localhost:1337/foo`.
      type: restaurants

    categories:
      # Collection name (optional). Used to construct the url requested. Example: type `foo` would generate the following url `http://localhost:1337/foo`.
      type: categories
      permalink: categories/:name
      layout: category.html
      # Generate output files or not (default: false)
      output: true
```

- Create a `_layouts/category.html` file that will display the content of each one of your category:

```html
<h1>{{ page.document.name }}</h1>
<ul>
  {%- for restaurant in page.document.restaurants -%}
  <li>
    {{ restaurant.name }}
  </li>
  {%- endfor -%}
</ul>
```

After building your application, you'll be able to see a `category` folder in your `_site` folder.

You can find your restaurant categories by browsing `http://localhost:4000/category/<name-of-category>`.



# Laravel
Source: https://docs-v4.strapi.io/dev-docs/integrations/laravel

# Getting Started with Laravel

This integration guide follows the [Quick Start Guide](/dev-docs/quick-start) and assumes you have you have fully completed the "Hands-on" path. You should be able to consume the API by browsing the URL [http://localhost:1337/api/restaurants](http://localhost:1337/api/restaurants).

Should you wish to use standalone PHP, see the [PHP integration guide](/dev-docs/integrations/php.md).

This guide assumes you already have [Laravel installed](https://laravel.com/docs/9.x/installation) and are familiar with the basics of the framework.

## Using the native Laravel Http Client

Following the official [Laravel Macros documentation](https://laravel.com/docs/9.x/http-client#macros), you can make a Strapi Macro to integrate to the `http` client from Laravel: 

In `App\Providers\AppServiceProvider` (or your `ServiceProvider`):

```php
use Illuminate\Support\Facades\Http;
 
/**
 * Bootstrap any application services.
 *
 * @return void
 */
public function boot()
{
    Http::macro('strapi', function () {
        return Http::withHeaders([
            'Authorization' => 'Bearer '. config('strapi.token'), #Token generated in the admin
        ])->baseUrl(config('strapi.url')); # Base url of your strapi app
    });
}
```

Create new config file for strapi in `config/strapi.php`:

```php
  return [
      'url' => env('STRAPI_URL'),
      
      'token' => env('STRAPI_TOKEN', null),
  ];
```

Once your macro has been configured, you may invoke it from anywhere in your application to create a pending request with the specified configuration:

```php
# Access to GraphQL
$response = Http::strapi()->post('graphql', ['query' => $gqlQuery, 'variables' => $variables]); 
#Tip you might include a .gql file here using $gqlQuery = include('gqlQuery.gql')

# Access to Api Rest
$response = Http::strapi()->get('api/pages');
```

## Install the Laravel-Strapi Laravel Package

```bash
composer require dbfx/laravel-strapi
```

This installs [Laravel-Strapi](https://github.com/dbfx/laravel-strapi), a Laravel specific package for interacting with Strapi.

You need to publish a config file:

```bash
php artisan vendor:publish --provider="Dbfx\LaravelStrapi\LaravelStrapiServiceProvider" --tag="strapi-config"
```

You also need to define your `STRAPI_URL` and `STRAPI_CACHE_TIME` in the `.env` file:

``` json
STRAPI_URL=http://localhost:1337
STRAPI_CACHE_TIME=3600
```

## Get your collection type

Execute a `GET` request on the `restaurant` collection type in order to fetch all your restaurants.

Be sure that you activated the `find` permission for the `restaurant` collection type.

You may now iterate over the `$restaurants` array, which will contain all your restaurants. More options are available as well: 

```php
$restaurants = $strapi->collection('restaurants', $sortKey = 'id', $sortOrder = 'DESC', $limit = 20, $start = 0, $fullUrls = true);
```

## Accessing single type items

You may also access single type items as follows:

```php
$strapi = new Dbfx\LaravelStrapi();

// Fetch the full homepage array
$homepageArray = $strapi->single('homepage');

// Return just the ['content'] field from the homepage array
$homepageItem = $strapi->single('homepage', 'content');
```

## Collection by field

```php
$strapi = new Dbfx\LaravelStrapi();
$entries = $strapi->entriesByField('restaurants', 'slug', 'test-restaurant-name');
```

## Single item from collection

```php
$strapi = new Dbfx\LaravelStrapi();
$entry = $strapi->entry('restaurants', $id = 5);
```



# Next.js
Source: https://docs-v4.strapi.io/dev-docs/integrations/next-js

# Getting Started with Next.js

This integration guide follows the [Quick Start Guide](/dev-docs/quick-start) and assumes you have fully completed the "Hands-on" path. You should be able to consume the API by browsing the URL [http://localhost:1337/api/restaurants](http://localhost:1337/api/restaurants).

If you haven't gone through the Quick Start Guide, the way you request a Strapi API with [Next.js](https://nextjs.org/) remains the same except that you do not fetch the same content.

## Create a Next.js app

Create a basic Next.js application.

</Tabs>

## Use an HTTP client

Many HTTP clients are available but in this documentation we'll use [Axios](https://github.com/axios/axios) and [Fetch](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API).

</Tabs>

:::tip
If you're getting `localhost` errors with Axios, but your requests work fine by replacing localhost with 127.0.0.1, please ensure this is not a CORS issue (see additional details in the [axios GitHub](https://github.com/axios/axios/issues/4837#issuecomment-1198487683)).
:::

## GET Request your collection type

Execute a `GET` request on the `restaurant` collection type in order to fetch all your restaurants.

Be sure that you activated the `find` permission for the `restaurant` collection type.

</TabItem>

</TabItem>

</Tabs>

### Example

</Tabs>

## POST Request your collection type

Execute a `POST` request on the `restaurant` collection type in order to create a restaurant.

Be sure that you activated the `create` permission for the `restaurant` collection type and the `find` permission for the `category` Collection type.
Add the `?populate=categories` query parameter to return categories with the response.

In this example a `japanese` category has been created which has the id: 3.

</TabItem>

</TabItem>

</Tabs>

### Example

</Tabs>

## PUT Request your collection type

Execute a `PUT` request on the `restaurant` collection type in order to update the category of a restaurant.

Be sure that you activated the `put` permission for the `restaurant` collection type.

We consider that the id of your restaurant is `2`.
and the id of your category is `2`.

</TabItem>

</TabItem>

</Tabs>



# Nuxt
Source: https://docs-v4.strapi.io/dev-docs/integrations/nuxt-js

# Getting Started with Nuxt 3

This integration guide follows the [Quick Start Guide](/dev-docs/quick-start) and assumes you have you have fully completed the "Hands-on" path. You should be able to consume the API by browsing the URL [http://localhost:1337/api/restaurants](http://localhost:1337/api/restaurants).

If you haven't gone through the Quick Start Guide, the way you request a Strapi API with [Nuxt 3](https://nuxtjs.org/) remains the same except that you do not fetch the same content.

## Create a Nuxt 3 app

Create a basic Nuxt 3 application with npx package runner

```bash
npx nuxi init nuxt-app
```

## Use an HTTP client

For this example we are using the awesome [@nuxt/strapi](https://strapi.nuxtjs.org/) module and Nuxt helper function [$fetch](https://nuxt.com/docs/api/utils/dollarfetch) (based on `ohmyfetch`). You may choose any of this variants.

</Tabs>

## GET Request - get list of entities or one entity

Execute a `GET` request on the `restaurant` collection type in order to fetch your restaurants.

Be sure that you activated the `find` and `findOne` permission for the `restaurant` collection type.

</TabItem>

</TabItem>

</Tabs>

## POST Request - create new entity

Execute a `POST` request on the `restaurant` collection type in order to create a restaurant.

Be sure that you activated the `create` permission for the `restaurant` collection type.

</TabItem>

</TabItem>

</Tabs>

## PUT Request - update existing entity

Execute a `PUT` request on the `restaurant` collection type in order to update your restaurant.

Be sure that you activated the `put` permission for the `restaurant` collection type.

</TabItem>

</TabItem>

</Tabs>

## DELETE Request - delete existing entity

Execute a `DELETE` request on the `restaurant` collection type in order to delete your restaurant.

Be sure that you activated the `delete` permission for the `restaurant` collection type.

</TabItem>

</TabItem>

</Tabs>

### Example

Consider an example of a simple CRUD Nuxt application that implements the functions described above.

</Tabs>



# PHP
Source: https://docs-v4.strapi.io/dev-docs/integrations/php

# Getting Started with PHP

This integration guide follows the [Quick Start Guide](/dev-docs/quick-start) and assumes you have you have fully completed the "Hands-on" path. You should be able to consume the API by browsing the URL [http://localhost:1337/api/restaurants](http://localhost:1337/api/restaurants).

If you haven't gone through the Quick Start Guide, the way you request a Strapi API with [PHP](https://php.net/) remains the same except that you will not fetch the same content.

## Create a PHP file

Be sure to have [PHP installed](https://www.php.net/manual/en/install.php) on your computer.

```bash
touch strapi.php
```

We will use cURL, a built-in PHP extension that allows us to receive and send information via the URL syntax.

## GET Request your collection type

Execute a `GET` request on the `restaurant` collection type in order to fetch all your restaurants.

Be sure that you activated the `find` permission for the `restaurant` collection type.

<br/>
Running the PHP file on the browser gives this response:

</ApiCall>

### Example

```php
<?php
function getRestaurants(){
    $curl = curl_init(); //Initializes curl
    curl_setopt($curl, CURLOPT_URL, 'http://localhost:1337/api/restaurants');
    curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($curl, CURLOPT_HTTPHEADER, [
        'Content-Type: application/json'
    ]); // Sets header information for authenticated requests

    $res = curl_exec($curl);
    curl_close($curl);
    print_r($res);
}

getRestaurants();

```

## POST Request your collection type

Execute a `POST` request on the `restaurant` collection type in order to create a restaurant.

Be sure that you activated the `create` permission for the `restaurant` collection type and the `find` permission for the `category` Collection type.

<br/>
Running the PHP file on the browser  will give you this response:

</ApiCall>

### Example

```php

<?php
function getRestaurants(){
    $curl = curl_init(); //Initializes curl
    curl_setopt($curl, CURLOPT_URL, 'http://localhost:1337/api/restaurants');
    curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($curl, CURLOPT_HTTPHEADER, [
        'Content-Type: application/json'
    ]); // Sets header information for authenticated requests

    $res = curl_exec($curl);
    curl_close($curl);

    print_r($res);
}

function postRestaurant(){
    $restaurants = array(
        'name' => 'Calabar Kitchen',
        'description' => 'Omo, this is a place that varieties of soup with catfish🦈',
         'categories' => [2]
      );

      // Initializes a new cURL session
      $curl = curl_init();

      curl_setopt($curl, CURLOPT_URL, 'http://localhost:1337/api/restaurants');

      curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);

      // Set the CURLOPT_POST for POST request
      curl_setopt($curl, CURLOPT_POST, true);
      curl_setopt($curl, CURLOPT_POSTFIELDS,  json_encode($restaurants));

      curl_setopt($curl, CURLOPT_HTTPHEADER, [
          'Content-Type: application/json'
      ]);
      $res = curl_exec($curl);
      curl_close($curl);
      print_r($res);

}

postRestaurant();

```

## PUT Request your collection type

Execute a `PUT` request on the `restaurant` collection type in order to update the category of a restaurant.

Be sure that you activated the `update` permission for the `restaurant` collection type.
PUT Request is slightly different as we need to target the particular entry we want update. We do this by first making a request to http://localhost:1337/api/restaurants/1 and then update what we want to update. In this example, we are going to update  "Biscotte Restaurant" to "Femoni Kitchen".

<br/>
Running the PHP file on the browser  will give you this response:

</ApiCall>

### Example

```php
<?php
function getRestaurants(){
    $curl = curl_init(); //Initializes curl
    curl_setopt($curl, CURLOPT_URL, 'http://localhost:1337/api/restaurants');
    curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($curl, CURLOPT_HTTPHEADER, [
        'Content-Type: application/json'
    ]); // Sets header information for authenticated requests

    $res = curl_exec($curl);
    curl_close($curl);

    print_r($res);
}

function postRestaurant(){
    $restaurants = array(
        'name' => 'Calabar Kitchen',
        'description' => 'Omo, this is a place that varieties of soup with catfish🦈',
         'categories' => [2]
      );

      // Initializes a new cURL session
      $curl = curl_init();

      curl_setopt($curl, CURLOPT_URL, 'http://localhost:1337/api/restaurants');

      curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);

      // Set the CURLOPT_POST for POST request
      curl_setopt($curl, CURLOPT_POST, true);
      curl_setopt($curl, CURLOPT_POSTFIELDS,  json_encode($restaurants));
      curl_setopt($curl, CURLOPT_HTTPHEADER, [
          'Content-Type: application/json'
      ]);
      $res = curl_exec($curl);
      curl_close($curl);
      print_r($res);

}

function putRestaurant(){

$restaurants = array(
    'name' => 'Femoni Kitchen'
  );

$curl = curl_init();
curl_setopt($curl, CURLOPT_URL, 'http://localhost:1337/api/restaurants/1');
curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
curl_setopt($curl, CURLOPT_CUSTOMREQUEST, 'PUT');
curl_setopt($curl, CURLOPT_POSTFIELDS,  json_encode($restaurants));
curl_setopt($curl, CURLOPT_HTTPHEADER, [
  'Content-Type: application/json'
]);

$res = curl_exec($curl);
curl_close($curl);

print_r($res);
}

putRestaurant();

```

Running an authentication request (getting JWT):

### Example

```php
<?php
$strapi_auth = [
    "identifier" => STRAPI_USERNAME,
    "password"  =>  STRAPI_USER_PWD
];

function strapi_auth_curl($url, $auth){
    $curl = curl_init();

    curl_setopt_array($curl, array(
        CURLOPT_URL => $url.'/auth/local',
        CURLOPT_RETURNTRANSFER => true,
        CURLOPT_ENCODING => '',
        CURLOPT_MAXREDIRS => 10,
        CURLOPT_TIMEOUT => 0,
        CURLOPT_FOLLOWLOCATION => true,
        CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
        CURLOPT_CUSTOMREQUEST => 'POST',
        CURLOPT_POSTFIELDS =>json_encode($auth),
        CURLOPT_HTTPHEADER => array(
            'Content-Type: application/json'
        ),
    ));

    $response = curl_exec($curl);

    curl_close($curl);
    return $response;
}
$login = strapi_auth_curl(STRAPI_URL, $strapi_auth);
$strapi_res = json_decode($login);

print_r($strapi_res);

```

Running an authenticated POST request with JWT:

### Example

```php
<?php
$jwt = $strapi_res->jwt;
function postRestaurantWithAuth($jwt){
  $auth = array(
        'Authorization: Bearer '.$jwt,
        'Content-Type: application/json'
    );
    $restaurants = array(
        'name' => 'Calabar Kitchen',
        'description' => 'Omo, this is a place that varieties of soup with catfish🦈',
         'categories' => [2]
      );
      
      // Initializes a new cURL session
      $curl = curl_init();
      
      curl_setopt($curl, CURLOPT_URL, 'http://localhost:1337/api/restaurants');
      
      curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
      
      // Set the CURLOPT_POST for POST request
      curl_setopt($curl, CURLOPT_POST, true);
      curl_setopt($curl, CURLOPT_POSTFIELDS,  json_encode($restaurants));
      
      curl_setopt($curl, CURLOPT_HTTPHEADER, $auth);
      $res = curl_exec($curl);
      curl_close($curl);
      print_r($res);

}

postRestaurantWithAuth($jwt);
```



# Python
Source: https://docs-v4.strapi.io/dev-docs/integrations/python

# Getting Started with Python

This integration guide follows the [Quick Start Guide](/dev-docs/quick-start) and assumes you have you have fully completed the "Hands-on" path. You should be able to consume the API by browsing the URL [http://localhost:1337/api/restaurants](http://localhost:1337/api/restaurants).

If you haven't gone through the Quick Start Guide, the way you request a Strapi API with [Python](https://www.python.org/) remains the same except that you do not fetch the same content.

## Create a Python file

Be sure to have [Python installed](https://wiki.python.org/moin/BeginnersGuide/Download) on your computer.

```bash
touch script.py
```

## Use an HTTP client

Many HTTP clients are available, the following examples use [Requests](https://github.com/psf/requests). To install `Requests` run the following command in your terminal:

```bash
python -m pip install requests
```

## GET Request to your collection type

Execute a `GET` request on the `restaurant` collection type in order to fetch all your restaurants.

Be sure that you activated the `find` permission for the `restaurant` collection type.

</ApiCall>

### Example

```python

class Restaurant:
    def __init__(self):
        self.api_url = "http://localhost:1337/api"

    def all(self):
        r = requests.get(self.api_url + "/restaurants")
        return r.json()

restaurant = Restaurant()
print(restaurant.all())
```

## POST Request your collection type

Execute a `POST` request on the `restaurant` collection type in order to create a restaurant.

Be sure that you activated the `create` permission for the `restaurant` collection type and the `find` permission for the `category` Collection type.
Add the `?populate=categories` query parameter to return categories with the response.

In this example a `japanese` category has been created which has the id: 3.

</ApiCall>

### Example

```python

class Restaurant:
    def __init__(self):
        self.api_url = "http://localhost:1337/api"

    def all(self):
        r = requests.get(self.api_url + "/restaurants")
        return r.json()

    def create(self, params):
        r = requests.post(
            self.api_url + "/restaurants",
            headers={"Content-Type": "application/json"},
            data=json.dumps(
                {
                    "data": {
                        "name": params["name"],
                        "description": params["description"],
                        "categories": params["categories"],
                    }
                }
            ),
        )
        return r.json()

restaurant = Restaurant()
print(
    restaurant.create(
        {
            "name": "Dolemon Sushi",
            "description": "Unmissable Japanese Sushi restaurant. The cheese and salmon makis are delicious",
            "categories": [3],
        }
    )
)
```

## PUT Request your collection type

Execute a `PUT` request on the `restaurant` collection type in order to update the category of a restaurant.

Be sure that you activated the `put` permission for the `restaurant` collection type.

</ApiCall>

### Example

```python

class Restaurant:
    def __init__(self):
        self.api_url = "http://localhost:1337/api"

    def all(self):
        r = requests.get(self.api_url + "/restaurants")
        return r.json()

    def create(self, params):
        r = requests.post(
            self.api_url + "/restaurants",
            headers={"Content-Type": "application/json"},
            data=json.dumps(
                {
                    "data": {
                        "name": params["name"],
                        "description": params["description"],
                        "categories": params["categories"],
                    }
                }
            ),
        )
        return r.json()

    def update(self, id, params):
        r = requests.put(
            self.api_url + "/restaurants/" + str(id),
            headers={"Content-Type": "application/json"},
            params={"populate": "categories"},
            data=json.dumps({"data": {"categories": params["categories"]}}),
        )
        return r.json()

restaurant = Restaurant()
print(restaurant.update(2, {"categories": [2]}))



# React
Source: https://docs-v4.strapi.io/dev-docs/integrations/react

# Getting Started with React

This integration guide follows the [Quick Start Guide](/dev-docs/quick-start) and assumes you have you have fully completed the "Hands-on" path. You should be able to consume the API by browsing the URL [http://localhost:1337/api/restaurants](http://localhost:1337/api/restaurants).

If you haven't gone through the Quick Start Guide, the way you request a Strapi API with [React](https://reactjs.org/) remains the same except that you will not fetch the same content.

## Create a React app

Create a basic React application using [create-react-app](https://reactjs.org/docs/create-a-new-react-app.html).

</Tabs>

## Use an HTTP client

Many HTTP clients are available but in this documentation there are examples using [Axios](https://github.com/axios/axios) and [Fetch](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API).

To install Axios:

</Tabs>

There is no installation required for `Fetch`.

## GET Request your collection type

Execute a `GET` request on the `restaurant` collection type in order to fetch all your restaurants.

Be sure that you activated the `find` permission for the `restaurant` collection type

</TabItem>

</TabItem>
</Tabs>

### Example

</Tabs>

## POST Request your collection type

Execute a `POST` request on the `restaurant` collection type in order to create a restaurant.

Be sure that you activated the `create` permission for the `restaurant` collection type and the `find` permission fot the `category` Collection type.

In this example a `japanese` category has been created which has the id: 3.

</TabItem>

</TabItem>
</Tabs>

### Example

</Tabs>

## PUT Request your collection type

Execute a `PUT` request on the `restaurant` collection type in order to update the category of a restaurant.

Be sure that you activated the `put` permission for the `restaurant` collection type.

We consider that the id of your restaurant is `2`, and the id of your category is `2`.

</TabItem>

</TabItem>
</Tabs>



# Ruby
Source: https://docs-v4.strapi.io/dev-docs/integrations/ruby

# Getting Started with Ruby

This integration guide follows the [Quick Start Guide](/dev-docs/quick-start) and assumes you have you have fully completed the "Hands-on" path. You should be able to consume the API by browsing the URL [http://localhost:1337/api/restaurants](http://localhost:1337/api/restaurants).

If you haven't gone through the Quick Start Guide, the way you request a Strapi API with [Ruby](https://www.ruby-lang.org/en/) remains the same except that you do not fetch the same content.

## Create a Ruby file

Be sure to have [Ruby installed](https://www.ruby-lang.org/en/documentation/installation/) on your computer.

```bash
mkdir ruby-app && cd ruby-app
touch script.rb
```

## Use an HTTP client

Many HTTP clients are available but in this documentation we'll use [HTTParty](https://github.com/jnunemaker/httparty).

- Create a `Gemfile` containing the following:

```
source "https://rubygems.org"

gem "httparty"
```

- Install your gems by running the following command:

```bash
bundle install
```

## GET Request your collection type

Execute a `GET` request on the `restaurant` collection type in order to fetch all your restaurants.

Be sure that you activated the `find` permission for the `restaurant` collection type.

</ApiCall>

### Example

```ruby
require 'httparty'

class Restaurant
  include HTTParty
  base_uri 'http://localhost:1337/api'

  def all
    self.class.get('/restaurants')
  end
end

restaurant = Restaurant.new
puts restaurant.all
```

## POST Request your collection type

Execute a `POST` request on the `restaurant` collection type in order to create a restaurant.

Be sure that you activated the `create` permission for the `restaurant` collection type and the `find` permission for the `category` Collection type.
Add the `?populate=categories` query parameter to return the categories with the response.

In this example a `japanese` category has been created which has the id: 3.

</ApiCall>

### Example

```ruby
require 'httparty'

class Restaurant
  include HTTParty
  base_uri 'http://localhost:1337/api'

  def initialize
    @options = {
      header: { 'Content-Type': 'application/json' },
      query: { 'populate': 'categories' }
    }
  end

  def all
    self.class.get('/restaurants')
  end

  def create(params)
    @options[:body] = {
      data: {
        name: params[:name],
        description: params[:description],
        categories: params[:categories]
      }
    }

    self.class.post('/restaurants', @options)
  end
end

restaurant = Restaurant.new
puts restaurant.create({
  name: 'Dolemon Sushi',
  description: 'Unmissable Japanese Sushi restaurant. The cheese and salmon makis are delicious',
  categories: [3]
})
```

## PUT Request your collection type

Execute a `PUT` request on the `restaurant` collection type in order to update the category of a restaurant.

Be sure that you activated the `put` permission for the `restaurant` collection type.
Add the `?populate=categories` query parameter to return the categories with the response.

</ApiCall>

### Example

```ruby
require 'httparty'

class Restaurant
  include HTTParty
  base_uri 'http://localhost:1337/api'

  def initialize
    @options = {
      header: { 'Content-Type': 'application/json' },
      query: { 'populate': 'categories' }
    }
  end

  def all
    self.class.get('/restaurants')
  end

  def create(params)
    @options[:body] = {
      data: {
        name: params[:name],
        description: params[:description],
        categories: params[:categories]
      }
    }

    self.class.post('/restaurants', @options)
  end

  def update(id, params)
    @options[:body] = {
      data: {
        categories: params[:categories]
      }
    }
    self.class.put("/restaurants/#{id}", @options)
  end
end

restaurant = Restaurant.new
puts restaurant.update(16, { categories: [2] })
```



# Sapper
Source: https://docs-v4.strapi.io/dev-docs/integrations/sapper

# Getting Started with Sapper

This integration guide follows the [Quick Start Guide](/dev-docs/quick-start) and assumes you have you have fully completed the "Hands-on" path. You should be able to consume the API by browsing the URL[ http://localhost:1337/api/restaurants](http://localhost:1337/api/restaurants).

If you haven't gone through the Quick Start Guide, the way you request a Strapi API with [Sapper](https://sapper.svelte.dev) remains the same except that you do not fetch the same content.

## Create a Sapper app

First, install Degit by running `npm install -g degit` in your command-line interface (CLI).

“Degit makes copies of Git repositories and fetches the latest commit in the repository. This is a more efficient approach than using git clone, because we’re not downloading the entire Git history.”

Create a basic Sapper application using webpack:

```bash
npx degit "sveltejs/sapper-template#webpack" sapper-app
```

## Use an HTTP client

Many HTTP clients are available but in this documentation we'll use [Axios](https://github.com/axios/axios) and [Fetch](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API).

</Tabs>

## GET Request your collection type

Execute a `GET` request on the `restaurant` collection type in order to fetch all your restaurants.

Be sure that you activated the `find` permission for the `restaurant` collection type

</TabItem>

</TabItem>

</Tabs>

### Example

</Tabs>

## POST Request your collection type

Execute a `POST` request on the `restaurant` collection type in order to create a restaurant.

Be sure that you activated the `create` permission for the `restaurant` collection type and the `find` permission fot the `category` Collection type.

In this example a `japanese` category has been created which has the id: 3.

</TabItem>

</TabItem>

</Tabs>

### Example

</Tabs>

## PUT Request your collection type

Execute a `PUT` request on the `restaurant` collection type in order to update the category of a restaurant.

Be sure that you activated the `put` permission for the `restaurant` collection type.

</TabItem>

</TabItem>

</Tabs>



# Svelte
Source: https://docs-v4.strapi.io/dev-docs/integrations/svelte

# Getting Started with Svelte

This integration guide follows the [Quick Start Guide](/dev-docs/quick-start) and assumes you have you have fully completed the "Hands-on" path. You should be able to consume the API by browsing the URL [http://localhost:1337/api/restaurants](http://localhost:1337/api/restaurants).

If you haven't gone through the Quick Start Guide, the way you request a Strapi API with [Svelte](https://svelte.dev) remains the same except that you will not fetch the same content.

## Create a Svelte app

First, install Degit by running `npm install -g degit` in your command-line interface (CLI).

“Degit makes copies of Git repositories and fetches the latest commit in the repository. This is a more efficient approach than using git clone, because we’re not downloading the entire Git history.”

Create a basic Svelte application using webpack:

```bash
npx degit sveltejs/template svelte-app
```

### Use an HTTP client

Many HTTP clients are available but in this documentation we'll use [Axios](https://github.com/axios/axios) and [Fetch](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API).

</Tabs>

## GET Request your collection type

Execute a `GET` request on the `restaurant` collection type in order to fetch all your restaurants.

Be sure that you activated the `find` permission for the `restaurant` collection type.

</TabItem>

</TabItem>

</Tabs>

### Example

</Tabs>

## POST Request your collection type

Execute a `POST` request on the `restaurant` collection type in order to create a restaurant.

Be sure that you activated the `create` permission for the `restaurant` collection type and the `find` permission for the `category` Collection type.

In this example a `japanese` category has been created which has the id: 3.

</TabItem>

</TabItem>

</Tabs>

### Example

</Tabs>

## PUT Request your collection type

Execute a `PUT` request on the `restaurant` collection type in order to update the category of a restaurant.

Be sure that you activated the `put` permission for the `restaurant` collection type.

We consider that the id of your restaurant is `2`.
and the id of your category is `2`.

</TabItem>

</TabItem>

</Tabs>



# Vue.js
Source: https://docs-v4.strapi.io/dev-docs/integrations/vue-js

# Getting Started with Vue.js

This integration guide follows the [Quick Start Guide](/dev-docs/quick-start) and assumes you have you have fully completed the "Hands-on" path. You should be able to consume the API by browsing the URL [http://localhost:1337/api/restaurants](http://localhost:1337/api/restaurants).

If you haven't gone through the Quick Start Guide, the way you request a Strapi API with [Vue.js](https://vuejs.org/) remains the same except that you do not fetch the same content.

## Create a Vue.js app

Create a basic Vue.js application using [Vue CLI](https://cli.vuejs.org).

```bash
vue create vue-app
```

## Use an HTTP client

Many HTTP clients are available but in this documentation we'll use [Axios](https://github.com/axios/axios) and [Fetch](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API).

</Tabs>

## GET Request your collection type

Execute a `GET` request on the `restaurant` collection type in order to fetch all your restaurants.

Be sure that you activated the `find` permission for the `restaurant` collection type.

</TabItem>

</TabItem>
</Tabs>

### Example

</Tabs>

## POST Request your collection type

Execute a `POST` request on the `restaurant` collection type in order to create a restaurant.

Be sure that you activated the `create` permission for the `restaurant` collection type and the `find` permission for the `category` Collection type.

In this example a `japanese` category has been created which has the id: 3.

</TabItem>

</TabItem>
</Tabs>

### Example

</Tabs>

## PUT Request your collection type

Execute a `PUT` request on the `restaurant` collection type in order to update the category of a restaurant.

Be sure that you activated the `put` permission for the `restaurant` collection type.

We consider that the id of your restaurant is `2`.
and the id of your category is `2`.

</TabItem>

</TabItem>
</Tabs>



# Welcome to the Strapi Developer Docs!
Source: https://docs-v4.strapi.io/dev-docs/intro

# Welcome to the Strapi Developer Docs!

This documentation contains official technical documentation related to the setup, deployment, update and customization of your Strapi v4 application.

:::strapi Can't wait to start using Strapi?
You can directly head to the [Quick Start](./quick-start.md)! <br/> If demos are more your thing, we have a [video demo](https://youtu.be/zd0_S_FPzKg), or you can request a [live demo](https://strapi.io/demo)!
:::

The original purpose of the project was to help Boot**strap** your **API**: that's how Strapi was created. Now, Strapi is an open-source headless CMS that gives developers the freedom to choose their favorite tools and frameworks and allows editors to manage and distribute their content using their application's admin panel. Based on a plugin system, Strapi is a flexible CMS whose admin panel and API are extensible - and which every part is customizable to match any use case. Strapi also has a built-in user system to manage in detail what the administrators and end users have access to.

## Open-source & Contribution

Strapi is an open-source project (see [LICENSE](https://github.com/strapi/strapi/blob/master/LICENSE) file for more information). The core project, as well as the documentation and any related tool can be found in the [Strapi](https://github.com/strapi) GitHub organization.

As it goes hand in hand with the open-source ecosystem, Strapi is open to contributions. The Strapi team appreciates every contribution, be it a feature request, bug report, or pull request. The following GitHub repositories are open-source and contributions-friendly:

- [`strapi/strapi`](https://github.com/strapi/strapi): main repository of Strapi, which contains the core of the project. You can find the admin panel, core plugins, plugin providers, and the whole code that runs your Strapi application. Please read the [`CONTRIBUTING.md`](https://github.com/strapi/strapi/blob/master/CONTRIBUTING.md) file to have more information about contributions to the main repository.
- [`strapi/documentation`](https://github.com/strapi/documentation): contains the whole documentation of Strapi. Please read the [contribution guide](https://github.com/strapi/documentation/blob/main/CONTRIBUTING.md) to have more information about contributions to the Strapi documentation.
- [`strapi/design-system`](https://github.com/strapi/design-system): is the design system that is used in the admin panel. It brings consistency between the different admin plugins.
- [`strapi-community/awesome-strapi`](https://github.com/strapi/awesome-strapi): contains everything the community built and all managed plugins. It is used as a central place to find and submit new packages such as plugins, middlewares, hooks, and general enhancements to the core of Strapi.

## Strapi Community

Strapi is a community-oriented project with an emphasis on transparency. The Strapi team has at heart to share their vision and build the future of Strapi with the Strapi community. This is why the [roadmap](https://feedback.strapi.io) is open: as all insights are very important and will help steer the project in the right direction, any community member is most welcome to share ideas and opinions there.

Community members also take great part in providing the whole community a plethora of resources about Strapi. You can find [tutorials](https://strapi.io/tutorials/) on the Strapi website, where you can also create your own. Also, as an open-source project, the technical documentation of Strapi is open to contributions (see [Open-source & Contribution](#open-source-contribution)).

:::strapi Want to join the community?
You can join [GitHub](https://github.com/strapi/strapi), the [Forum](https://forum.strapi.io/), and the [Discord](https://discord.strapi.io) to share your ideas and opinions with other community members and members of the Strapi team. If you're looking for news and updates about Strapi, [Twitter](https://twitter.com/strapijs) and the [blog](https://strapi.io/blog) are pretty good places to start!
:::

## Support

Strapi is offered as free and open-source for users who wish to self-host the software. When having an issue or a question, the [forum](https://forum.strapi.io) is great first place to reach out for help. Both the Strapi community and core developers often check this platform and answer posts.

For enterprise support, please see our [Enterprise Support platform](https://support.strapi.io/support/home). Please note that you will need to have an active enterprise license to place tickets.



# Migration Guides
Source: https://docs-v4.strapi.io/dev-docs/migration-guides

# Migration guides

Migrations are necessary when upgrades to Strapi include breaking changes. The migration guides are sequential, meaning if there is more than 1 migration guide between your current version and the latest release, follow each guide in order.

If there is no specific migration guide between your current version and the latest release, you only need to follow the [guide to upgrade Strapi](/dev-docs/update-version.md).

:::caution
[Plugins extension](/dev-docs/plugins/users-permissions) that create custom code or modify existing code will need to be updated and compared to the changes in the repository. Not updating the plugin extensions could break the application.
:::

:::note
Strapi 5 is out, but Strapi v4 is still supported until March 2026, which means security fixes are still applied to v4 (see [Strapi release notes](https://github.com/strapi/strapi/releases)). When you're ready to upgrade, please refer to the [Strapi 5 upgrade documentation](https://docs.strapi.io/dev-docs/migration/v4-to-v5/introduction-and-faq).
:::

## v4 migration guides

- [Migration guide from 4.0.0+ to 4.0.6](/dev-docs/migration/v4/migration-guide-4.0.0-to-4.0.6)
- [Migration guide from 4.0.6+ to 4.1.8](/dev-docs/migration/v4/migration-guide-4.0.6-to-4.1.8)
- [Migration guide from 4.1.8+ to 4.1.10](/dev-docs/migration/v4/migration-guide-4.1.8-to-4.1.10)
- [Migration guide from 4.2.x to 4.3.x](/dev-docs/migration/v4/migration-guide-4.2.x-to-4.3.x)
- [Migration guide from 4.3.6 to 4.3.8](/dev-docs/migration/v4/migration-guide-4.3.6-to-4.3.8)
- [Migration guide from 4.4.3 to 4.4.5](/dev-docs/migration/v4/migration-guide-4.4.3-to-4.4.5)
- [Migration guide from 4.4.5 to 4.5.1](/dev-docs/migration/v4/migration-guide-4.4.5-to-4.5.1)
- [Migration guide from 4.5.1 to 4.6.1](/dev-docs/migration/v4/migration-guide-4.5.1-to-4.6.1)
- [Migration guide from 4.6.1 to 4.7.0](/dev-docs/migration/v4/migration-guide-4.6.1-to-4.7.0)
- [Migration guide from 4.7.0 to 4.11.4](/dev-docs/migration/v4/migration-guide-4.7.0-to-4.11.4)
- [Migration guide from 4.11.4 to 4.14.0](/dev-docs/migration/v4/migration-guide-4.11.4-to-4.14.0)
- [Migration guide from 4.14.0 to 4.15.5](/dev-docs/migration/v4/migration-guide-4.14.0-to-4.15.5)

## v3 to v4 migration guides

Migrating from v3.6.x to v4.0.x revolves around 3 topics:

- The [code migration guide](/dev-docs/migration/v3-to-v4/code-migration) helps migrating the built-in back-end and front-end code of the Strapi application to v4.
- The [data migration guide](/dev-docs/migration/v3-to-v4/data-migration) helps migrating the database content to v4.
- The [plugin migration guide](/dev-docs/migration/v3-to-v4/plugin-migration) helps migrating a plugin to v4.

## v3 migration guides

v3 migration guides are available in the [v3 documentation](https://docs-v3.strapi.io/developer-docs/latest/update-migration-guides/migration-guides.html#v3-guides).



# Configuration
Source: https://docs-v4.strapi.io/dev-docs/migration/v3-to-v4/code/configuration

# v4 code migration: Updating configuration

This guide is part of the [v4 code migration guide](/dev-docs/migration/v3-to-v4/code-migration) designed to help you migrate the code of a Strapi application from v3.6.x to v4.0.x

Strapi v4 introduces several types of changes to configurations, which includes new files, moved or restructured files, and removed features. The following table gives a high-level overview of the changes, and you can click on a specific topic to read more information:

| Configuration topic                       | Type of change in Strapi v4 vs. v3                                      | File name in Strapi v4 |
| ------------------------------------------| ----------------------------------------------------------------------- | ---------------------- |
| [Database](#database-configuration)       | Changes to an existing Strapi v3 file                                   | `database.js`          |
| [Server](#server-configuration)           | Changes to an existing Strapi v3 file                                   | `server.js`            |
| [Admin panel](#admin-panel-configuration) | New file in Strapi v4                                                   | `admin.js`             |
| [Middlewares](#middlewares-configuration) | Changes to an existing Strapi v3 file                                   | `middlewares.js`       |
| [CRON tasks](#cron-tasks)                 | New file in Strapi v4                                                   | `cron-tasks.js`        |
| [API](#api-configuration)                 | Changes to an existing Strapi v3 file                                   | `api.js`               |
| [Plugins](#plugins-configuration)         | Changes to an existing Strapi v3 file                                   | `plugins.js`           |
| [Bootstrap function](#bootstrap-function) | Now defined in the global `src/index.js` file                         | -                      |
| [Custom functions folder](#custom-functions-folder) | Feature removed from Strapi v4                                | -                      |
| [Custom responses](#custom-responses)     | Feature removed from Strapi v4                                          | -                      |

:::note
This part of the code migration guide is not an exhaustive resource for Strapi v4 configurations, which are described in the [configurations documentation](/dev-docs/configurations).
:::

## Database configuration

:::caution
MongoDB databases are no longer supported in Strapi v4. You need to migrate to [a compatible SQL database](/dev-docs/installation/cli#preparing-the-installation) to use Strapi v4.
<!-- TODO: add link to MongoDB migration instructions here -->
:::

Due to the complete rewrite of the database and query layers in Strapi v4, the entire structure of the `database.js` file has changed (see [database configuration](/dev-docs/configurations/database#configuration-structure) documentation). Multi-database support has been dropped, so there is no more `defaultConnection` key. Instead, in Strapi v4, the 2 main database configuration objects are:

- `connection`, passed to the database connection manager package (i.e. [Knex.js](https://github.com/knex/knex)),
- and `settings` for Strapi-specific settings.

:::note
Strapi v4 does not abstract Knex.js key names so some key names are different in Strapi v3 and v4 (e.g. `username` in Strapi v3 is now `user` in Strapi v4) (see [database configuration](/dev-docs/configurations/database) documentation).
:::

<details>
<summary> Example of a Strapi v3 database configuration for PostgreSQL:</summary>

```js title="./config/database.js"

module.exports = ({ env }) => ({
  defaultConnection: 'default',
  connections: {
    default: {
      connector: 'bookshelf',
      settings: {
        client: 'postgres',
        host: env('DATABASE_HOST', 'localhost'),
        port: env.int('DATABASE_PORT', 5432),
        database: env('DATABASE_NAME', 'strapi'),
        username: env('DATABASE_USERNAME', 'strapi'),
        password: env('DATABASE_PASSWORD', 'strapi'),
        schema: env('DATABASE_SCHEMA', 'public'), // Not Required
        ssl: {
          rejectUnauthorized: env.bool('DATABASE_SSL_SELF', false), // For self-signed certificates
        },
      },
      options: {},
    },
  },
});
```

</details>

<details>
<summary> Example of a Strapi v4 database configuration for PostgreSQL:</summary>

```jsx title="./config/database.js"

module.exports = ({ env }) => ({
  connection: {
    client: 'postgres',
    connection: {
      host: env('DATABASE_HOST', '127.0.0.1'),
      port: env.int('DATABASE_PORT', 5432),
      database: env('DATABASE_NAME', 'strapi'),
      user: env('DATABASE_USERNAME', 'strapi'),
      password: env('DATABASE_PASSWORD', 'strapi'),
      schema: env('DATABASE_SCHEMA', 'public'), // Not Required
      ssl: {
        rejectUnauthorized: env.bool('DATABASE_SSL_SELF', false), // For self-signed certificates
      },
    },
    debug: false,
  },
});
```

</details>

## Server configuration

The [server configuration](/dev-docs/configurations/server) in Strapi v4 is similar to Strapi v3, with the following exceptions:

- All admin panel-related settings (i.e. `admin.*` keys) are in the [`admin.js` file](#admin-panel-configuration).
- CRON tasks (configured with `cron.*` keys) can be directly referenced in the `./config/server.js` or imported from any other custom files (see [`cron-tasks.js` file](#cron-tasks)).
- `app.keys` is a new configuration option for the refactored [session middleware](/dev-docs/configurations/middlewares#session) and is used to create secure session keys.

<details>
<summary> Example of a Strapi v3 server configuration:</summary>

```jsx title="./config/server.js"

module.exports = ({ env }) => ({
  host: env('HOST', '0.0.0.0'),
  port: env.int('PORT', 1337),
  admin: {
    // ...
  },
});
```

</details>

<details>
<summary> Example of a Strapi v4 server configuration:</summary>

```jsx title="./config/server.js"

module.exports = ({ env }) => ({
  host: env('HOST', '0.0.0.0'),
  port: env.int('PORT', 1337),
  app: {
    keys: env.array('APP_KEYS'),
  },
});
```

</details>

## Admin panel configuration

In Strapi v3, admin panel configuration is defined inside an `admin` object within the `server.js` configuration file.

In Strapi v4, the admin panel configuration is defined in `./config/admin.js` (see [project structure](/dev-docs/project-structure)).

By default, in Strapi v4, only 2 keys are required in `admin.js`:

- `apiToken.salt` is used as the salt key for the new [API tokens feature](/dev-docs/configurations/api-tokens),
- `auth.secret` (previously located in the `server.js` file in Strapi v3) is used to encrypt JWTs for the admin panel.

The admin panel configuration documentation lists all the other [available options](/dev-docs/configurations/admin-panel#available-options).

<details>
<summary> Example of a Strapi v3 server.js admin configuration section:</summary>

```jsx title="./config/server.js"

module.exports = ({ env }) => ({
  // ...
  admin: {
    auth: {
      secret: env('ADMIN_JWT_SECRET', '77b2c87dbab4e1697bec244226fbd1b3'),
    },
  },
});
```

</details>

<details>
<summary> Example of a Strapi v4 admin.js configuration file:</summary>

```jsx title="./config/admin.js"

module.exports = ({ env }) => ({
  apiToken: {
    salt: env('API_TOKEN_SALT', 'd9b0df66ff97a666027e665707b4e3e7'),
  },
  auth: {
    secret: env('ADMIN_JWT_SECRET', '77b2c87dbab4e1697bec244226fbd1b3'),
  },
});
```

</details>

## Middlewares configuration

[Middlewares](/dev-docs/backend-customization/middlewares) in Strapi v4 have been entirely overhauled and the Strapi v3 configuration format (e.g. `load order`, `before`, and `after` keys) is replaced with a single array representing the loading order.

[Middlewares configuration](/dev-docs/configurations/middlewares#optional-configuration) in Strapi v4 is defined in the `./config/middlewares.js` file (plural file name, instead of `middleware.js` in Strapi v3).

<details>
<summary> Example of Strapi v3 middlewares configuration:</summary>

```jsx title="./config/middleware.js"

module.exports = {
  //...
  settings: {
    cors: {
      origin: ['http://localhost', 'https://mysite.com', 'https://www.mysite.com'],
    },
  },
  // ...
};
```

</details>

<details>
<summary> Example of Strapi v4 middlewares configuration:</summary>

**Important**: Various middlewares in this list are required. During configuration, replace the string with the object format (see [middlewares configuration](/dev-docs/configurations/middlewares#optional-configuration)).

```jsx title="./config/middlewares.js"

module.exports = [
  'strapi::errors',
  'strapi::security',
  {
    name: 'strapi::cors',
    config: {
      origin: ['http://localhost', 'https://mysite.com', 'https://www.mysite.com'],
    }
  },
  'strapi::poweredBy',
  'strapi::logger',
  'strapi::query',
  'strapi::body',
  'strapi::session',
  'strapi::favicon',
  'strapi::public',
];
```

</details>

:::note
In Strapi v4, security middlewares from Strapi v3 have been removed and replaced with [koa-helmet](https://www.npmjs.com/package/koa-helmet), which is a Koa.js wrapper for [helmet](https://github.com/helmetjs/helmet). This package replaces all security middlewares except for `cors` (see [internal middlewares configuration reference](/dev-docs/configurations/middlewares#internal-middlewares-configuration-reference)).
:::

## CRON tasks

In Strapi v3, CRON tasks could be defined in a `./config/functions/cron.js` file.

In Strapi v4, the `config/functions` folder [does not exist anymore](#custom-functions-folder), and [CRON tasks](/dev-docs/configurations/cron) can be defined:

- in a separate file (e.g. `./config/cron-tasks.js`)
- or in the `server.js` file:
  - either by directly declaring them here
  - or by creating a custom file and requiring it in the `server.js` file.

## API configuration

The [API configuration](/dev-docs/configurations/api) options are similar in Strapi v3 and v4, with the exception of the following keys:

- `rest.defaultLimit` is `25` by default (instead of `100` in Strapi v3)
- `rest.maxLimit` is `100` by default (instead of `null` in Strapi v3)
- `rest.prefix` is a new API configuration option. Its default value is `/api` and can be changed to anything but `/`.

The API configuration is optional.

<details>
<summary> Example of a Strapi v3 API configuration:</summary>

```jsx title="./config/api.js"

module.exports = ({ env }) => ({
  responses: {
    privateAttributes: ['created_at'],
  },
  rest: {
    defaultLimit: 100,
    maxLimit: 250,
  },
});
```

</details>

<details>
<summary> Example of a Strapi v4 API configuration:</summary>

```js title="./config/api.js"

module.exports = ({ env }) => ({
  responses: {
    privateAttributes: ['createdAt'],
  },
  rest: {
    prefix: '/v1',
    defaultLimit: 100,
    maxLimit: 250,
  },
});
```

</details>

## Plugins configuration

:::caution
Strapi v3 plugins may not work with Strapi v4. If you are a plugin developer wanting to upgrade your plugin to Strapi v4, please refer to the [plugin migration guide](/dev-docs/migration/v3-to-v4/plugin-migration).
:::

[Plugins configuration](/dev-docs/configurations/plugins) in Strapi v4 include the ability to:

- enable or disable a plugin,
- and have custom resolve locations in addition to custom configuration options.

To migrate to Strapi v4, use the new `enabled` and `resolve` keys and move existing Strapi v3 custom configuration keys into a nested `config` object:

<details>
<summary> Example of a Strapi v3 plugins configuration:</summary>

```jsx
module.exports = ({ env }) => ({
  // ...
  sentry: {
    dsn: env('SENTRY_DSN'),
    sendMetadata: true,
  },
  // ...
});

```

</details>

<details>
<summary> Example of a Strapi v4 plugins configuration:</summary>

```jsx title="./config/plugins.js"

module.exports = ({ env }) => ({
  sentry: {
    enabled: true,
    resolve: './src/plugins/my-sentry-fork',
    config: {
      dsn: env('SENTRY_DSN'),
      sendMetadata: true,
      myCustomSetting: false,
    },
  },
  graphql: {
    enabled: true,
    config: {
      defaultLimit: 10,
      maxLimit: 20,
    },
  },
});

```

</details>

:::note
For specific plugin configurations, please refer to the dedicated plugin's documentation.
:::

## Custom functions folder

The `config/functions` folder and all of its content no longer exist in Strapi v4. [The `bootstrap.js` file](#bootstrap-function) and [CRON tasks](#cron-tasks) have their own dedicated configuration options but global functions are no longer automatically added to the Strapi internal API.

When creating universal utility functions in Strapi v4, it's recommended to:

- either create a [plugin](/dev-docs/plugins-development) dedicated to holding those utility functions,
- or build [services](/dev-docs/backend-customization/services) that can be called from anywhere in the Strapi backend.

## Bootstrap function

The dedicated `bootstrap.js` file no longer exists in Strapi v4 and is now a global function combined with the new `register` function. `bootstrap()` and `register()` can be found in `./src/index.js` (see [functions documentation](/dev-docs/configurations/functions)).

## Custom responses

Due to the standardization of the response and error handling structures in Strapi v4, it's no longer possible to customize the response structure or add custom response structures.

For custom error messages, please refer to the [error handling](/dev-docs/error-handling) documentation or the [requests & responses](/dev-docs/backend-customization/requests-responses) documentation.

:::strapi Next steps
[Migrating the backend code](/dev-docs/migration/v3-to-v4/code/backend) of Strapi to v4 also requires to at least migrate the core features of the Strapi server, such as the [dependencies](/dev-docs/migration/v3-to-v4/code/dependencies), [routes](/dev-docs/migration/v3-to-v4/code/routes), [controllers](/dev-docs/migration/v3-to-v4/code/controllers), [services](/dev-docs/migration/v3-to-v4/code/services), and [content-type schema](/dev-docs/migration/v3-to-v4/code/content-type-schema).
:::



# Content-Type schema
Source: https://docs-v4.strapi.io/dev-docs/migration/v3-to-v4/code/content-type-schema

# v4 code migration: Updating content-type schemas

This guide is part of the [v4 code migration guide](/dev-docs/migration/v3-to-v4/code-migration) designed to help you migrate the code of a Strapi application from v3.6.x to v4.0.x

Models in Strapi v4 have been completely overhauled: model files are located in `/content-types/` folders, various keys and settings have been removed, and the relation syntax has completely changed.

Migrating to Strapi v4 requires:

- [converting models to content-types](#convert-models-to-content-types),
- [updating content-type relations](#updating-content-type-relations),
- and [updating lifecycle hooks](#updating-lifecycle-hooks).

## Convert models to content-types

:::strapi v3/v4 comparison
Strapi v3 declares models in `<model-name>.settings.json` files found in a `models` folder.

In Strapi v4, [content-types](/dev-docs/backend-customization/models#content-types) are declared in `schema.json` files found in `./src/api/<apiName>/content-types/<contentTypeName>` folder. The `schema.json` files introduce some new properties (see [schema documentation](/dev-docs/backend-customization/models#model-schema)).
:::

:::note
Content-types can be created automatically with the [interactive CLI command `strapi generate`](/dev-docs/cli#strapi-generate).
:::

To convert Strapi v3 models to v4 content-types:

1. Move the `./api` folder at the root of your project into `./src`:

    ```sh
    mkdir src # Only if you haven't created the `./src` folder
    mv api/ src/api/
    ```

2. Move/rename each content-types `models` folder to `./src/api/<apiName>/content-types/`:

    ```sh
    mv src/api/<apiName>/models/ src/api/<apiName>/content-types/
    ```

:::tip
[Strapi codemods](https://github.com/strapi/codemods/) can be used to convert v3 models to v4 content-types.
:::

3. Move/rename each model's `<modelName>.settings.json` file to `./src/api/<apiName>/content-types/<contentTypeName>/schema.json` files.
4. In each `<contentTypeName>/schema.json` file, update [the `info` object](/dev-docs/backend-customization/models#model-information), which now requires declaring the 3 new `singularName`, `pluralName` and `displayName` keys and respecting some case-formatting conventions:

    ```json title="./src/api/<apiName>/content-types/<contentTypeName>/schema.json"

    // ...
    "info": {
      "singularName": "content-type-name", // kebab-case required
      "pluralName": "content-type-names", // kebab-case required
      "displayName": "Content-type name",
      "name": "Content-type name",
    };
    // ...
    ```

## Updating content-type relations

:::strapi v3/v4 comparison
Strapi v3 defines relations between content-types with the `via`, `model` and `collection` properties in the model settings.

In Strapi v4, relations should be explicitly described in the `schema.json` file of the content-types (see [relations documentation](/dev-docs/backend-customization/models#relations)).
:::

If the content-type has relations, it's required to manually migrate them to Strapi v4, by updating the [schema](/dev-docs/backend-customization/models#model-schema) of the content-types.

To update content-type relations, update the `./src/api/<apiName>/content-types/<contentTypeName>/schema.json` file for each content-type with the following procedure:

1. Declare the relation explicitly by setting the `type` attribute value to `"relation"`.

2. Define the type of relation with the `relation` property.<br/>The value should be a string among the following possible options: `"oneToOne"`, `"oneToMany"`, `"manyToOne"` or `"manyToMany"`.

3. Define the content-type target with the `target` property.<br/>The value should be a string following the `api::api-name.content-type-name` or `plugin::plugin-name.content-type-name` syntax convention.

4. (_optional_) In [bidirectional relations](/dev-docs/backend-customization/models#relations), define `mappedBy` and `inversedBy` properties on each content-type.

<details>
<summary> Example of all possible relations between an article and an author content-types:</summary>

  ```json title="./src/api/article/content-types/article/schema.json"
  
  // Attributes for the Article content-type

  // oneWay relation
  "articleHasOneAuthor": {
    "type": "relation",
    "relation": "oneToOne",
    "target": "api::author.author"
  },
  // oneToOne relation
  "articleHasAndBelongsToOneAuthor": {
    "type": "relation",
    "relation": "oneToOne",
    "target": "api::author.author",
    "inversedBy": "article"
  },
  // oneToMany relation
  "articleBelongsToManyAuthors": {
    "type": "relation",
    "relation": "oneToMany",
    "target": "api::author.author",
    "mappedBy": "article"
  },
  // manyToOne relation
  "authorHasManyArticles": {
    "type": "relation",
    "relation": "manyToOne",
    "target": "api::author.author",
    "inversedBy": "articles"
  },
  // manyToMany relation
  "articlesHasAndBelongsToManyAuthors": {
    "type": "relation",
    "relation": "manyToMany",
    "target": "api::author.author",
    "inversedBy": "articles"
  },
  // manyWay relation
  "articleHasManyAuthors": {
    "type": "relation",
    "relation": "oneToMany",
    "target": "api::author.author"
  }
  ```

  ```json title="./src/api/author/content-types/author/schema.json"

  // Attributes for the Author content-type

  // inversed oneToMany relation
  "article": {
    "type": "relation",
    "relation": "manyToOne",
    "target": "api::article.article",
    "inversedBy": "articleBelongsToManyAuthors"
  },
  // inversed manyToOne or manyToMany relation
  "articles": {
    "type": "relation",
    "relation": "manyToMany",
    "target": "api::article.article",
    "inversedBy": "articlesHasAndBelongsToManyAuthors"
  }
  ```

</details>

## Updating lifecycle hooks

:::strapi v3/v4 comparison
Strapi v3 declares model lifecycle hooks in `<model-name>.js` files found in a `models` folder.

In Strapi v4, [lifecycle hooks](/dev-docs/backend-customization/models#lifecycle-hooks) are declared in a `lifecycles.js` file found in `./src/api/<apiName>/content-types/<contentTypeName>/` folder. The `lifecycles.js` file is similar in structure but no longer needs lifecycles to be wrapped in a `lifecycles: {}` object, and new parameters are passed to the hooks (see [lifecycle hooks documentation](/dev-docs/backend-customization/models#hook-event-object)).
:::

To convert Strapi v3 model lifecycle hooks to v4 lifecycle hooks:

1. Move/rename the `<modelName>.js` in `./src/api/<apiName>/content-types/` to the proper content-type folder you created in [step 3](#convert-models-to-content-types) of the content-type migration, while changing its name to `lifecyles.js`:

    ```sh
    cd src/api/<apiName>
    mv content-types/<modelName>.js content-types/<contentTypeName>/lifecycles.js
    ```

2. In each `lifecycles.js` file, adjust the structure and move each lifecycle outside of the legacy `lifecycles: {}` object, like in the following examples:

    <details>
    <summary> Example of a Strapi v3 lifecycles file:</summary>

    ```jsx
    module.exports = {
      lifecycles: {
        async beforeCreate() {
          // ...
        },
      },
    };
    ```

    </details>

    <details>
    <summary> Example of a Strapi v4 lifecycles file:</summary>

    ```jsx
    module.exports = {
      async beforeCreate() {
        // ...
      },
    };
    ```

    </details>

3. Refactor the model lifecycle hooks to use the new input variables (see [hook `event` object documentation](/dev-docs/backend-customization/models#hook-event-object)):

  * All Strapi v3 `params` are placed in an `event` object in Strapi v4 (e.g. `event.params`).
  * Nested inside of this params object, you have access to `data`, `select` (also known as fields), `where` (also known as filters), `orderBy` (also known as sort), `limit`, `offset`, and `populate`.
  * Optionally, for all `after*` events, you have access to `event.result` that contains the result response from the database.

  <details>
  <summary> Example of a Strapi v3 lifecycle:</summary>

  ```jsx 
  module.exports = {
    lifecycles: {
      async beforeCreate(data) {
        data.isTableFull = data.numOfPeople === 4;
      },
      async afterCreate(result, data) {
        // do something with result
      }
    },
  };
  ```

  </details>

  <details> 
  <summary>Example of a Strapi v4 lifecycle:</summary>

  ```jsx
  module.exports = {
    beforeCreate(event) {
      let { data, where, select, populate } = event.params;

      data.isTableFull = data.numOfPeople === 4;
    },

    afterCreate(event) {
      const { result, params } = event;

      // do something to the result
    },
  };
  ```

  </details>

:::strapi Next steps
[Migrating the backend code](/dev-docs/migration/v3-to-v4/code/backend) of Strapi to v4 also requires to at least migrate the core features of the Strapi server, such as the [configuration](/dev-docs/migration/v3-to-v4/code/configuration), [dependencies](/dev-docs/migration/v3-to-v4/code/dependencies), [routes](/dev-docs/migration/v3-to-v4/code/routes), [controllers](/dev-docs/migration/v3-to-v4/code/controllers), and [services](/dev-docs/migration/v3-to-v4/code/services).
:::



# Controllers
Source: https://docs-v4.strapi.io/dev-docs/migration/v3-to-v4/code/controllers

# v4 code migration: Updating controllers

This guide is part of the [v4 code migration guide](/dev-docs/migration/v3-to-v4/code-migration) designed to help you migrate the code of a Strapi application from v3.6.x to v4.0.x

:::strapi v3/v4 comparison
In both Strapi v3 and v4, creating content-types automatically generates core API controllers. Controllers are JavaScript files that contain a list of methods, called actions.

In Strapi v3, controllers export an object containing actions that are merged with the existing actions of core API controllers, allowing customization.

In Strapi v4, controllers export the result of a call to the [`createCoreController` factory function](/dev-docs/backend-customization/controllers#implementation), with or without further customization.
:::

Migrating [controllers](/dev-docs/backend-customization/controllers) to Strapi v4 consists in making sure that each controller is located in the proper folder and uses the `createCoreController` factory function introduced in v4.

Due to the differences between controllers implementation in Strapi v3 and v4, it's recommended to create a new controller file, then optionally bring existing v3 customizations into the new file and adapt them when necessary.

:::note
The controller file can be created automatically with the [interactive CLI command `strapi generate`](/dev-docs/cli#strapi-generate).
:::

To create a v4 controller:

1. Create a `api/<api-name>/controllers/<controller-name>.js` file inside the `./src` folder (see [project structure](/dev-docs/project-structure)).

2. Copy and paste the following code at the top of the `./src/api/<api-name>/controllers/<controller-name>.js` file. The code imports the `createCoreController` factory function from the factories included with the core of Strapi:

    ```js
    const { createCoreController } = require('@strapi/strapi').factories;
    ```

3. Copy and paste the following code, replacing `api-name` and `content-type-name` with appropriate names. The code exports the result of a call to the `createCoreController` factory function, passing the unique identifier of the content-type (e.g. `api::api-name.content-type-name`) as an argument:

    ```js
    module.exports = createCoreController('api::api-name.content-type-name')
    ```

4. (_optional_) To customize controller actions, pass a second argument to the `createCoreController` factory function. This argument can be either an object or a function returning an object. The object contains methods, which can either be entirely new actions or replace or extend existing actions of core API controllers (see [controllers implementation documentation](/dev-docs/backend-customization/controllers#adding-a-new-controller)).

<details>
<summary> Example of a v4 controller without customization:</summary>

  ```jsx title="./src/api/<content-type-name>/controllers/<controller-name>.js"

  const { createCoreController } = require('@strapi/strapi').factories;

  module.exports = createCoreController('api::api-name.content-type-name');
  ```

</details>

<details>
<summary> Example of a v4 controller with customization:</summary>

  ```jsx title="./src/api/<content-type-name>/controllers/<controller-name>.js"

  const { createCoreController } = require('@strapi/strapi').factories;

  module.exports = createCoreController('api::api-name.content-type-name', ({ strapi }) => ({
    // wrap a core action, leaving core logic in place
    async find(ctx) {
      // some custom logic here
      ctx.query = { ...ctx.query, local: 'en' }

      // calling the default core action with super
      const { data, meta } = await super.find(ctx);

      // some more custom logic
      meta.date = Date.now()

      return { data, meta };
    },
  }));

  ```

</details>

:::tip Customization tips

- The original controller’s CRUD actions can be called using `super` (e.g. `super.find()`).
- The `sanitizeInput` and `sanitizeOutput` utilities can be used in Strapi v4 and replace the `sanitizeEntity` utility from v3.

More examples can be found in the [controllers implementation documentation](/dev-docs/backend-customization/controllers#implementation).
:::

:::strapi Next steps
[Migrating the backend code](/dev-docs/migration/v3-to-v4/code/backend) of Strapi to v4 also requires to at least migrate the core features of the Strapi server, such as the [configuration](/dev-docs/migration/v3-to-v4/code/configuration), [dependencies](/dev-docs/migration/v3-to-v4/code/dependencies), [routes](/dev-docs/migration/v3-to-v4/code/routes), [services](/dev-docs/migration/v3-to-v4/code/services), and [content-type schemas](/dev-docs/migration/v3-to-v4/code/content-type-schema).
:::



# Dependencies
Source: https://docs-v4.strapi.io/dev-docs/migration/v3-to-v4/code/dependencies

# v4 code migration: Updating dependencies

This guide is part of the [v4 code migration guide](/dev-docs/migration/v3-to-v4/code-migration.md) designed to help you migrate the code of a Strapi application from v3.6.x to v4.0.x

:::strapi v3/v4 comparison
In Strapi v3, Strapi package names were prefixed with `strapi-`.

Strapi v4 uses scoped packages, prefixed with `@strapi/`.
:::

In Strapi v4, many packages no longer need to be defined manually in the `package.json`.

The following examples show a comparison of a Strapi v3 `package.json` and a Strapi v4 `package.json`. All Strapi package versions from the `@strapi/` prefix scope should be the same version.

<details>
<summary> Example of a Strapi v3 package.json file:</summary>

```json title="package.json"

{
  "name": "strapi-v3-project",
  "private": true,
  "version": "0.1.0",
  "description": "A Strapi application",
  "scripts": {
    "develop": "strapi develop",
    "start": "strapi start",
    "build": "strapi build",
    "strapi": "strapi"
  },
  "devDependencies": {},
  "dependencies": {
    "strapi": "3.6.9",
    "strapi-admin": "3.6.9",
    "strapi-utils": "3.6.9",
    "strapi-plugin-content-type-builder": "3.6.9",
    "strapi-plugin-content-manager": "3.6.9",
    "strapi-plugin-users-permissions": "3.6.9",
    "strapi-plugin-email": "3.6.9",
    "strapi-plugin-upload": "3.6.9",
    "strapi-plugin-i18n": "3.6.9",
    "strapi-connector-bookshelf": "3.6.9",
    "knex": "0.21.18",
    "sqlite3": "5.0.0"
  },
  "author": {
    "name": "A Strapi developer"
  },
  "strapi": {
    "uuid": "64f95072-c082-4da8-be68-6d483781cf54"
  },
  "engines": {
    "node": ">=10.16.0 <=14.x.x",
    "npm": "^6.0.0"
  },
  "license": "MIT"
}
```

</details>

<details>
<summary> Example of a Strapi v4 package.json file:</summary>

```json title="package.json"

{
  "name": "strapi-v4-project",
  "private": true,
  "version": "0.1.0",
  "description": "A Strapi application",
  "scripts": {
    "develop": "strapi develop",
    "start": "strapi start",
    "build": "strapi build",
    "strapi": "strapi"
  },
  "devDependencies": {},
  "dependencies": {
    "@strapi/strapi": "4.1.2",
    "@strapi/plugin-users-permissions": "4.1.2", // Optional Package
    "@strapi/plugin-i18n": "4.1.2", // Optional Package
    "sqlite3": "5.0.2"
  },
  "author": {
    "name": "A Strapi developer"
  },
  "strapi": {
    "uuid": "b8aa7baf-d6dc-4c50-93d4-7739bc88c3fd"
  },
  "engines": {
    "node": ">=16.x.x <=20.x.x",
    "npm": ">=6.0.0"
  },
  "license": "MIT"
}
```

</details>

The following table highlights new and removed packages:

- Packages with a ❗ emoji before their name are required and need to be defined in the `package.json` file.
- Packages with a 🔌 emoji before their name are optional plugins/providers that can be installed or removed as needed.
- Packages with a ✨ emoji before their name have a new name in Strapi v4 but do not need to be defined in your `package.json`.
- Packages identified with the ❌  emoji have been removed from Strapi v4 and all references to these packages should be removed from the code.

| Package name in Strapi v3          | Package name in Strapi v4              |
| ---------------------------------- | -------------------------------------- |
| strapi                             | ❗ @strapi/strapi                      |
| strapi-database                    | ✨ @strapi/database                    |
| strapi-admin                       | ✨ @strapi/admin                       |
| strapi-utils                       | ✨ @strapi/utils                       |
| strapi-helper-plugin               | ✨ @strapi/helper-plugin               |
| strapi-plugin-users-permissions    | 🔌 @strapi/plugin-users-permissions    |
| strapi-plugin-i18n                 | 🔌 @strapi/plugin-i18n                 |
| strapi-plugin-upload               | ✨ @strapi/plugin-upload               |
| strapi-plugin-documentation        | 🔌 @strapi/plugin-documentation        |
| strapi-plugin-graphql              | 🔌 @strapi/plugin-graphql              |
| strapi-plugin-email                | ✨ @strapi/plugin-email                |
| strapi-plugin-sentry               | 🔌 @strapi/plugin-sentry               |
| strapi-plugin-content-type-builder | ✨ @strapi/plugin-content-type-builder |
| strapi-plugin-content-manager      | ✨ @strapi/plugin-content-manager      |
| strapi-provider-upload-local       | ✨ @strapi/provider-upload-local       |
| strapi-provider-upload-aws-s3      | 🔌 @strapi/provider-upload-aws-s3      |
| strapi-provider-upload-cloudinary  | 🔌 @strapi/provider-upload-cloudinary  |
| strapi-provider-email-sendmail     | ✨ @strapi/provider-email-sendmail     |
| strapi-provider-email-amazon-ses   | 🔌 @strapi/provider-email-amazon-ses   |
| strapi-provider-email-mailgun      | 🔌 @strapi/provider-email-mailgun      |
| strapi-provider-email-nodemailer   | 🔌 @strapi/provider-email-nodemailer   |
| strapi-provider-email-sendgrid     | 🔌 @strapi/provider-email-sendgrid     |
| create-strapi-starter              | create-strapi-starter                  |
| create-strapi-app                  | create-strapi-app                      |
| strapi-generate-policy             | strapi-generate-policy                 |
| strapi-generate-controller         | strapi-generate-model                  |
| strapi-generate-model              | strapi-generate-controller             |
| strapi-generate-new                | strapi-generate-new                    |
| strapi-generate                    | strapi-generate                        |
| strapi-generate-api                | strapi-generate-api                    |
| strapi-generate-plugin             | strapi-generate-plugin                 |
| strapi-generate-service            | strapi-generate-service                |
| strapi-provider-upload-rackspace   | ❌ (removed from v4)                   |
| strapi-connector-mongoose          | ❌ (removed from v4)                   |
| strapi-connector-bookshelf         | ❌ (removed from v4)                   |
| strapi-hook-redis                  | ❌ (removed from v4)                   |
| strapi-hook-ejs                    | ❌ (removed from v4)                   |
| strapi-middleware-views            | ❌ (removed from v4)                   |

<details>
<summary> Example of updating a dependency to Strapi v4:</summary>
If the `package.json` file of a Strapi v3 application has the `“strapi-plugin-users-permissions”: “3.6.x”` dependency declaration, and the migration targets Strapi v4.1.2, the dependency declaration should be replaced with `“@strapi/plugin-users-permissions”: “4.1.2”`.
</details>

:::strapi Next steps
[Migrating the backend code](/dev-docs/migration/v3-to-v4/code/backend) of Strapi to v4 also requires to at least migrate the core features of the Strapi server, such as the [configuration](/dev-docs/migration/v3-to-v4/code/configuration), [routes](/dev-docs/migration/v3-to-v4/code/routes), [controllers](/dev-docs/migration/v3-to-v4/code/controllers), [services](/dev-docs/migration/v3-to-v4/code/services), and [content-type schemas](/dev-docs/migration/v3-to-v4/code/content-type-schema).
:::



# Global middlewares
Source: https://docs-v4.strapi.io/dev-docs/migration/v3-to-v4/code/global-middlewares

# v4 code migration: Updating global middlewares

This guide is part of the [v4 code migration guide](/dev-docs/migration/v3-to-v4/code-migration.md) designed to help you migrate the code of a Strapi application from v3.6.x to v4.0.x

:::strapi v3/v4 comparison
Strapi v4 only introduces small modifications to the structure of a global middleware, allowing for additional configuration parameters to be passed without the need to manually pull in the configuration via the Strapi API.

The configuration of middlewares has changed (see [configuration migration](/dev-docs/migration/v3-to-v4/code/configuration#middlewares-configuration)).
:::

The [`strapi generate` interactive CLI](/dev-docs/cli#strapi-generate) is the recommended way to create a new middleware:

1. Run `yarn strapi generate` in a terminal.
2. Using the interactive CLI, choose where the middleware should apply and give it a name.
3. Add customizations to the generated file.

<details> 
<summary>Example of a Strapi v3 middleware converted to v4:</summary>

```js title="path: ./my-custom-packages/my-custom-middleware/lib/index.js"

module.exports = async (ctx, next) => {
  const start = Date.now();

  await next();

  const delta = Math.ceil(Date.now() - start);
  ctx.set('X-Response-Time', delta + 'ms');
};
```

The Strapi v3 global middleware example above should be converted to a Strapi v4 middleware using the following code:

```jsx title="path: ./src/middlewares/my-custom-middleware.js"

module.exports = (config, { strapi }) => {
  return async (ctx, next) => {
    const start = Date.now();

    await next();

    const delta = Math.ceil(Date.now() - start);

    let headerName = config.headerName || 'X-Response-Time';
    ctx.set(headerName, delta + 'ms');
  };
};
```

</details>



# GraphQL resolvers
Source: https://docs-v4.strapi.io/dev-docs/migration/v3-to-v4/code/graphql

# v4 code migration: Updating GraphQL resolvers

This guide is part of the [v4 code migration guide](/dev-docs/migration/v3-to-v4/code-migration.md) designed to help you migrate the code of a Strapi application from v3.6.x to v4.0.x

:::strapi v3/v4 comparison

In Strapi v3, GraphQL resolvers are either automatically bound to REST controllers (from the core API) or customized using the `./api/<api-name>/config/schema.graphql.js` files.

In Strapi v4, [GraphQL](/dev-docs/plugins/graphql) dedicated core resolvers are automatically created for the basic CRUD operations for each API. Additional resolvers can be [customized programmatically](/dev-docs/plugins/graphql#customization) using GraphQL’s extension service, accessible using `strapi.plugin(’graphql’).service(’extension’)`.

:::

Migrating GraphQL resolvers to Strapi v4 requires:

* moving the Strapi v3 logic, found in `./api/<api-name>/config/schema.graphql.js` files, to [the `register` method](/dev-docs/configurations/functions#register) found in the `./src/index.js` file of Strapi v4
* and adapting the existing Strapi v3 code to take advantage of the GraphQL extension service introduced in Strapi v4, accessible through `strapi.plugin(’graphql’).service(’extension’)`.

:::note
The entire logic for Strapi v4 GraphQL resolvers doesn’t need to be in the `register` method of `./src/index.js` but it should be referenced from there.
:::

The following documentation provides use case examples of transforming Strapi v3 code to Strapi v4 code that uses the GraphQL extension service. The GraphQL extension service allows adding new definitions for types, queries, and mutations, replacing resolvers, disabling APIs and fields from APIs, and adding policies, middlewares and authorization.

## Adding new definitions

Adding new [types](#types), [queries](#queries) or [mutations](#mutations) definitions in Strapi v4 is done through the `use()` method of the [GraphQL extension service](/dev-docs/plugins/graphql#extending-the-schema).

### Types

**Strapi v3**:

The following code example adds a new `MyEnum` type definition to Strapi v3:

```jsx title="path: ./api/foo/config/schema.graphql.js"

module.exports = {
  definition: `
    enum MyEnum {
      a
      b
      c
    }
  `,
}
```

**Strapi v4**:

The Strapi v3 code example above should be replaced by the following code in Strapi v4:

```jsx title="./src/index.js"

module.exports = {
  register({ strapi }) {
    const extensionService = strapi.plugin('graphql').service('extension');

    extensionService.use(({ nexus }) => {
      const MyEnum = nexus.enumType({
        name: 'MyEnum',
        members: ['a', 'b', 'c'],
      });

      return { types: [MyEnum] };
    });
  }
}
```

:::note
It's recommended to use the [nexus](https://nexusjs.org/) definition instead of raw [SDL](https://graphql.org/learn/schema/), but it’s still possible to use `typeDefs` to write raw SDL.
:::

### Queries

**Strapi v3**:

The following code example adds a new query definition to Strapi v3:

```jsx title="path: ./api/foo/config/schema.graphql.js"

module.exports = {
  query: `
    myQuery(id: ID, status: MyInput, limit: Int): [MyQuery]!
  `,
  resolver: {
    Query: {
      myQuery: {
        resolver: 'application::api-name.content-type-name.customFind',
        // OR
        resolver: async (obj, options, { context }) => {
          await strapi.controllers.content-type-name.customFind(context);

          return context.body.myQuery || [];
        }
      }
    }
  },
}
```

**Strapi v4**:

The Strapi v3 code example above should be replaced by the following code in Strapi v4:

```jsx title="./src/index.js"

module.exports = {
  register({ strapi }) {
    const extensionService = strapi.plugin('graphql').service('extension');

    extensionService.use(({ nexus }) => {
      const myQuery = nexus.extendType({
        type: 'Query',
        definition(t) {
          //  myQuery definition
          t.field('myQuery', {
            // Response type
            type: nexus.nonNull(nexus.list('MyQuery')),

            // Args definition
            args: { id: 'ID', status: 'MyInput', limit: 'Int' },

            // Resolver definition
            resolve(parent, args, context) {
              const { id, status, limit } = args;
      
              return strapi.service('api::api-name.content-type-name').customFind(id, status, limit);
            }
          });
        }
      });

      return { types: [myQuery] };
    });
  }
}
```

:::note NOTES

* In Strapi v4, REST controllers and GraphQL resolvers are not coupled anymore. The business logic is implemented in services and called either from the controller or the resolver. This approach keeps the business logic in one place so both REST and GraphQL can be customized the way you want.

* In Strapi v4, it’s not recommended to reference a REST controller directly from the GraphQL resolver. However, you can still call it programmatically from the resolver definition.
:::

:::tip
The service that Strapi provides to perform queries is called the [Entity Service](/dev-docs/api/entity-service) and is available with `strapi.entityService`. It can be used to create queries or mutations.
:::

### Mutations

**Strapi v3**:

The following code example adds a new mutation definition to Strapi v3:

```jsx title="path: ./api/foo/config/schema.graphql.js"

module.exports = {
  mutation: `
    sendItemByEmail(itemID: ID!, email: String!): Boolean!
  `,
  resolver: {
    Mutation: {
      attachRestaurantToChef: {
        resolver: 'application::api-name.content-type-name.sendItemByEmail',
        // OR
        resolver: async (obj, options, { context }) {
          await strapi.controllers.content-type-name.sendItemByEmail(context);

          return context.body || false;
        }
      },
    },
  }
}
```

**Strapi v4**:

The Strapi v3 code example above should be replaced by the following code in Strapi v4:

```jsx title="./src/index.js"

module.exports = {
  register({ strapi }) {
    const extensionService = strapi.plugin('graphql').service('extension');

    extensionService.use(({ nexus }) => {
      const sendItemByEmailMutation = nexus.extendType({
        type: 'Mutation',
        definition(t) {
          // "sendItemByEmail" query definition
          t.field('sendItemByEmail', {
            // Response type
            type: nexus.nonNull('Boolean'),

            // Args definition
            args: { ItemID: nexus.nonNull('ID'), email: nexus.nonNull('String') },

            // Resolver definition
            resolve(parent, args, context) {
              const { ItemID, email } = args;
              
              return strapi.service('api::api-name.content-type-name').sendItemByEmail(itemID, email);
            }
          });
        }
      });

      return { types: [sendItemByEmailMutation] };
    });
  }
}
```

:::tip
The service that Strapi provides to perform queries is called the [Entity Service](/dev-docs/api/entity-service) and is available with `strapi.entityService`. It can be used to create queries or mutations.
:::

## Replacing resolvers

**Strapi v3**:

Strapi v3 offers 2 ways of replacing the behavior of a query or mutation resolver: have the resolver point to a REST controller, or create a new custom GraphQL resolver then associate the resolver to an existing query or mutation.

  <details>
  <summary> Example of a Strapi v3 resolver pointing to a REST controller</summary>

  ```jsx title="path: ./api/<content-type-name>/config/schema.graphql.js"

  module.exports = {
    query: `
      testQuery: myQuery
    `,
    resolver: {
      Query: {
        testQuery: {
          resolver: 'application::api-name.content-type-name.find',
        },
      },
    },
  };
  ```

  </details>

  <details>
  <summary> Example of creating a new custom resolver and associating it to an existing query in Strapi v3</summary>

  ```jsx title="path: ./api/<content-type-name>/config/schema.graphql.js"

  module.exports = {
    query: `
      testQuery: myQuery
    `,
    resolver: {
      Query: {
        testQuery: {
          resolver: async (obj, args) => {
            // custom logic here
            // ... 
  
            // Return response.
            return { myResult: 'some data' };
          },
        },
      },
    },
  };
  ```

  </details>

**Strapi v4**:

In Strapi v4, the recommended way to replace or customize a resolver is to use [the `resolvers` field](/dev-docs/plugins/graphql#extending-the-schema) of the new GraphQL extension service:

```jsx title="./src/index.js"

module.exports = {
  register({ strapi }) {
    const extensionService = strapi.plugin('graphql').service('extension');

    extensionService.use(({ nexus }) => ({
      resolvers: {
        Query: {
          testQuery: async (obj, args) => {
          // custom logic here
          // ... 

          // return response
          return { myResult: 'some data' };
        },
      }
    });
  }
}
```

## Disabling APIs and fields from APIs

**Strapi v3**:

In Strapi v3, a query resolver, a mutation resolver or a field is disabled by setting it to `false`:

```jsx title="path: ./api/<content-type-name>/config/schema.graphql.js"

module.exports = {
  // disable a query resolver
  resolver: {
    Query: {
      myQuery: false,
    },
  },
  // disable a field
  type: {
    myTypeQuery: {
      myField: false,
    },
  },
};
```

**Strapi v4**:

Strapi v4 uses programmatic APIs to [disable queries, mutation, actions or fields](/dev-docs/plugins/graphql#disabling-operations-in-the-shadow-crud). The Strapi v3 code example above should be replaced by the following code in Strapi v4:

```jsx title="./src/index.js"

module.exports = {
  register({ strapi }) {
    const extensionService = strapi.plugin('graphql').service('extension');

    // disable an action on a query
    extensionService.shadowCRUD('api::api-name.content-type-name').disableAction('find');
    // disable a field
    extensionService.shadowCRUD('api::api-name.content-type-name').field('myField').disable();
  }
}
```

***

## Adding policies

**Strapi v3**:

In Strapi v3, policies applied to a resolver are defined either for the REST controller or in the `schema.graphql.js` customization file:

```jsx title="path: ./api/foo/config/schema.graphql.js"

module.exports = {
  resolver: {
    Query: {
      findItems: {
        policies: ['admin::isAuthenticatedAdmin'],
      },
    },
  },
};
```

**Strapi v4**:

In Strapi v4, policies applied to a resolver are explicitly defined in a `resolversConfig` object (see [GraphQL policies documentation](/dev-docs/plugins/graphql#policies)) and applied through the GraphQL extension service. The Strapi v3 code example above should be replaced by the following code in Strapi v4:

```jsx title="./src/index.js"

module.exports = {
  register({ strapi }) {
    const extensionService = strapi.plugin('graphql').service('extension');

    extensionService.use(({ nexus }) => ({
      resolversConfig: {
        'Query.findItems': {
          policies: ['admin::isAuthenticatedAdmin']
        }
      }
    }));
  }
}
```

:::note
Strapi v4 policies are not inherited from controllers anymore since the resolvers are stand-alone.
:::

## Adding middlewares

In Strapi v3, middlewares applied to a resolver are inherited from middlewares associated to the REST controller.

In Strapi v4, middlewares applied to a resolver are explicitly [defined in a `resolversConfig` object](/dev-docs/plugins/graphql#middlewares) and applied through the GraphQL extension service:

```jsx title="./src/index.js"

module.exports = {
  register({ strapi }) {
    const extensionService = strapi.plugin('graphql').service('extension');

    extensionService.use(({ nexus }) => ({
      resolversConfig: {
        'Query.findItems': {
          middlewares: [
            (resolve, ...args) => {
              console.log("We're in a middleware");
              return resolve(...args);
            }
          ]
        }
      }
    }));
  }
}
```

## Adding authorization

The resolvers automatically generated in Strapi v4 are protected by authorization strategies. The actions can be customized and the authorization can be disabled through the `resolversConfig` object (see [GraphQL authorization documentation](/dev-docs/plugins/graphql#authorization-configuration)).



# Policies
Source: https://docs-v4.strapi.io/dev-docs/migration/v3-to-v4/code/policies

# v4 code migration: Updating policies

This guide is part of the [v4 code migration guide](/dev-docs/migration/v3-to-v4/code-migration.md) designed to help you migrate the code of a Strapi application from v3.6.x to v4.0.x

:::strapi v3/v4 comparison

In both Strapi v3 and v4, policies handle authorization. Policies can be stored globally or scoped (i.e. with a specific API or plugin) and can be applied to REST controller's actions or to GraphQL resolvers.

In Strapi v3, policies are Koa middlewares accepting or rejecting requests based on the REST context. As middlewares, v3 policies always receive a Koa context, either coming from the REST request or built from the GraphQL resolver arguments.

In Strapi v4, [policies](/dev-docs/backend-customization/policies#policies) are functions that should return `true` or `undefined` for the request to be accepted. v4 policies receive a custom context, that cannot be modified, based on where the policy has been called from (e.g. a REST controller’s action or a GraphQL resolver).

Strapi v3 policies acting as route middlewares should be converted to proper [v4 route middlewares](/dev-docs/migration/v3-to-v4/code/route-middlewares).
:::

To migrate a policy to Strapi v4:

1. Move the policy file in the appropriate folder, depending on the policy scope:
  
    | Policy scope      | Folder                                                                                                                                                                                                           |
    | ----------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
    | Global            | `./src/policies`                                                                                                                                                                                                 |
    | A specific API    | `./src/api/<api-name>/policies`                                                                                                                                                                                  |
    | A specific plugin | `./src/plugins/<plugin-name>/policies`<br/><br/>(see [plugin policies migration](/dev-docs/migration/v3-to-v4/plugin/update-folder-structure#moving-policies) documentation) |

2. (_optional_) Update the policy code. Strapi v4 policies are functions returning `true` or `undefined` to authorize the request.

Migrating a policy code depends on the code itself and this migration guide can't cover every existing use case. The following examples cover some common use cases of v4 policies working with both REST and GraphQL APIs or specifically with one of these APIs. These examples can be used for global, API-related, or plugin-related policies.

<details>
<summary> Example: Authorize only logged in users (REST and GraphQL)</summary>

The following v3 policy authorizes only logged in users:
  
  ```jsx
  module.exports = async (ctx, next) => {
    if (ctx.state.user) {
      // Go to next policy or will reach the controller's action.
      return await next();
    }
   
    ctx.unauthorized(`You're not logged in!`);
  };
  ```
  
To update this policy to v4, replace it with the following code:
  
  ```jsx
  module.exports = (policyContext, config, { strapi }) => {
    if (policyContext.state.user) { // if a session is open
      // go to next policy or reach the controller's action
      return true;
    }
  
    return false; // If you return nothing, Strapi considers you didn't want to block the request and will let it pass
  };
  ```

The v4 policy uses the `policyContext.state` variable, accessible to both REST and GraphQL.

</details>

<details>
<summary> Example: Shared policy with alternate logic for REST and GraphQL</summary>

The following v4 policy checks if the current request is coming from REST or GraphQL via the `policyContext.type` and allows running alternative validation rules for each.

```jsx title="path: ./src/policies or ./src/api/api-name/policies/  depending on where you want to apply the policy"

module.exports = (policyContext, config, { strapi }) => {
  // handle Koa
  if (policyContext.type === 'koa') {
    // Do REST validation
    return true
  }

  // handle GraphQL
  else if (policyContext.type === 'graphql') {
    // Do GraphQL validation
    return true
  }

  // handle other cases
  return false;
};
```

</details>

<details>
<summary> Example: Authorize only for a specific entity (REST)</summary>

The following policy code can be used to authorize only targeting a specific entity:

```jsx
module.exports = (policyContext, config, { strapi }) => {
  return policyContext.params.id === 5;
};
```

</details>

<details>
<summary> Example: Authorize field resolvers only for a specific entity (GraphQL)</summary>

The following policy code can be used to authorize field resolvers only targeting a specific entity:

```jsx
module.exports = (policyContext, config, { strapi }) => {
  return typeof policyContext.parent === 'object' && policyContext.parent.id === 5;
};
```

</details>

:::tip Customization tips
In Strapi v4, depending on whether the policy is applied to REST or GraphQL (use `policyContext.type` is either `koa` for REST or `graphql` ), the function has access to different contexts:

- Both REST and GraphQL contexts have access to the `is`, `type`, and `state`.
- The REST context have access to the destructed Koa context.
- The GraphQL context has access to `parent`, `args`, `context` (which is the GraphQL Context), `info` & `http` (which contains the Koa context) (see [GraphQL customization](/dev-docs/plugins/graphql#custom-configuration-for-resolvers) documentation).

You can use `policyContext.type`, which value is either `koa` for REST or `graphql` for the GraphQL plugin, to determine the type of context the policy uses.
:::



# Route middlewares
Source: https://docs-v4.strapi.io/dev-docs/migration/v3-to-v4/code/route-middlewares

# v4 code migration: Updating route middlewares

This guide is part of the [v4 code migration guide](/dev-docs/migration/v3-to-v4/code-migration.md) designed to help you migrate the code of a Strapi application from v3.6.x to v4.0.x

:::strapi v3/v4 comparison
In Strapi v3, policies are also used as route middlewares to make changes to the request or response payload or to wrap a controller with extra logic.

In Strapi v4, there is a clear distinction between [policies](/dev-docs/backend-customization/policies#implementation), which are used for authorization and validation, and [middlewares](/dev-docs/backend-customization/middlewares), which are used for extra logic, wrapping, and customization.

:::

A Strapi v3 policy acting as a middleware should be converted to a [route middleware](/dev-docs/backend-customization/routes#middlewares) in Strapi v4 by creating a new middleware. Strapi v3 policies not acting as route middlewares should be migrated to v4 using the [policies migration documentation](/dev-docs/migration/v3-to-v4/code/policies).

The [`strapi generate` interactive CLI](/dev-docs/cli#strapi-generate) is the recommended way to create a new middleware:

1. Run `yarn strapi generate` in a terminal.
2. Using the interactive CLI, choose where the middleware should apply and give it a name.
3. Add customizations to the generated file.

<details>
<summary> Example of a Strapi v3 policy converted to a Strapi v4 middleware</summary>

The following Strapi v3 policy acts as a middleware:

```js title="path: ./api/api-name/config/policies/my-policy.js"

module.exports = async (ctx, next) => {
  const start = Date.now();

  await next();

  const delta = Math.ceil(Date.now() - start);
  ctx.set('X-Response-Time', delta + 'ms');
};
```

It should be converted to a Strapi v4 middleware using the following code:

```jsx title="path: ./src/api/api-name/middlewares/my-middleware.js"

module.exports = (config, { strapi }) => {
  return async (ctx, next) => {
    const start = Date.now();

    await next();

    const delta = Math.ceil(Date.now() - start);
    ctx.set('X-Response-Time', delta + 'ms');
  };
};
```

</details>



# Routes
Source: https://docs-v4.strapi.io/dev-docs/migration/v3-to-v4/code/routes

# v4 code migration: Updating routes

This guide is part of the [v4 code migration guide](/dev-docs/migration/v3-to-v4/code-migration.md) designed to help you migrate the code of a Strapi application from v3.6.x to v4.0.x

:::strapi v3/v4 comparison
In both Strapi v3 and v4, creating content-types automatically generates core API routes.

In Strapi v3, routes are defined in JSON files that export an object with a `routes` property. `routes` is an array of objects, each object being a route with its own parameters.

In Strapi v4, routes are defined in JavaScript files, called router files. 2 types of v4 router files coexist:

* core router files export the result of a call to the [`createCoreRouter` factory function](/dev-docs/backend-customization/routes#configuring-core-routers) introduced in Strapi v4
* [custom router files](/dev-docs/backend-customization/routes#creating-custom-routers) have a structure similar to Strapi v3 routes.
:::

Migrating [routes](/dev-docs//backend-customization/routes) depends on whether you want to [configure core routers](#migrating-core-routers) or [migrate custom routers](#migrating-custom-routers).

## Migrating core routers

Migrating a core router to Strapi v4 consists in making sure that each router file uses the `createCoreRouter` factory function introduced in v4.

Due to the differences between routes implementation in Strapi v3 and v4, it's required to create a new router file, then optionally bring existing Strapi v3 customizations into the new file and adapt them when necessary.

To create a v4 core router file:

1. Create a `api/<api-name>/routes/<router-name>.js` file inside the `./src` folder (see [project structure](/dev-docs/project-structure.md)).

2. Copy and paste the following code at the top of the `./src/api/<api-name>/routes/<router-name>.js` file. The code imports the `createCoreRouter` factory function from the factories included with the core of Strapi:

    ```js
    const { createCoreRouter } = require('@strapi/strapi').factories;
    ```

3. Copy and paste the following code, replacing `api-name` and `content-type-name` with appropriate names. The code exports the result of a call to the `createCoreRouter` factory function, passing the unique identifier of the content-type (e.g. `api::api-name.content-type-name`) as an argument:

    ```js
    module.exports = createCoreRouter('api::api-name.content-type-name')
    ```

4. (_optional_) To configure the router, pass a second argument to the `createCoreRouter` factory function. This argument can be either an object or a function returning an object. The object contains methods, which can either be entirely new actions or replace or extend existing actions of core API routes (see [routes implementation documentation](/dev-docs/backend-customization/routes#implementation)).

<details>
<summary> Example of a Strapi v4 core router without customization:</summary>

  ```jsx title="./src/api/<content-type-name>/routes/<router-name>.js"

  const { createCoreRouter } = require('@strapi/strapi').factories;

  module.exports = createCoreRouter('api::api-name.content-type-name');
  ```

</details>

<details> 
<summary>Example of a Strapi v4 core router with customization:</summary>

  ```jsx title="./src/api/<content-type-name>/routes/<router-name>.js"

  const { createCoreRouter } = require('@strapi/strapi').factories;

  module.exports = createCoreRouter('api::api-name.content-type-name', {
   // creates an object with the basic CRUD configuration
    // ...
    config: {
      find: {
        // disables authorization requirement for the `find` route
        policies: ['admin::isAuthenticatedAdmin'],
        // here you can also customize auth & middlewares
      },
    },
    // disables every action except `find` and `findOne`.
    only: ['find', 'findOne'],
  });

  ```

</details>

## Migrating custom routers

Custom routers in Strapi v4 are JavaScript files that export an array of objects, each object being a route, in a structure similar to the JSON routers configuration files used in Strapi v3.

To migrate a custom router to Strapi v4:

1. Create a `api/<api-name>/routes/<custom-router-name>.js` file inside the `./src` folder (see [project structure](/dev-docs/project-structure.md)).
2. Make sure this `./src/api/<api-name>/routes/<custom-router-name>.js` file exports an object:

    ```js title="./src/api/<api-name>/routes/<router-name>.js"

    module.exports = {

    }
    ```

3. Copy and paste the `routes` array declared in the Strapi v3 JSON file into the object exported by the Strapi v4 file.
4. Convert the exported object in Strapi v4 to a cleaner JavaScript format, removing all `"` on keys from the Strapi v3 JSON format (e.g. `"method"` → `method`, `"path"` → `path`).

<details>
<summary> Example of a Strapi v4 custom router:</summary>

```js title="./src/api/restaurant/routes/custom-restaurant.js"

module.exports = {
  routes: [
    { // Path defined with a URL parameter
      method: 'GET',
      path: '/restaurants/:category/:id',
      handler: 'Restaurant.findOneByCategory',
    },
    { // Path defined with a regular expression
      method: 'GET',
      path: '/restaurants/:region(\\d{2}|\\d{3})/:id', // Only match when the first parameter contains 2 or 3 digits.
      handler: 'Restaurant.findOneByRegion',
    },
    { // Route with custom policies
      method: 'POST',
      path: "/restaurants/:id/reservation",
      handler: 'Restaurant.reservation',
      config: {
        policies: ["is-authenticated", "has-credit-card"]
      }
    }
  ]
}

```

</details>

:::strapi Next steps
[Migrating the backend code](/dev-docs/migration/v3-to-v4/code/backend) of Strapi to v4 also requires to at least migrate the core features of the Strapi server, such as the [configuration](/dev-docs/migration/v3-to-v4/code/configuration), [dependencies](/dev-docs/migration/v3-to-v4/code/dependencies), [services](/dev-docs/migration/v3-to-v4/code/services), [controllers](/dev-docs/migration/v3-to-v4/code/controllers), and [content-type schemas](/dev-docs/migration/v3-to-v4/code/content-type-schema).
:::



# Services
Source: https://docs-v4.strapi.io/dev-docs/migration/v3-to-v4/code/services

# v4 code migration: Updating services

This guide is part of the [v4 code migration guide](/dev-docs/migration/v3-to-v4/code-migration.md) designed to help you migrate the code of a Strapi application from v3.6.x to v4.0.x

:::strapi v3/v4 comparison
In both Strapi v3 and v4, creating content-types automatically generates core API services. Services are a set of reusable functions.

In Strapi v3, services export an object containing actions that are merged with the existing actions of core API services, allowing customization.

In Strapi v4, services export the result of a call to the [`createCoreService` factory function](/dev-docs/backend-customization/services#adding-a-new-service), with or without further customization.
:::

Migrating a [service](/dev-docs/backend-customization/services) to Strapi v4 consists in making sure it uses the `createCoreService` factory function introduced in v4.

Due to the differences between services implementation in Strapi v3 and v4, it's recommended to create a new service file, then optionally bring existing v3 customizations into the new file and adapt them when necessary.

:::note
The service file can be created automatically with the [interactive CLI command `strapi generate`](/dev-docs/cli#strapi-generate).
:::

To create a Strapi v4 service:

1. Create a `api/<api-name>/services/<service-name>.js` file inside the `./src` folder (see [project structure](/dev-docs/project-structure)).

2. Copy and paste the following code at the top of the `./src/api/<api-name>/services/<service-name>.js` file. The code imports the `createCoreService` factory function from the factories included with the core of Strapi:

    ```js
    const { createCoreService } = require('@strapi/strapi').factories;
    ```

3. Copy and paste the following code, replacing `api-name` and `content-type-name` with appropriate names. The code exports the result of a call to the `createCoreService` factory function, passing the unique identifier of the content-type (e.g. `api::api-name.content-type-name`) as an argument:

    ```js
    module.exports = createCoreService('api::api-name.content-type-name')
    ```

4. (_optional_) To customize the service, pass a second argument to the `createCoreService` factory function. This argument can be either an object or a function returning an object. The object contains methods, which can either be entirely new actions or replace or extend existing actions of core API controllers (see [services implementation documentation](/dev-docs/backend-customization/services#implementation)).

<details>
<summary> Example of a v4 service without customization:</summary>

  ```jsx title="./src/api/<content-type-name>/services/<service-name>.js"

  const { createCoreService } = require('@strapi/strapi').factories;

  module.exports = createCoreService('api::api-name.content-type-name');
  ```

</details>

<details>
<summary> Example of a v4 service with customization:</summary>

  ```jsx title="./src/api/<content-type-name>/services/<service-name>.js"

  const { createCoreService } = require('@strapi/strapi').factories;

  module.exports = createCoreService('api::api-name.content-type-name', ({ strapi }) => ({
    async find(...args) {
      const { results, pagination } = await super.find(...args);

      results.forEach(result => {
        result.counter = 1;
      });

      return { results, pagination };
    },
  }));

  ```

</details>

:::tip Customization tips

- The original service’s CRUD methods can be called using `super` (e.g. `super.find()`).
- The `this.getFetchParams()` utility function can be used to wrap parameters with some default parameters (e.g. a default value for [the `publicationState`](/dev-docs/api/rest/filters-locale-publication#publication-state)). `this.getFetchParams()` has the following signature: `(params: Object) => Object`.

More examples can be found in the [services implementation documentation](/dev-docs/backend-customization/services#implementation).
:::

:::strapi Next steps
[Migrating the backend code](/dev-docs/migration/v3-to-v4/code/backend) of Strapi to v4 also requires to at least migrate the core features of the Strapi server, such as the [configuration](/dev-docs/migration/v3-to-v4/code/configuration), [dependencies](/dev-docs/migration/v3-to-v4/code/dependencies), [routes](/dev-docs/migration/v3-to-v4/code/routes), [controllers](/dev-docs/migration/v3-to-v4/code/controllers), and [content-type schemas](/dev-docs/migration/v3-to-v4/code/content-type-schema).
:::



# Strapi global variable
Source: https://docs-v4.strapi.io/dev-docs/migration/v3-to-v4/code/strapi-global

# v4 code migration: Updating `strapi` global variable calls

This guide is part of the [v4 code migration guide](/dev-docs/migration/v3-to-v4/code-migration.md) designed to help you migrate the code of a Strapi application from v3.6.x to v4.0.x

:::strapi v3/v4 comparison
In Strapi v3,  a `window.strapi` global variable is used to display notifications, freeze user interactions when requests are pending, and get the backend URL.

In Strapi v4, `strapi.notification`, `strapi.lockApp` and `strapi.unlockApp` are not supported anymore and replaced by specific React hooks. Calls to `strapi.backendUrl` are still supported.
:::

To migrate to Strapi v4:

1. Remove all calls to `strapi.notification`, `strapi.lockApp` and `strapi.unlockApp` from the code.

2. Adapt your code, using the following table to find Strapi v4 hooks equivalent to Strapi v3 features. All hooks are provided by the `@strapi/helper-plugin` module:

    | Feature in v3               | Equivalent feature in v4                             |
    | --------------------------- | ---------------------------------------------------- |
    | `strapi.notification` calls | `useNotification` hook                               |
    | `strapi.lockApp` calls      | `lockApp` method from the `useOverlayBlocker` hook   |
    | `strapi.unlockApp` calls    | `unlockApp` method from the `useOverlayBlocker` hook |
    | `strapi.backendUrl` calls   | `strapi.backendUrl` calls _(still exist in Strapi v4)_  |

The following examples should help you get started using the `useNotification` hook and `lockApp`/`unlockApp` methods:

<details>
<summary> Example of using the useNotification hook in Strapi v4:</summary>

```js title="./src/plugins/<my-plugin>/admin/*.js"

const HomePage = () => {
  const toggleNotification = useNotification();

  const handleClick = () => {
    toggleNotification({
        // required
        type: 'info|success|warning', // choose one from the list
        // required
        message: { id: 'notification.version.update.message', defaultMessage: 'A new version is available' },
        // optional
        link: {
          url: 'https://github.com/strapi/strapi/releases/tag/v4',
          label: {
            id: 'notification.version.update.link',
            defaultMessage: 'See more'
          },
        },
        // optional, default = false
        blockTransition: true,
        // optional
        onClose: () => localStorage.setItem('STRAPI_UPDATE_NOTIF', true),
      });
  }

  return (
    
    </Main>
  );
};
```

</details>

<details> 
<summary>Example of using the lockApp and unlockApp methods in Strapi v4:</summary>

```js title="./src/plugins/<my-plugin>/admin/*.js"

const MyCompo = () => {
const { lockApp, unlockApp } = useOverlayBlocker();

 return null
}
```

</details>

<details>
<summary> Example of logging the backend URL value in Strapi v4:</summary>

```js title="./src/plugins/<my-plugin>/*.js"

const myHelper = () => {
  console.log(strapi.backendURL); // http://localhost:1337
};
```

</details>

## Using the `@strapi/helper-plugin` Storybook

The `@strapi/helper-plugin` module provided with Strapi v4 features a [Storybook](https://storybook.js.org/) instance. The Storybook instance can be run to display further documentation about the internal components specifically targeted for the Strapi admin panel. This includes information about the `useNotification` hook. To access the documentation included with `@strapi/helper-plugin`:

1. Clone the Strapi repository:

    ```sh
    git clone git@github.com:strapi/strapi.git
    ```

2. Install all the dependencies:

    ```sh
    cd strapi && yarn setup
    ```

3. Run the `@strapi/helper-plugin` Storybook instance:

    ```sh
    cd packages/core/helper-plugin
    yarn storybook
    ```

:::tip
When running the Storybook instance provided with the `@strapi/helper-plugin`, the documentation for the `useNotification` hook can be found at [http://localhost:6006/?path=/story/hooks-usenotification--page](http://localhost:6006/?path=/story/hooks-usenotification--page).
:::



# Theming
Source: https://docs-v4.strapi.io/dev-docs/migration/v3-to-v4/code/theming

# v4 code migration: Updating theme customizations

This guide is part of the [v4 code migration guide](/dev-docs/migration/v3-to-v4/code-migration.md) designed to help you migrate the code of a Strapi application from v3.6.x to v4.0.x

:::strapi v3/v4 comparison
In Strapi v3, theme customization was not supported.

Strapi v4 introduces the [Strapi Design System](https://design-system.strapi.io/) with a brand new theme for the admin panel.

:::

To customize the theme in Strapi v4:

1. Rename the `./src/admin/app.example.js` file to `./src/admin/app.js`.
2. In `./src/admin/app.js`, declare new key/value pairs in the `config.theme` object, updating the design elements (e.g. colors, shadows, sizes) of the [default theme](https://github.com/strapi/design-system/tree/main/packages/strapi-design-system/src/themes/lightTheme).

<details>
<summary> Example of theme customization in Strapi v4:</summary>

```js title="./src/admin/app.js"

  config: {
    theme: {
      colors, shadows, sizes, …
    }
  },
  bootstrap() {},
};
```

</details>

:::tip Customization tips
* The [Strapi Design System](https://design-system.strapi.io/) is fully customizable.
* Strapi v4 supports light and dark modes. See [admin customization](/dev-docs/admin-panel-customization#theme-extension) documentation for more details.
:::



# Translations
Source: https://docs-v4.strapi.io/dev-docs/migration/v3-to-v4/code/translations

# v4 code migration: Updating translations

This guide is part of the [v4 code migration guide](/dev-docs/migration/v3-to-v4/code-migration.md) designed to help you migrate the code of a Strapi application from v3.6.x to v4.0.x

:::strapi v3/v4 comparison
In Strapi v3, file replacement is supported to customize the frontend of a Strapi application. To modify the translations of an application, original core files can be directly replaced with custom files.

In Strapi v4, file replacement is no longer supported. To extend translations, [dedicated extension APIs](/dev-docs/admin-panel-customization#configuration-options) should be used.
:::

To update translations to Strapi v4:

1. Rename the `./src/admin/app.example.js` to `./src/admin/app.js`.
2. In the `config.locales` array, add the locales the application should support.
3. In the `config.translations.<your-translation>` object, add the missing keys.

<!-- ? when can we use a simple key name (without quotes) and when should we use quotes? (see code example below) where's is the list of all the available keys? -->

<details>
<summary> Example: Adding translations to Strapi v4 </summary>

```js title="path: ./src/admin/app.js"

  config: {
    // Add another locale
    locales: ['fr'],
    translations: {
      // Add missing keys in the FR locale
      fr: {
        'Auth.form.email.label': 'test',
        Users: 'Utilisateurs',
        City: 'CITY (FRENCH)',
        // Customize the label of the Content-Manager table.
        Id: 'ID french',
      },
    },
  },
  bootstrap() {},
};

```

</details>



# Webpack configuration
Source: https://docs-v4.strapi.io/dev-docs/migration/v3-to-v4/code/webpack

# v4 code migration: Updating the webpack configuration

This guide is part of the [v4 code migration guide](/dev-docs/migration/v3-to-v4/code-migration.md) designed to help you migrate the code of a Strapi application from v3.6.x to v4.0.x

:::strapi v3/v4 comparison
In both Strapi v3 and v4, the webpack configuration is customizable.

In Strapi v4, [webpack v5](https://webpack.js.org/migrate/5/) is used, and only `./src/admin/app.js` and the files under the `./src/admin/extensions` folder are being watched by the webpack dev server (see [admin panel customization](/dev-docs/admin-panel-customization#webpack-configuration) documentation).

:::

:::prerequisites
Make sure webpack plugins and loaders are upgraded to the latest version before migrating.
:::

To update the [webpack](https://webpack.js.org/) configuration to Strapi v4:

1. Rename the `./src/admin/webpack.config.example.js` to `./src/admin/webpack.config.js`.
2. Copy the content of `./admin/admin.config.js` from the Strapi v3 application to `./src/admin/webpack.config.js`.

<details> 
<summary>Example of a webpack configuration file in Strapi v4:</summary>

```js title="./src/admin/webpack.config.js"

'use strict';

// WARNING: the admin panel now uses webpack 5 to bundle the application.

module.exports = (config, webpack) => {
  // Note: we provide webpack above so you should not `require` it
  // Perform customizations to webpack configuration
  config.plugins.push(new webpack.IgnorePlugin(/\/__tests__\//));
  // Important: return the modified configuration
  return config;
};
```

</details>



# WYSIWYG customizations
Source: https://docs-v4.strapi.io/dev-docs/migration/v3-to-v4/code/wysiwyg

# v4 code migration: Updating WYSIWYG customizations

This guide is part of the [v4 code migration guide](/dev-docs/migration/v3-to-v4/code-migration.md) designed to help you migrate the code of a Strapi application from v3.6.x to v4.0.x

:::strapi v3/v4 comparison
In Strapi v3, the WYSIWYG is customized by overriding the original component and replacing the file.

In Strapi v4, file replacement is no longer supported. To customize the default WYSIWYG, the new `addFields()` method should be used with the [extensions system](/dev-docs/admin-panel-customization#extension).

:::

To migrate WYSIWYG customizations to Strapi v4:

1. Create the `./src/admin/extensions` folder.

2. In `./src/admin/extensions`, create a new `components` subfolder.

3. In `./src/admin/extensions/components`, create a new component file (e.g. `MyNewWysiwyg.js`) and add your logic here. This file will be used to replace the default WYSIWYG editor.

4. Rename the `./src/admin/app.example.js` file from Strapi v3 to `./src/admin/app.js`.

5. Update `./src/admin/app.js` with the following modifications:

    * Import the new WYSIWYG component created at step 3.
    * Inject the new WYSIWYG component by using the `addFields()` method inside the `bootstrap` lifecycle of the application. `addFields()` accepts an object with 2 properties: set `type` to `'wysiwyg'` and `Component` to the name of the imported WYSIWYG component.

    ```js title="./src/admin/app.js"

    import MyNewWysiwyg from './extensions/components/MyNewWysiwyg'

    export default {
      bootstrap(app) {
        app.addFields({ type: 'wysiwyg', Component: MyNewWysiwyg });
      },
    };
    ```

:::tip Customization tip
The WYSIWYG can also be replaced by a plugin that adds new fields. You can find community WYSIWYG plugins in the [Strapi Market](https://market.strapi.io) or [develop your own plugin](/dev-docs/plugins-development).
:::



# MongoDB v3 to SQL v3 migration
Source: https://docs-v4.strapi.io/dev-docs/migration/v3-to-v4/data/mongo

<!-- TODO: update SEO -->

# Migrate from MongoDB to SQL with Strapi v3

Strapi v4 does not support MongoDB databases (see [blog post announcement](https://strapi.io/blog/mongo-db-support-in-strapi-past-present-and-future)).

If your Strapi v3 project uses a MongoDB database, migrating from Strapi v3 to Strapi v4 is a 2-step process: first, migrate from MongoDB to SQL within Strapi v3, and then migrate the SQL database from Strapi v3 to Strapi v4.

Migrating from MongoDB to SQL with Strapi v3 requires:

1. [preparing the migration locally](#prepare-the-migration-locally),
2. [migrating the data locally](#migrate-the-data-locally),
3. [migrating the local data to production](#migrate-the-local-data-to-production).

## Prepare the migration locally

To prepare the migration locally:

1. Dump the MongoDB database (see [MongoDB official documentation](https://www.mongodb.com/docs/database-tools/mongodump/)) and load it locally.
2. (_optional, only if not migrating to SQLite_) Create a SQL database locally.

    :::tip
    To avoid installing SQL and MongoDB on your computer, you can setup the local Mongo and SQL databases using a [Docker](https://hub.docker.com/) image.

    :::

3. Switch the application connector to bookshelf and configure it with the previously created databases:

    a. Add the required dependencies:

    ```bash
    
    ## install the bookshelf connector
    npm install strapi-connector-bookshelf@3.6.9 knex@0.21.19

    # install the appropriate database driver
    # for SQLite
    npm install sqlite3@5.0.2
    # for PostgreSQL
    npm install pg@8.7.3
    # for MySQL
    npm install mysql@2.18.1
    ```

    b. Update the configuration in  `./config/database.js`:

    </Tabs>

    </ColumnRight>

    </Columns>

4. Start the application locally to generate the SQL schema and default values in the database.
5. Shut down the application.
6. Truncate every table and reset primary keys to only keep the structure, using the following queries, depending on the database type:

  </Tabs>

## Migrate the data locally

To migrate the data locally:

- either build your own script based on the differences between MongoDB and SQL implementations (see [cheatsheet](/dev-docs/migration/v3-to-v4/data/mongo-sql-cheatsheet)), using the following advice:

  - On the 1st pass:
    - Create all the entries without relations/components links.
    - Create a mapping from MongoDB ids to SQL ids.
  - and on the 2nd pass, create the relations/components links based on the MongoDB to SQL ids mapping.

- or use a migration tool, like [the Studio3T tutorial](https://studio3t.com/knowledge-base/articles/mongodb-to-sql-migration/#mappings), taking into account the differences between MongoDB and SQL implementations (see [cheatsheet](/dev-docs/migration/v3-to-v4/data/mongo-sql-cheatsheet)).

## Migrate the local data to production

To migrate the local data to the production database:

1. Dump the SQL data migrated locally.

2. Import the dump into the production database.

3. Deploy the application with the updated connector (see [prepare the migration locally](#prepare-the-migration-locally) for configuration details).

:::strapi Next steps
If the present guide was used to migrate from Strapi v3 to Strapi v4, the next step in the data migration process is to proceed to the [SQL migration from Strapi v3 to Strapi v4](/dev-docs/migration/v3-to-v4/data/sql).
:::



# MongoDB vs. SQL cheatsheet
Source: https://docs-v4.strapi.io/dev-docs/migration/v3-to-v4/data/mongo-sql-cheatsheet

# MongoDB vs. SQL implementation differences in Strapi v3

This documentation explains the key structural differences to take into account when migrating data from MongoDB to SQL in the context of a Strapi v3 project. It should be used as a reference when migrating data locally (see [MongoDB to SQL migration in Strapi v3](/dev-docs/migration/v3-to-v4/data/mongo)).

## Model settings

The `model.settings.json` files, used to define models in Strapi v3, include parameters that are handled differently by MongoDB and SQL databases.

### Naming conventions

**Table/collection names**

Table in SQL databases, equivalent to collection in MongoDB, are created with the name defined in the `collectionName` option of the `model.settings.json` file.

When switching from MongoDB to SQL, one SQL table is created per MongoDB collection, and new SQL tables are created for [relations](#relations).

**Column/field names**

Columns in SQL, equivalent to fields in MongoDB, are created with the names defined in the `attributes` option of the `model.setting.json` file. 

An example `attribute_a` defined in `model.settings.json` would be stored like the following in MongoDB and SQL databases:

```json
// model.settings.json
{
  "attributes": {
    "attribute_a": {
      "type": "string"
    }
  }
}
```

</Columns>

### Timestamps

If the `timestamps` option is defined in the `model.settings.js` file, no migration is required, the properties will be the same in MongoDB and SQL databases.

If no `timestamps` option is set, the defaults should be migrated, using lower snake case in SQL databases:

| Field name in MongoDB | Field name in SQL databases |
| --------------------- | --------------------------- |
| `createdAt`           | `created_at`                |
| `updatedAt`           | `updated_at`                |

## Relations

:::note
Custom column names for relations can't be used in both MongoDB and SQL databases. No specific migrations are needed for this case and custom column names can be considered as if they were not used.
:::

In Strapi, relations between models are defined in the `attributes` section of the `model.settings.json` files.

The following section explains how each type of relation is declared in the model attributes and gives an example of how the model attributes are reflected in the MongoDB and SQL databases:

</Columns>

</TabItem>

</Columns>

</TabItem>

</Columns>

</TabItem>

</Columns>

</TabItem>

</Columns>

</TabItem>

</Columns>

</TabItem>

</Tabs>

### SQL join table names
  
The name for the SQL join table used in `manyToMany` and `manyWay` relations is generated based on the `collectionName` property, the `attributes` of the relation, and the type of the `relation`:

- `manyToMany` relations have the join table follow this naming pattern: `{}_{}`

- `manyWay` relations have the join table follow this naming pattern: `{collectionName}__${snakeCase(attributeName)}`, like in the following example:

    ```json
    // With the following model A:
    {
      "collectionName": "table_a",
      "attributes": {
        "myManyWay": {
          // ...
        }
      }
    }
    
    // The SQL join table name will be:
    "table_a__my_many_way"
    ```

## Components & Dynamic zones

In both MongoDB and SQL databases, components have their own collection and are links to their parent. 

In MongoDB, the links are done via an array of objects stored in the parent. Even non-repeatable `components` are listed in an array. Each object from this array has 2 properties:

- `ref` targets a specific component
- `kind` targets a specific collection

In SQL databases, the links are done with a SQL join table. The table name is generated following this pattern: `{collectionName}_components`, where `collectionName` is in the parent model. SQL tables for components include the following elements:

| Name                            | Type        | Description                                                    |
| ------------------------------- | ----------- | -------------------------------------------------------------- |
| `component_type`                | Column      | Uses the `collectionName` and not the `globalId` property      |
| `field`                         | Column      | Should be equal to the attribute name                          |
| `order`                         | Column      | Should go from 1 to x, matching the order in the MongoDB array |
| `component_id`                  | Foreign key | Targets the component table                                    |
| `{singular(collectionName)}_id` | Foreign key | Targets the parent table                                       |

<details>
<summary>Example of a component definition in model settings, MongoDB and SQL databases in Strapi v3</summary>

**Models:**

```json
// model A
{
  "attributes": {
    "compo": {
      "type": "component"
      "repeatable": true|false
    }
  }
}

// Component
{
  "attributes": {}
}
```

**Mongo:**

```json
// model A
{
  "_id": ObjectId("1"),
  "compo": [
    {
      "_id": ObjectId("xxx"), // this id doesn't matter
      "kind": "CompoGlobalId", // to be converted to collectionName before creating the join in SQL
      "ref": ObjectId("1") // actual id of the component
    }
  ]
}

// Component
{
  "_id": ObjectId("1"),
}
```

**SQL:**

```json
// model A
{
  "id": 1,
}

// Component
{
  "id": 1,
}

// A_components
{
  "id": 1,
  "field": "compo",
  "order": 1,
  "component_type": "compos",
  "component_id": 1,
  "a_id": 1
}
```

</details>

## Media

Media are stored the same way in MongoDB and in SQL. However, the links created between media and entries are stored differently:

In MongoDB, media links are stored on both sides of the relation. The `related` property is an array of objects targeting the related entries in the media collection, called `upload_file`. Each object has 3 properties:

- `ref` targets a specific media
- `kind` targets a specific collection
- `field` targets a specific attribute

MongoDB also includes a property in the entries, named like the media attributes of the models, which is either an array or a single `ObjectId` targeting the media(s).

In SQL databases, an `upload_file_morph` join table is created, with the following elements:

| Name             | Type        | Description       |
| ---------------- | ----------- | ----------------- |
| `upload_file_id` | Foreign key | Targets the media |
| `related_id`     | Column      | Targets the entry |
| `related_type`   |             |                   |
<!-- TODO: complete the table above -->
<!-- ? what does related_type is used for? it was not in the notes 😅 -->

<details>
<summary>Example of media definition in model settings, MongoDB, and SQL databases in Strapi v3</summary>
**Models:**

```json
// model A
{
  "attributes": {
    "pictures": {
      "plugin": "upload",
      "collection": "file", // multiple files
      "via": "related",
      
    }
  }
}

// model B
{
  "attributes": {
    "cover": {
      "plugin": "upload",
      "model": "file", // single file
      "via": "related",
    }
  }
}

```

**MongoDB:**

```json
// model A
{
  "_id": ObjectId("1"),
  "pictures": [
    ObjectId("1"),
  ]
}

// model B
{
  "_id": ObjectId("1"),
  "cover": ObjectId("1")
}

// upload_file
{
  "_id": ObjectId("1"),
  // ...
  "related": [
    {
      "_id": ObjectId("1"), // this id doesn't matter
      "kind": "GlobalIdOfA", // needs to be converted to collectionName for SQL
      "ref": ObjectId("1"), // id of the A entry
      "field": "pictures", // field in A to which the media is linked
    },
    {
      "_id": ObjectId("2"), // this id doesn't matter
      "kind": "GlobalIdOfB", // needs to be converted to collectionName for SQL
      "ref": ObjectId("1"), // id of the B entry
      "field": "cover", // field in B to which the media is linked
    }
  ]
}
```

**SQL:**

```json
// model A
{
  "id": 1,
}

// model B
{
  "_id": 1,
}

// upload_file
{
  "id": 1,
}

// upload_file_morph
[
  {
    "id": 1, // this id doesn't matter
    "upload
    "related_type": "collectionNameofA", // collectionName of A
    "related_id": 1, // id of the A entry
    "field": "pictures", // field in A to which the media is linked
    "order": 1,
  },
  {
    "id": 2, // this id doesn't matter
    "related_type": "collectionNameofB", // needs to be converted to collectionName for SQL
    "related_id": 1, // id of the B entry
    "field": "cover", // field in B to which the media is linked
    "order": 1
  }
]
```

</details>

## Scalar attributes

There are no structural changes in the scalar attributes between MongoDB and SQL databases.

The only differences to take into account are the following:

- `time` stores milliseconds.
- `json` is an object in MongoDB. Make sure to stringify it if necessary in the SQL database you target (SQLite or MySQL < 5.6).

## Attributes created by Strapi

With the exception of [timestamps](#timestamps), attributes created by Strapi are the same in Mongo and SQL databases. This includes the following attributes:

- `published_at`
- `created_by`
- `updated_by`
- `locale`

`localizations` is a `manyWay` relation (see [relations](#relations)).

## Custom use cases

The following table highlights some specific uses cases and their possible resolution:

| Use case                | Resolution                                                                                                    |
| ----------------------- | ------------------------------------------------------------------------------------------------------------- |
| Custom id types         | Custom ID types are only used in SQL. No migration is required since the feature is not supported in MongoDB. |
| Custom indexing         | Custom indexing is not a supported feature. Equivalent indexes must be created in SQL manually.               |
| Custom join table names | Custom join table names should be taken into account when migrating the [relations](#relations) to find the right table name               (see [SQL join table names](#sql-join-table-names)). |
| Custom DB queries       | Migrate to v3 SQL then to Strapi v4, and finally migrate the custom queries with the [Query Engine](/dev-docs/api/query-engine) of Strapi v4. |



# SQL v3 to v4 migration
Source: https://docs-v4.strapi.io/dev-docs/migration/v3-to-v4/data/sql

# Data migration:Migrate SQL from Strapi v3 to v4

The database layer of Strapi has been fully rewritten in Strapi `v4`. This documentation is designed to highlight the breaking changes introduced in Strapi `v4` that impact SQL databases, by comparing `v3` and `v4` table and column names, data structures and relations. 

Changes can be [global](#global-changes) (impacting any table) or more limited in scope, impacting only [specific tables](#changes-impacting-strapi-built-in-tables) or some [Strapi plugins](#changes-impacting-strapi-plugins).

:::strapi Relations in Strapi v3 vs. v4
The [v3 vs. v4 SQL relations cheatsheet](/dev-docs/migration/v3-to-v4/data/sql-relations) is designed to help you understand the differences in model schemas and entity relationship diagrams between Strapi `v3` and Strapi `v4`.
:::

:::warning 🚧  Migration scripts
[Data migration scripts](https://github.com/strapi/migration-scripts) are currently in alpha/beta testing. Please feel free to share feedback in [the dedicated forum thread](https://forum.strapi.io/t/strapi-v4-migration-scripts-are-live-for-testing/18266).
:::

## Global changes

Changes in column casing and timestamps columns can affect all tables.

### Column name casing

:::strapi v3 / v4 comparison
In Strapi `v3` column names can have different casings (e.g. `PascalCase`, `camelCase`, and `snake_case`).

In Strapi v4, every column name should use `snake_case`.
:::

To migrate to Strapi `v4`, make sure all column names use `snake_case`. Attributes defined in another casing in the model schema will have their name automatically transformed to `snake_case` when communicating with the database layer.

### Timestamps columns

:::strapi v3 / v4 comparison
Timestamps columns refer to the `created_at` and `updated_at` columns.

In Strapi `v3`, timestamps columns are given a default value (i.e. `CURRENT_TIMESTAMP`) directly by the database layer.

In Strapi `v4`, timestamps columns can't be renamed or disabled. 
:::

To migrate to Strapi `v4`, migrate timestamps with custom column names to the `created_at` and `updated_at` fields, and remove the default value from the table structure.

## Changes impacting Strapi built-in tables

Strapi built-in tables have a different name in `v3` and `v4`, and Strapi v4 introduces new tables (indicated by the ✨ emoji):

| Table name in Strapi v3 | Table name in Strapi v4                                                        |
| ----------------------- | ------------------------------------------------------------------------------ |
| `strapi_permission`     | `admin_permissions` (see [admin permissions](#admin-permissions))              |
| `strapi_role`           | `admin_roles`                                                                  |
| `strapi_administrator`  | `admin_users`                                                                  |
| `strapi_users_roles`    | `admin_users_roles_links`                                                      |
| `strapi_webhooks`       | `strapi_webhooks`                                                              |
| `core_store`            | `strapi_core_store_settings` (see [core store](#core-store))                   |
| _(non applicable)_      | ✨ `admin_permissions_role_link`  (see [admin permissions](#admin-permissions)) |
| _(non applicable)_      | ✨ `strapi_migrations`                                                          |
| _(non applicable)_      | ✨ `strapi_api_tokens`                                                          |
| _(non applicable)_      | ✨ `strapi_database_schema`                                                     |

### Admin permissions

The `strapi_permission` table used in Strapi `v3` is named `admin_permissions` in Strapi `v4`, and is subject to the following other changes:

- The table structure is different in Strapi `v3` and Strapi `v4`:

</Columns>

- The role relation in Strapi `v4` is handled in a join table named `admin_permissions_role_links`.
- New indexes have been created for the `created_by_id` and `updated_by_id` columns of Strapi v3, with the following names:

  | Column name in Strapi v3 | Index name in Strapi v4              |
  | ------------------------ | ------------------------------------ |
  | `created_by_id`          | `admin_permissions_created_by_id_fk` |
  | `updated_by_id`          | `admin_permissions_updated_by_id_fk` |

### Core store

The `core_store` table used in Strapi `v3` is named `strapi_core_store_settings` in Strapi `v4`.

The structure of the core store table remains untouched, but model definitions and content manager configurations have changed.

#### Model definitions

All the rows that begin with `model_def_` have been dropped and are no longer required.

#### Content manager configurations

All the rows that begin with `plugin_content_manager_configuration_content_types` have been changed to match new unique identifiers (UIDs) and reflect [table names changes](#changes-impacting-strapi-built-in-tables). These changes include both the suffix of the `key` column and the `uid` field in the `value` column.

In addition to all the content-types that have been renamed (see [table names changes](#changes-impacting-strapi-built-in-tables)), the following UIDs have changed:

| UID in Strapi v3 | UID in Strapi v4 |
|------------------|------------------|
| `application`    | `api`            |
| `plugins`        | `plugin`         |

#### Permissions mapping

The following tables list the mapping of all permissions between Strapi v3 and Strapi v4:

<details>
<summary>Permission mapping for an example "restaurant" API:</summary>

| Strapi v3 type | Strapi v3 controller | Strapi v3 action   | Strapi v4 action                              |
| -------------- | -------------------- | ------------------ | --------------------------------------------- |
| application    | restaurant           | count              | _(deleted)_                                   |
| application    | restaurant           | create             | api::restaurant.restaurant.create             |
| application    | restaurant           | delete             | api::restaurant.restaurant.delete             |
| application    | restaurant           | find               | api::restaurant.restaurant.find               |
| application    | restaurant           | findone            | api::restaurant.restaurant.findOne            |
| application    | restaurant           | update             | api::restaurant.restaurant.update             |
| application    | restaurant           | createlocalization | api::restaurant.restaurant.createLocalization |
</details>

<details>
<summary>Permission mapping for the Users & Permission plugin:</summary>

| Strapi v3 type    | Strapi v3 controller | Strapi v3 action       | Strapi v4 action                                     |
| ----------------- | -------------------- | ---------------------- | ---------------------------------------------------- |
| users-permissions | auth                 | callback               | plugin::users-permissions.auth.callback              |
| users-permissions | auth                 | connect                | plugin::users-permissions.auth.connect               |
| users-permissions | auth                 | emailconfirmation      | plugin::users-permissions.auth.emailConfirmation     |
| users-permissions | auth                 | forgotpassword         | plugin::users-permissions.auth.forgotPassword        |
| users-permissions | auth                 | register               | plugin::users-permissions.auth.register              |
| users-permissions | auth                 | resetpassword          | plugin::users-permissions.auth.resetPassword         |
| users-permissions | auth                 | sendemailconfirmation  | plugin::users-permissions.auth.sendEmailConfirmation |
| users-permissions | user                 | count                  | plugin::users-permissions.user.count                 |
| users-permissions | user                 | create                 | plugin::users-permissions.user.create                |
| users-permissions | user                 | destroy                | plugin::users-permissions.user.destroy               |
| users-permissions | user                 | destroyall             | _(deleted)_                                          |
| users-permissions | user                 | find                   | plugin::users-permissions.user.find                  |
| users-permissions | user                 | findone                | plugin::users-permissions.user.findOne               |
| users-permissions | user                 | me                     | plugin::users-permissions.user.me                    |
| users-permissions | user                 | update                 | plugin::users-permissions.user.update                |
| users-permissions | userspermissions     | getrole                | plugin::users-permissions.role.getRole               |
| users-permissions | userspermissions     | getroles               | plugin::users-permissions.role.getRoles              |
| users-permissions | userspermissions     | createrole             | plugin::users-permissions.role.createRole            |
| users-permissions | userspermissions     | deleterole             | plugin::users-permissions.role.deleteRole            |
| users-permissions | userspermissions     | updaterole             | plugin::users-permissions.role.updateRole            |
| users-permissions | userspermissions     | getpermissions         | plugin::users-permissions.permissions.getPermissions |
| users-permissions | userspermissions     | getadvancedsettings    | _(deleted)_                                          |
| users-permissions | userspermissions     | customroute            | _(deleted)_                                          |
| users-permissions | userspermissions     | getemailtemplate       | _(deleted)_                                          |
| users-permissions | userspermissions     | getpolicies            | _(deleted)_                                          |
| users-permissions | userspermissions     | getproviders           | _(deleted)_                                          |
| users-permissions | userspermissions     | getroutes              | _(deleted)_                                          |
| users-permissions | userspermissions     | index                  | _(deleted)_                                          |
| users-permissions | userspermissions     | searchusers            | _(deleted)_                                          |
| users-permissions | userspermissions     | updateadvancedsettings | _(deleted)_                                          |
| users-permissions | userspermissions     | updateemailtemplate    | _(deleted)_                                          |
| users-permissions | userspermissions     | updateproviders        | _(deleted)_                                          |
</details>

<details>
<summary>Permission mapping for the i18n plugin:</summary>

| Strapi v3 type | Strapi v3 controller | Strapi v3 action          | Strapi v4 action                 |
| -------------- | -------------------- | ------------------------- | -------------------------------- |
| i18n           | content-types        | getnonlocalizedattributes | _(deleted)_                      |
| i18n           | iso-locales          | listisolocales            | _(deleted)_                      |
| i18n           | locales              | createlocale              | _(deleted)_                      |
| i18n           | locales              | deletelocale              | _(deleted)_                      |
| i18n           | locales              | listlocales               | plugin::i18n.locales.listLocales |
| i18n           | locales              | updatelocale              | _(deleted)_                      |
</details>

<details>
<summary>Permission mapping for the Content-Type Builder:</summary>

| Strapi v3 type       | Strapi v3 controller | Strapi v3 action  | Strapi v4 action                                           |
| -------------------- | -------------------- | ----------------- | ---------------------------------------------------------- |
| content-type-builder | builder              | getreservednames  | _(deleted)_                                                |
| content-type-builder | componentcategories  | deletecategory    | _(deleted)_                                                |
| content-type-builder | componentcategories  | editcategory      | _(deleted)_                                                |
| content-type-builder | components           | createcomponent   | _(deleted)_                                                |
| content-type-builder | components           | deletecomponent   | _(deleted)_                                                |
| content-type-builder | components           | getcomponent      | plugin::content-type-builder.components.getComponent       |
| content-type-builder | components           | getcomponents     | plugin::content-type-builder.components.getComponents      |
| content-type-builder | components           | updatecomponent   | _(deleted)_                                                |
| content-type-builder | connections          | getconnections    | _(deleted)_                                                |
| content-type-builder | contenttypes         | createcontenttype | _(deleted)_                                                |
| content-type-builder | contenttypes         | deletecontenttype | _(deleted)_                                                |
| content-type-builder | contenttypes         | getcontenttype    | plugin::content-type-builder.content-types.getContentType  |
| content-type-builder | contenttypes         | getcontenttypes   | plugin::content-type-builder.content-types.getContentTypes |
| content-type-builder | contenttypes         | updatecontenttype | _(deleted)_                                                |
</details>

<details>
<summary>Permission mapping for the Upload plugin:</summary>

| Strapi v3 type | Strapi v3 controller | Strapi v3 action | Strapi v4 action                   |
| -------------- | -------------------- | ---------------- | ---------------------------------- |
| upload         | upload               | count            | plugin::upload.content-api.count   |
| upload         | upload               | destroy          | plugin::upload.content-api.destroy |
| upload         | upload               | find             | plugin::upload.content-api.find    |
| upload         | upload               | findone          | plugin::upload.content-api.findOne |
| upload         | upload               | getsettings      | _(deleted)_                        |
| upload         | upload               | search           | _(deleted)_                        |
| upload         | upload               | updatesettings   | _(deleted)_                        |
| upload         | upload               | upload           | plugin::upload.content-api.upload  |
</details>

<details>
<summary>Permission mapping for the Email plugin:</summary>

| Strapi v3 type | Strapi v3 controller | Strapi v3 action | Strapi v4 action         |
| -------------- | -------------------- | ---------------- | ------------------------ |
| email          | email                | getsettings      | _(deleted)_              |
| email          | email                | send             | plugin::email.email.send |
| email          | email                | test             | _(deleted)_              |
</details>

<details>
<summary> Permission mapping for the Content Manager and the Documentation plugin:</summary>
All permissions were deleted.
</details>

## Changes impacting Strapi plugins

Strapi `v4` introduces breaking changes that impact the table names, column names and database structures used by the [Users & Permissions](#users-and-permissions-plugin), [Upload](#upload-plugin) and [Internationalization (i18n)](#internationalization-i18n-plugin) plugins.

### Users and Permissions plugin

The tables and database structure used by the [Users & Permissions plugin](/dev-docs/plugins/users-permissions) are different in Strapi `v3` and Strapi `v4`:

**Strapi v3:**
<img src="/img/assets/data-migration/v3-up.png" alt="v3"/>

**Strapi v4:**
<img src="/img/assets/data-migration/v4-up.png" alt="v4"/>

#### Enabled permissions

In Strapi v3, permissions are always present in the table and are duplicated for each role. A permission "A" is set for a role "X" if permission "A" has the `enabled` column value set to `1` (`true`).

In Strapi v4, permissions that aren’t enabled for any role are not present in the database table (i.e. there is no more `enabled` column). A permission "A" is set for a role "X" if there is:

* a permission "A" in the table rows
* and a row linking the role "X" to the permission "A" in the join table.

#### Permissions columns

In Strapi v3, permissions are defined by 3 columns:`type`, `controller`, and `action`.

In Strapi v4, the `type`, `controller` and `action` columns are replaced by a single column named `action`, aggregated like the following:`action = transform(type).controller.action`.

:::tip
For more information and specific examples, you can compare the output of the same permission in Strapi v3 `users-permissions_permission` and Strapi v4 `up_permissions` tables.
:::

### Upload plugin

In Strapi v3, the polymorphic table associated to the file content-type is named `upload_file_morph` and has both an `id` and an `upload_file_id` attribute.

In Strapi v4, the data structure of the [Upload plugin](/dev-docs/plugins/upload) is subject to the following changes:
  
* The polymorphic table is named `files_related_morphs`. The name includes `related` since it concerns the file’s `related` attribute defined in the model schema.
* The `id` and `upload_file_id` columns do not exist.
* A new column `file_id` is added, as a foreign key pointing to `files.id`.
* An index is created for the `file_id` column, as `files_related_morph_fk`.

### Internationalization (i18n) plugin

In Strapi v4, localization tables used by the [Internationalization (i18n)](/dev-docs/plugins/i18n) plugin follow the [circular many-to-many relationships migration](/dev-docs/migration/v3-to-v4/data/sql-relations#circular-relations) and are renamed from `entities__localizations` to `entities_localizations_links`.

</Columns>



# SQL relations cheatsheet
Source: https://docs-v4.strapi.io/dev-docs/migration/v3-to-v4/data/sql-relations

# Data migration: SQL relations in Strapi v3 and v4

This documentation is part of the [SQL migration guide](/dev-docs/migration/v3-to-v4/data/sql) included in the [data migration guide](/dev-docs/migration/v3-to-v4/data-migration) and designed to help you migrate from Strapi v3.6.x to Strapi v4.0.x.

:::strapi v3 / v4 comparison

In Strapi v3, only many-to-many relations (both bidirectional and unidirectional) and polymorphic relations trigger the creation of SQL join tables.

In Strapi v4, every type of [relation](/dev-docs/backend-customization/models#relations) between 2 entities triggers the creation of a SQL join table.
:::

This documentation is built around an example using 2 different database entities: `article` and `category`. The example simulates adding a relation to the `article` entity pointing towards the `category` entity. For each relation type, the following sections illustrate:

- the definition of attributes in the [model schema](/dev-docs/backend-customization/models#model-schema) for each entity's model
- and the entity relationship diagrams.

<details>
<summary>Legend for entity relationship diagrams</summary>
Entity relationship diagrams use the following color code:

* for tables and relations:
  * Strapi v3 items are in orange
  * Strapi v4 items are in purple
* for table names (e.g. articles_category_links):
  * entity names (singular or plural) are in blue
  * attribute names from a schema are in green
  * all the other parts of a table name are in black

Entity relationship diagrams also use the following abbreviations:

- PK for primary key
- FK for foreign key

</details>

## One-to-one relations (1-1)

**Model schemas (attributes only)**:

</Columns>

</Columns>

**Database structures**:

</Columns>

## One-to-many relations (1-N)

**Model schemas (attributes only)**:

</Columns>

</Columns>

**Database structures:**

</Columns>

## Many-to-one relations (N-1)

**Model schemas (attributes only)**:

</Columns>

</Columns>

**Database structures:**

</Columns>

## Many-to-many relations (N-N)

**Model schemas (attributes only)**:

</Columns>

</Columns>

**Database structures:**

</Columns>

## One-way relations (unidirectional N-1)

**Model schemas (attributes only):**

</Columns>

**Database structures:**

</Columns>

## Many-way relations (unidirectional N-N)

**Model schemas (attributes only)**:

</Columns>

**Database structures:**

</Columns>

## Polymorphic relations

:::strapi v3 / v4 comparison
In Strapi v3, table names for polymorphic relations end with `_morph` (singular), and the `attribute_type` points to an entity name.

In Strapi v4, table names for polymorphic relations end with `_morphs` (plural), and the `attribute_type` must point to an entity unique identifier.
:::

:::caution
Polymorphic relations should always have `“configurable”: false` defined in the attributes of the schema to prevent their modification in the admin panel.
:::

**Model schemas (attributes only)**:

</Columns>

In Strapi v3, only one morph table is created for every entity. Whenever a polymorphic relation attribute is added to the entity schema, 2 new columns are added to the `entity_morph` table: `attribute_id` and `attribute_type`.

</Columns>

In Strapi v4, a morph table is created for every entity/morph relation defined in the schema. If a single entity has 2 morph relations, 2 different tables are created and named using the following format: `entity_attribute_morphs`.

**Database structures:**

</Columns>

## Circular relations

Circular relations are relations that point to the same entity (e.g. `article` → `article`). In the schema definitions, circular relations are defined the same way as other relations.

In Strapi v4, `entity_id` and `inv_entity_id` are used to differentiate the relation to the initial entry from the related entry in the SQL join table.

**Database structures example in Strapi v4**:

![v4-circular-many-many.png](/img/assets/data-migration/v4-circular-many-many.png)

## Relations to components

The schema definition for components is the same in Strapi v3 and in Strapi v4, but database structures differ.

**Model schemas (attributes only):**

</Columns>

**Database structures:**

</Columns>



# Enabling a plugin
Source: https://docs-v4.strapi.io/dev-docs/migration/v3-to-v4/plugin/enable-plugin

# v4 plugin migration: Enabling a plugin

:::strapi v3/v4 comparison
A Strapi v3 plugin was enabled if it was manually installed or found in the `plugins` directory.

In Strapi v4:

- Installed plugins following the [automatic plugins discovery](/dev-docs/plugins#automatic-plugins-discovery) pattern will automatically be enabled.
- While developing a local plugin, the plugin must explicitly be enabled in [the `./config/plugins.js` file](/dev-docs/configurations//plugins.md) of the Strapi application.
:::

To enable a local plugin in v4 and define an optional configuration:

1. If it does not already exist, create the `./config/plugins.js` file.

2. In the `./config/plugins.js` file, export a function that:
    - returns an object
    - and can take the `{ env }` object as a parameter (see [Environment configuration](/dev-docs/configurations//environment.md) documentation).

3. Within the object exported by `./config/plugins.js`, create a key with the name of the plugin (e.g. `"my-plugin"`). The value of this key is also an object.

4. Within the `"my-plugin"` object, set the `enabled` key value to `true` (boolean).

5. _(optional)_ Add a `resolve` key, whose value is the path of the plugin folder (as a string), and a `config` key (as an object) that can include additional configuration for the plugin (see [plugins configuration](/dev-docs/configurations//plugins.md) documentation).

<details>
<summary>Example: Enabling and configuring a "my-plugin" plugin</summary>

```js title="./config/plugins.js"

module.exports = ({ env }) => ({
  "my-plugin": {
    enabled: true,
    resolve: "./path-to-my-plugin",
    config: {
      // additional configuration goes here
    },
  },
});
```

</details>

:::note Plugins published on npm
If the plugin will be published on npm, the `package.json` file should include a `strapi.kind` key with a value set to `"plugin"` (i.e. `{ "strapi": { "kind": "plugin" } }`).
:::



# Migrating the back end
Source: https://docs-v4.strapi.io/dev-docs/migration/v3-to-v4/plugin/migrate-back-end

# v4 plugin migration: Migrating the back end

Migrating the back end of a plugin to Strapi v4 requires:

- updating [Strapi packages](#updating-strapi-packages)
- updating content-types [getters](#updating-content-types-getters) and, optionally, [relations](#updating-content-types-relations)
- updating the [plugin configuration](#updating-plugin-configuration)

Depending on these steps, some actions can only be done manually while others can be performed automatically by scripts that modify the code, which are called codemods. The following table lists available options for each step of the migration:

| Action                         | Migration type                                                                                               |
| ------------------------------ | ------------------------------------------------------------------------------------------------------------ |
| Update Strapi packages                 | [Automatic](#automatic-strapi-packages-update) or [manual](#manual-strapi-packages-update)                             |
| Update content-types getters   | [Automatic](#automatic-content-types-getters-update) or [manual](#manual-content-types-getters-update) |
| Update content-types relations | [Manual](#updating-content-types-relations)                                                                    |
| Update configuration           | [Manual](#updating-plugin-configuration)                                                                              |

## Updating Strapi packages

:::strapi v3/v4 comparison
Package names in Strapi v3 are prefixed by `strapi-`.

Strapi v4 uses scoped packages.
:::

To migrate to Strapi v4, rename all Strapi packages from `strapi-package-name` to `@strapi/package-name`. This needs to be done in the `package.json` dependencies and anywhere the package is imported.

Strapi scoped packages can be updated [automatically](#automatic-strapi-packages-update) or [manually](#manual-strapi-packages-update).

### Automatic Strapi packages update

:::caution

:::

To update Strapi scoped packages automatically:

1. Use the [`update-package-dependencies` codemod](https://github.com/strapi/codemods/blob/main/lib/v4/migration-helpers/update-package-dependencies.js) by running the following command:

    ```sh
    npx @strapi/codemods migrate:dependencies [path-to-strapi-plugin]
    ```

2. Use the [`update-strapi-scoped-imports` codemod](https://github.com/strapi/codemods/blob/main/lib/v4/transforms/update-strapi-scoped-imports.js) by running the following command:

    ```sh
    npx @strapi/codemods transform update-strapi-scoped-imports [path-to-file | folder]
    ```

### Manual Strapi packages update

To update Strapi scoped packages manually:

1. Rename all Strapi packages (e.g. `strapi-package-name`) in `package.json` to `@strapi/package-name`
2. Repeat for all instances where the package is imported.

## Updating content-types getters

:::strapi v3/v4 comparison
Strapi v3 models have been renamed to [content-types](/dev-docs/backend-customization/models.md#content-types) in Strapi v4.
:::

If the plugin declares models, update the syntax for all getters from `strapi.models` to `strapi.contentTypes`. The syntax can be updated [automatically](#automatic-content-types-getters-update) or [manually](#manual-content-types-getters-update).

### Automatic content-types getters update

:::caution

:::

To update the syntax for content-types getters automatically, use the [`change-model-getters-to-content-types` codemod](https://github.com/strapi/codemods/blob/main/lib/v4/transforms/change-model-getters-to-content-types.js). The codemod replaces all instances of `strapi.models` with `strapi.contentTypes` in the indicated file or folder.

To use the codemod, run the following command in a terminal:

```jsx
npx @strapi/codemods transform change-model-getters-to-content-types [path-to-file | folder]
```

### Manual content-types getters update

To update the syntax for content-types getters manually, replace any instance of `strapi.models` with `strapi.contentTypes`.

:::tip
Strapi v4 introduced new getters that can be used to refactor the plugin code further (see [Server API usage documentation](/dev-docs/api/plugins/server-api.md#usage)).
:::

## Updating content-types relations

:::prerequisites
Updating content-types relations to Strapi v4 requires that the v3 models have been converted to Strapi v4 content-types (see [converting models to content-types documentation](/dev-docs/migration/v3-to-v4/plugin/update-folder-structure.md#converting-models-to-content-types)).
:::

:::strapi v3/v4 comparison
Strapi v3 defines relations between content-types with the `via`, `model` and `collection` properties in the model settings.

In Strapi v4, relations should be explicitly described in the `schema.json` file of the content-types (see [relations documentation](/dev-docs/backend-customization/models.md#relations)).
:::

If the plugin declares content-types with relations between them, migrating relations to Strapi v4 should be done manually in the [schema](/dev-docs/backend-customization/models.md#model-schema) of the content-types.

To update content-type relations, update the `server/content-types/<content-type-name>/schema.json` file for each content-type with the following procedure:

1. Declare the relation explicitly by setting the `type` attribute value to `"relation"`.

2. Define the type of relation with the `relation` property.<br/>The value should be a string among the following possible options: `"oneToOne"`, `"oneToMany"`, `"manyToOne"` or `"manyToMany"`.

3. Define the content-type target with the `target` property.<br/>The value should be a string following the `api::api-name.content-type-name` or `plugin::plugin-name.content-type-name` syntax convention.

4. (_optional_) In [bidirectional relations](/dev-docs/backend-customization/models.md#relations), define `mappedBy` and `inversedBy` properties on each content-type.

<details>
<summary>Example of all possible relations between an article and an author content-types</summary>

  ```json title="./src/plugins/my-plugin/server/content-types/article/schema.json"
  
  // Attributes for the Article content-type
  "articleHasOneAuthor": {
    "type": "relation",
    "relation": "oneToOne",
    "target": "api::author.author"
  },
  "articleHasAndBelongsToOneAuthor": {
    "type": "relation",
    "relation": "oneToOne",
    "target": "api::author.author",
    "inversedBy": "article"
  },
  "articleBelongsToManyAuthors": {
    "type": "relation",
    "relation": "oneToMany",
    "target": "api::author.author",
    "mappedBy": "article"
  },
  "authorHasManyArticles": {
    "type": "relation",
    "relation": "manyToOne",
    "target": "api::author.author",
    "inversedBy": "articles"
  },
  "articlesHasAndBelongsToManyAuthors": {
    "type": "relation",
    "relation": "manyToMany",
    "target": "api::author.author",
    "inversedBy": "articles"
  },
  "articleHasManyAuthors": {
    "type": "relation",
    "relation": "oneToMany",
    "target": "api::author.author"
  }
  ```

  ```json title="./src/plugins/my-plugin/server/content-types/author/schema.json"

  // Attributes for the Author content-type
  "article": {
    "type": "relation",
    "relation": "manyToOne",
    "target": "api::article.article",
    "inversedBy": "articleBelongsToManyAuthors"
  },
  "articles": {
    "type": "relation",
    "relation": "manyToMany",
    "target": "api::article.article",
    "inversedBy": "articlesHasAndBelongsToManyAuthors"
  }
  ```

</details>

## Updating plugin configuration

:::strapi v3/v4 comparison
Strapi v3 defines plugin configurations in a `config` folder.

In Strapi v4, the default configuration of a plugin is defined as an object found in the `config.js` file or in the `config/index.js` file. These are then called from the entry file (see [default plugin configuration documentation](/dev-docs/api/plugins/server-api.md#configuration)).
:::

To handle default plugin configurations in Strapi v4 the recommended way:

1. Create the `server/config/index.js` file containing an exported object.

2. Within the `config` object:
   - Define a `default` key that takes an object to store the default configuration.
   - (_optional_) Add a `validator` key, which is a function taking the `config` as an argument.

    <details>
      <summary>Example of a default plugin configuration</summary>

      ```jsx title="./src/plugins/my-plugin/server/config/index.js"

      module.exports = {
        default: { optionA: true },
        validator: (config) => {
          if (typeof config.optionA !== 'boolean') {
            throw new Error('optionA has to be a boolean');
          }
        },
      }
      ```

    </details>

3. In the `server/index.js` file, import the configuration and export it.

    <details>
      <summary>Example of a default entry file</summary>

      ```jsx title="./src/plugins/my-plugin/server/index.js"

      // ...
      const config = require('./config');
      // ...

      module.exports = {
        // ...
        config,
        // ...
      };
      ```

    </details>

4. Make sure that Strapi is aware of the plugin's back-end interface exported from `server/index.js` by adding the following line to the `<plugin-name>/strapi-server.js` entry file:

    ```jsx title="./src/plugins/my-plugin/strapi-server.js"

    module.exports = require('./server');
    ```



# Migrating the front end
Source: https://docs-v4.strapi.io/dev-docs/migration/v3-to-v4/plugin/migrate-front-end

# v4 plugin migration: Migrating the front end

Migrating the front end of a plugin to Strapi v4 might require:

- updating how the plugin's front-end is [registered](#registering-the-plugin-with-the-admin-panel)
- updating how the plugin is [added to the amin panel menu](#adding-a-menu-link)
- updating how the plugin [adds settings to the admin panel](#adding-settings)
- updating how the plugin [adds reducers](#adding-reducers)
- updating how the plugin [injects components to the Content Manager](#adding-injection-zones)
- updating how the plugin [uses the admin panel `Initializer` component](#using-the-initializer-component)
- [registering translations](#registering-translations)

Migrating the front end of a plugin to Strapi v4 should be done entirely manually.

:::strapi Going further with the new Admin Panel APIs
Following this guide should help you migrate a basic plugin with a single view. However, the [Admin Panel APIs](/dev-docs/api/plugins/admin-panel-api.md) introduced in Strapi v4 allow for further customization.

In addition to the [`register()` lifecycle function](/dev-docs/api/plugins/admin-panel-api.md#register), which is executed as soon as the plugin is loaded, a [`bootstrap()` lifecycle function](/dev-docs/api/plugins/admin-panel-api.md#bootstrap) executes after all plugins are loaded.

To add a settings link or section, use Redux reducers, hook into other plugins, and modify the user interface with injection zones, consult [the "available actions" table](/dev-docs/api/plugins/admin-panel-api.md#available-actions) for all available APIs and their associated lifecycle functions.
:::

## Registering the plugin with the admin panel

:::strapi v3/v4 comparison
A Strapi v3 plugin is registered with the admin panel by using the `strapi.registerPlugin()` function in the `<my-plugin-name>/admin/src/index.js` file.

In Strapi v4, the plugin is registered within the [`register()` lifecycle function](/dev-docs/api/plugins/admin-panel-api.md#register).
:::

To update the front-end registration of a plugin to Strapi v4:

1. If it does not already exist, create an `admin/src/index.js` file at the root of the plugin folder.
2. In the `<plugin-name>/admin/src/index.js` file, export a function that calls the `register()` lifecycle function, passing the current Strapi application instance as an argument.
3. Inside the `register()` lifecycle function body, call [the `registerPlugin()` function](/dev-docs/api/plugins/admin-panel-api.md#registerplugin) on the application instance, grabbing the `name` and `id` keys from the Strapi v3 configuration object.
4. Make sure that Strapi is aware of the plugin's front-end interface exported from `admin/src/index.js` by adding the following line to the `<plugin-name>/strapi-admin.js` entry file:

    ```jsx
    module.exports = require('./admin/src').default;
    ```

<details>
<summary>Example of a Strapi v4 plugin registration</summary>

  ```jsx title="./src/plugins/my-plugin/admin/src/index.js"

  import pluginId from './pluginId';

  const pluginDescription = pluginPkg.strapi.description || pluginPkg.description;
const { name } = pluginPkg.strapi;

  export default {
    register(app) {
        // executes as soon as the plugin is loaded
        app.registerPlugin({
          id: pluginId
          name,
        })
      }
    }
  ```

  ```jsx title=".src/plugins/my-plugin/strapi-admin.js"

  module.exports = require('./admin/src').default;
  ```

</details>

## Adding a menu link

:::strapi v3/v4 comparison
A Strapi v3 plugin adds a link to the menu in the admin panel by exporting a `menu` object during the plugin registration.

In Strapi v4, a plugin adds a link to the menu programmatically with the [`addMenuLink()` function](/dev-docs/api/plugins/admin-panel-api.md#menu-api) called in the `register` lifecycle. 
:::

To migrate to Strapi v4, pass the `menu` key from the Strapi v3 configuration object to `app.addMenuLink()` with the following properties updated:

| Property name and type in v3                      | Equivalent in v4             |
| ------------------------------------------------- | ---------------------------- |
| `destination` (String)                            | `to` (String)                |
| `label` (String)                                  | `intlLabel` (String)   |
| `icon` (String)<br/><br/>`mainComponent` (String) | `` (React component) |

The React-based icon component can be created in a separate file.

<details>
<summary>Example of an PluginIcon component</summary>

```jsx title="./src/plugins/my-plugin/admin/src/components/PluginIcon/index.js"

const PluginIcon = () => (
  <Icon as={() => } width="16px" />
);

```

</details>

In Strapi v3 the icon component is specified on the `mainComponent` key, in Strapi v4 the component is passed as a dynamic import to the `app.addMenuLink()` function.

<details>
<summary>Example of adding a menu link with a custom plugin icon component</summary>

```jsx title="./src/plugins/my-plugin/admin/src/index.js"

const pluginDescription = pluginPkg.strapi.description || pluginPkg.description;
const { name } = pluginPkg.strapi;

  register(app) {
    app.addMenuLink({
      to: `/plugins/${pluginId}`,
      icon: PluginIcon,
      intlLabel: {
        id: `${pluginId}.plugin.name`,
        defaultMessage: 'My Plugin',
      },
      permissions: pluginPermissions.main,
      Component: async () => {
        const component = await import(/* webpackChunkName: "my-plugin-page" */ './pages/PluginPage');

        return component;
      },
    });

    app.registerPlugin({
      description: pluginDescription,
      id: pluginId
      name
    });
  }
}
```

</details>

## Adding settings

:::strapi v3/v4 comparison

A Strapi v3 plugin adds a settings section by exporting a `settings` property during the plugin registration.

In Strapi v4, a plugin adds a settings section programmatically using the [Settings API](/dev-docs/api/plugins/admin-panel-api.md#settings-api).
:::

To migrate to Strapi v4, depending on what your Strapi v3 plugin does, use the following table to find the appropriate Settings API method to use, and click on the method name to go to its dedicated documentation:

| Action     | Method |
|-----|----|
| Create a new settings section<br/> and define new links to include in this section | [`createSettingsSection()`](/dev-docs/api/plugins/admin-panel-api.md#createsettingsection) |
| Add link(s) to an existing settings section:<ul><li>a single link</li><li>multiple links</li></ul> | <br/><ul><li>[`addSettingsLink()`](/dev-docs/api/plugins/admin-panel-api.md#addsettingslink)</li><li>[`addSettingsLinks()`](/dev-docs/api/plugins/admin-panel-api.md#addsettingslinks)</li></ul> |

<details>
<summary>Example of creating a new settings section</summary>

```js title="./src/plugins/my-plugin/admin/src/index.js"

register(app) {
  // Create the plugin's settings section
  app.createSettingSection(
    // created section
    {
      id: pluginId,
      intlLabel: {
        id: getTrad('Settings.section-label'),
        defaultMessage: 'My plugin settings',
      },
    },
    // links
    [
      {
        intlLabel: {
          id: 'settings.page',
          defaultMessage: 'Setting page 1',
        },
        id: 'settings',
        to: `/settings/my-plugin/`,
        Component: async () => {
          const component = await import(
            /* webpackChunkName: "my-plugin-settings-page" */ './pages/Settings'
          );

          return component;
        },
        permissions: [],
      },

    ]
  );

  app.registerPlugin({
    id: pluginId,
    name,
  });
},
```

</details>

## Adding reducers

:::strapi v3/v4 comparison

A Strapi v3 plugin adds reducers by exporting a `reducers` property during the plugin registration.

In Strapi v4, a plugin adds reducers programmatically using the [Reducers API](/dev-docs/api/plugins/admin-panel-api.md#reducers-api).
:::

To migrate to Strapi v4, make sure reducers are added programmatically with the `addReducers()` method.

<details>
<summary>Example of adding reducers</summary>

```js title="./src/plugins/my-plugin/admin/src/index.js"

const reducers = {
  [`${pluginId}_reducer`]: myReducer,
  [`${pluginId}_reducer1`]: myReducer1,
};

  register(app) {
    app.addReducers(reducers);

    app.registerPlugin({
      id: pluginId,
      name,
    });
  },
 }
}
```

</details>

## Adding injection zones

:::strapi v3/v4 comparison
A Strapi v3 plugin can inject components into the Content Manager's Edit view, using the `registerField()` method or the `useStrapi` hook within the `Initializer` component.

In Strapi v4, a plugin can inject components into several locations of the Content Manager using the [Injection Zones API](/dev-docs/api/plugins/admin-panel-api.md#injection-zones-api).
:::

To migrate to Strapi v4, make sure components are injected using Strapi v4 [Injection Zones API](/dev-docs/api/plugins/admin-panel-api.md#injection-zones-api). Depending on where the component should be injected, use:

- either the `injectContentManagerComponent()` method to inject into [predefined injection zones](/dev-docs/api/plugins/admin-panel-api.md#using-predefined-injection-zones) of the Content Manager
- or the `injectComponent()` method to inject into [custom zones](/dev-docs/api/plugins/admin-panel-api.md#creating-a-custom-injection-zone)

<details>
<summary>Example of injecting a component into the Content Manager's Edit view</summary>

```jsx title=" ./src/plugins/my-plugin/admin/src/index.js"

  bootstrap(app){
    // insert a link in the 'right-links' zone of the Content Manager's edit view
    app.injectContentManagerComponent('editView', 'right-links', {
      name: `${pluginId}-link`,
      Component: Link,
    });
  }
}
```

</details>

## Using the `Initializer` component

:::strapi v3/v4 comparison
In both Strapi v3 and v4, the `Initializer` component is generated by default when a plugin is created. `Initializer` could be used to execute some logic when the application is loading, for instance to dispatch an action after the user logs in into the admin panel.

In Strapi v4, the `Initializer` component code has changed and uses the `useRef` and `useEffect`  React hooks to dispatch actions.
:::

The Initializer component is useful to store a global state in the application, which will be loaded before the application is rendered using Redux. To make sure the Initializer component is mounted in the application, set the `isReady` key to `false` when registering the plugin with `registerPlugin()`.

To migrate to Strapi v4, make sure the plugin uses the latest `Initializer` code, which can be copied and pasted from the following code example:

```jsx title="./src/plugins/my-plugin/admin/src/components/Initializer/index.js"

const Initializer = ({ setPlugin }) => {
  const ref = useRef();
  ref.current = setPlugin;

  useEffect(() => {
    ref.current(pluginId);
  }, []);

  return null;
};

Initializer.propTypes = {
  setPlugin: PropTypes.func.isRequired,
};

```

<details>
<summary>Example of registering a plugin that uses the new Initializer component</summary>

```js title="./src/plugins/my-plugin/admin/src/index.js"

  register(app) {
    app.registerPlugin({
      id: pluginId,
      initializer: Initializer,
      isReady: false, // ensures the Initializer component is mounted in the application
      name,
    });
  },
 }
}
```

</details>

## Registering translations

In Strapi v4, the front-end plugin interface can export an [asynchronous `registerTrads()` function](/dev-docs/api/plugins/admin-panel-api.md#async-function) for registering translation files.

<details>
<summary>Example of translation registration</summary>

```jsx

  register(app) {
    // register code...
  },
  bootstrap(app) {
    // bootstrap code...
  },
  async registerTrads({ locales }) {
    const importedTrads = await Promise.all(
      locales.map((locale) => {
        return import(
          /* webpackChunkName: "[pluginId]-[request]" */ `./translations/${locale}.json`
        )
          .then(({ default: data }) => {
            return {
              data: prefixPluginTranslations(data, pluginId),
              locale,
            };
          })
          .catch(() => {
            return {
              data: {},
              locale,
            };
          });
      })
    );

    return Promise.resolve(importedTrads);
  },
};
```

</details>



# Updating the folder structure
Source: https://docs-v4.strapi.io/dev-docs/migration/v3-to-v4/plugin/update-folder-structure

# v4 plugin migration: Updating the folder structure

:::strapi v3/v4 comparison
Strapi v3 plugins required a specific folder structure.

In Strapi v4, plugins are developed using a programmatic API, which gives flexibility in the folder structure.
:::

The folder structure of a Strapi v4 plugin should meet the following requirements:

- The root of the plugin folder should include:
  - a `strapi-server.js` entry file, if the plugin interacts with Strapi's back-end (see [Server API](/dev-docs/api/plugins/server-api.md))
  - a `strapi-admin.js` entry file, if the plugin interacts with Strapi's admin panel (see [Admin Panel API](/dev-docs/api/plugins/admin-panel-api.md)).

- `strapi-admin.js` and `strapi-server.js` should export the plugin's interface.

As long as these requirements are met, the rest of the folder structure is up to you.

<details>
<summary>Example of a Strapi v4 plugin structure</summary>

```jsx
my-plugin
├─ admin
│  └─ src
│     ├─ components
│     ├─ pages
│     ├─ // more folders and files
│     └─ index.js
├─ server
│  ├─ config
│  ├─ content-types
│  ├─ controllers
│  ├─ middlewares
│  ├─ policies
│  ├─ routes
│  ├─ services
│  ├─ bootstrap.js
│  ├─ destroy.js
│  ├─ register.js
│  ├─ // more folders and files
│  └─ index.js
├─ strapi-admin.js // require('./admin')
└─ strapi-server.js // require('./server')
```

</details>

The folder structure of a Strapi v3 plugin can be migrated to a v4 plugin either [automatically](#updating-folder-structure-automatically) or [manually](#updating-folder-structure-manually).

## Updating folder structure automatically

:::caution
The codemod creates a new Strapi v4 plugin, leaving the Strapi v3 plugin in place. We recommend confirming the v4 version of the plugin is working properly before deleting the v3 version.
:::

A codemod can be used to automatically update the folder structure of a plugin for Strapi v4. The codemod performs the following actions:

- creation of 2 entry files: `strapi-server.js` and `strapi-admin.js`,
- organization of files and folders into a `server` and an `admin` folders, respectively,
- conversion of `models` to `contentTypes`,
- and export of `services` as functions.

To execute the codemod, run the following commands in a terminal:

```sh
npx @strapi/codemods migrate:plugin <path-to-v3-plugin> [path-for-v4-plugin]
```

## Updating folder structure manually

Manually updating the folder structure requires moving and updating the content of multiple files and folders. These steps are described in the following subsections.

:::note
The folder structure is given as an example, and files and folders can be organized freely as long as `strapi-server.js` or `strapi-admin.js` exist and export the plugin interface.
:::

### Creating a `server` folder

The `server` folder includes all the code for the back end of the plugin. To create it at the root of the plugin folder, run the following command in a terminal:

```sh
cd <my-plugin-folder-name>
mkdir server
```

### Moving controllers, services, and middlewares

:::strapi v3/v4 comparison
In Strapi v3, controllers, services, and middlewares of a plugin must follow a strict folder structure convention.

In Strapi v4, the organization of files and folders for plugins is flexible. However, it is recommended to create dedicated folders for every type of back-end element (e.g. [controllers](/dev-docs/api/plugins/server-api.md#controllers), [services](/dev-docs/api/plugins/server-api.md#services), and [middlewares](/dev-docs/api/plugins/server-api.md#middlewares)) inside a `server` folder (see [project structure](/dev-docs/project-structure.md)).

:::

To update the controllers, services, and middlewares of a plugin to Strapi v4, create specific sub-folders in a `server` folder.

Plugin files and folders in Strapi v4 should meet 2 requirements:

- Each file in the `server/<subfolder-name>/<element-name>` (e.g. `server/controllers/my-controller.js`) should:
  * export a function taking the `strapi` instance (object) as a parameter
  * and return an object.
- Each of the `server/<subfolder-name>` folders should include an `index.js` file that exports all files in the folder.

<details>
<summary>Example of files and folder for Strapi v4 plugin controllers</summary>

```jsx title="./src/plugins/my-plugin/server/controllers/my-controllerA.js"

module.exports = ({ strapi }) => ({
  doSomething(ctx) {
    ctx.body = { message: "HelloWorld" };
  },
});
```

```jsx title="./src/plugins/my-plugin/server/controllers/index.js"

"use strict";

const myControllerA = require("./my-controllerA");
const myControllerB = require("./my-controllerB");

module.exports = {
  myControllerA,
  myControllerB,
};

```

</details>

### Moving the `bootstrap` function

:::strapi v3/v4 comparison
Strapi v3 has a dedicated `config/functions` folder for each plugin.

In Strapi v4, the `config` folder does not necessarily exist for a plugin and [the `bootstrap` function](/dev-docs/api/plugins/server-api.md#bootstrap) and other lifecycle functions can be declared elsewhere.
:::

To update the plugin's `bootstrap` function to Strapi v4:

- move the `bootstrap()` function from `server/config/functions/bootstrap.js` to `server/bootstrap.js`
- pass the `strapi` instance (object) as a parameter

```jsx title="./src/plugins/my-plugin/server/bootstrap.js"

"use strict";

module.exports = ({ strapi }) => ({
  // bootstrap the plugin
});
```

### Moving routes

:::strapi v3/v4 comparison
Strapi v3 declares routes for a plugin in a specific `config/routes.json` file.

In Strapi v4, the `config` folder does not necessarily exist for a plugin and [plugin routes](/dev-docs/api/plugins/server-api.md#routes) can be declared in a `server/routes/index.json` file.
:::

To update plugin routes to Strapi v4, move routes from `config/routes.json` to `server/routes/index.json`.

Routes in Strapi v4 should meet 2 requirements:

- Routes should return an array or an object specifying `admin` or `content-api` routes.
- Routes handler names should match the same casing as the controller exports.

<details>
<summary>Example of controllers export and routes in a Strapi v4 plugin</summary>

```jsx title="./src/plugins/my-plugin/server/controllers/index.js"

"use strict";

const myControllerA = require("./my-controllerA");
const myControllerB = require("./my-controllerB");

module.exports = {
  myControllerA,
  myControllerB,
};
```

```jsx title="./src/plugins/my-plugin/server/routes/index.js"

module.exports = [
  {
    method: "GET",
    path: "/my-controller-a",
    // Camel case handler to match export in server/controllers/index.js
    handler: "myControllerA.doSomething",
    config: { policies: [] },
  },
];
```

</details>

### Moving policies

:::strapi v3/v4 comparison
Strapi v3 declares policies for a plugin in a specific `config/policies` folder.

In Strapi v4, the `config` folder does not necessarily exist for a plugin and [plugin policies](/dev-docs/api/plugins/server-api.md#policies) can be declared in dedicated files found under `server/policies`.
:::

To update plugin policies to Strapi v4:

1. Move policies from `config/policies` to `server/policies/<policy-name>.js`

2. Add an `index.js` file to the `server/policies` folder and make sure it exports all files in the folder.

### Converting models to content-types

:::strapi v3/v4 comparison
Strapi v3 declares plugin models in `<model-name>.settings.json` files found in a `models` folder.

In Strapi v4, [plugin content-types](/dev-docs/api/plugins/server-api.md#content-types) are declared in `schema.json` files found in a `server/content-types/<contentTypeName>` folder. The `schema.json` files introduce some new properties (see [schema documentation](/dev-docs/backend-customization/models.md#model-schema)).
:::

To convert Strapi v3 models to v4 content-types:

1. Move the `models` folder under the `server` folder and rename `models` to `content-types`:

    ```sh
    mv models/ server/content-types/
    ```

2. Move/rename each model's `<modelName>.settings.json` file to `server/content-types/<contentTypeName>/schema.json` files.
3. In each `<contentTypeName>/schema.json` file, update [the `info` object](/dev-docs/backend-customization/models.md#model-information), which now requires declaring the 3 new `singularName`, `pluralName` and `displayName` keys and respecting some case-formatting conventions:

    ```json title="./src/plugins/my-plugin/content-types/<content-type-name>/schema.json"

    // ...
    "info": {
      "singularName": "content-type-name", // kebab-case required
      "pluralName": "content-type-names", // kebab-case required
      "displayName": "Content-type name",
      "name": "Content-type name",
    };
    // ...
    ```

4. (_optional_) If the Strapi v3 model uses lifecycle hooks found in `<model-name>.js`, move/rename the file to `server/content-types/<contentTypeName>/lifecycle.js`, otherwise delete the file.
5. Create an `index.js` file for each content-type to export the schema and, optionally, lifecycle hooks:

    ```jsx title="./src/plugins/my-plugin/server/content-types/<content-type-name>/index.js"

    const schema = require("./schema.json");
    const lifecycles = require("./lifecycles.js"); // optional

    module.exports = {
      schema,
      lifecycles, // optional
    };
    ```

6. Create a `server/content-types/index.js` file.
7. In `server/content-types/index.js`, export all content-types and make sure the key of each content-type matches the `singularName` found in the `info` object of the content-type’s `schema.json` file:

    ```json title="./src/plugins/my-plugin/server/content-types/content-type-a/schema.json"

    "info": {
      "singularName": "content-type-a", // kebab-case required
      "pluralName": "content-type-as", // kebab-case required
      "displayName": "Content-Type A",
      "name": "Content-Type A",
    };
    ```

    ```jsx title="./src/plugins/my-plugin/server/content-types/index.js"

    "use strict";

    const contentTypeA = require("./content-type-a");
    const contentTypeB = require("./content-type-b");

    module.exports = {
      // Key names should match info.singularName key values found in corresponding schema.json files
      "content-type-a": contentTypeA,
      "content-type-b": contentTypeB,
    };
    ```

:::note
Converting Strapi v3 models to v4 content-types also requires updating getters and, optionally, relations (see [plugin back end migration documentation](/dev-docs/migration/v3-to-v4/plugin/migrate-back-end.md)).
:::

### Creating entry files

:::strapi v3/v4 comparison
Strapi v3 plugins use a strict folder structure convention.

In Strapi v4, the folder structure for plugins is flexible. However, each plugin needs at least a `strapi-server.js` entry file or a `strapi-admin.js` entry file. The 2 entry files are used to take advantage of, respectively, the [Server API](/dev-docs/api/plugins/server-api.md) for the back end of the plugin and the [Admin Panel API](/dev-docs/api/plugins/admin-panel-api.md) for the front end of the plugin.
:::

To update the plugin to Strapi v4:

- If the plugin interacts with Strapi's backend, create the `strapi-server.js` back-end entry file at the root of the plugin folder. The file should require all necessary files and export the back-end plugin interface (see [migrating the back end of a plugin](/dev-docs/migration/v3-to-v4/plugin/migrate-back-end.md)). 

  <details>
  <summary>Example strapi-server.js and server/index.js entry files</summary>

    ```js title="./src/plugins/my-plugin/strapi-server.js"

    "use strict";

    module.exports = require('./server');
    ```

    ```js title="./src/plugins/my-plugin/server/index.js"

    "use strict";

    const register = require('./register');
    const bootstrap = require('./bootstrap');
    const destroy = require('./destroy');
    const config = require('./config');
    const contentTypes = require('./content-types');
    const controllers = require('./controllers');
    const routes = require('./routes');
    const middlewares = require('./middlewares');
    const policies = require('./policies');
    const services = require('./services');

    module.exports = {
      register,
      bootstrap,
      destroy,
      config,
      controllers,
      routes,
      services,
      contentTypes,
      policies,
      middlewares,
    };
    ```

  </details>

- If the plugin interacts with Strapi's admin panel, create the `strapi-admin.js` front-end entry file at the root of the plugin folder. The file should require all necessary files and export the front-end plugin interface (see [migrating the front end of a plugin](/dev-docs/migration/v3-to-v4/plugin/migrate-front-end.md)).

  <details>
  <summary>Example strapi-admin.js entry file</summary>

    ```jsx title="./src/plugins/my-plugin/strapi-admin.js"

    "use strict";

    module.exports = require("./admin/src").default;
    ```

  </details>



# Plugins
Source: https://docs-v4.strapi.io/dev-docs/plugins

# Strapi plugins

:::strapi Dev Docs vs. User Guide
The present section is about the developer-oriented aspects of Strapi plugins. To learn how to install and use plugins from the Strapi admin panel, please read the [User Guide](/user-docs/plugins).
:::

Strapi's core features can be extended with plugins, and your experience with Strapi plugins will fall under the following 4 use cases:

- You will use one of the  **built-in plugins** officially maintained by Strapi. Some built-in plugins can already be pre-installed when you create a new Strapi project.
- You might want to browse **3rd-party plugins** for additional features. 3rd-party plugins can be browsed from the admin panel or from the [Marketplace website](https://market.strapi.io) and installed with the command line interface.
- You might want to **develop your own plugins**. The plugins you develop can be specific to your Strapi project — these plugins are called "local plugins", or can be submitted to the Marketplace if meant to be shared with the Strapi community.
- You might want to **extend an existing plugin** for a specific Strapi project. With this last use case, please proceed carefully, knowing that extensions might break with future updates from the plugin maintainer.

Choose one of the following documentation sections from the table, depending on your profile and use case:

| As a…       | I want to…    | Recommended section to read |
|-------------|---------------|-----------------------------|
| User        | Discover and install built-in and 3rd-party plugins |  [User Guide > Plugins](/user-docs/plugins) |
| Developer   | Setup, configure, and use Strapi built-in plugins | [Dev Docs > Using plugins](/dev-docs/plugins/using-plugins) |
| Developer   | Create my own plugin and submit it to the Marketplace | [Dev Docs > Developing plugins](/dev-docs/plugins/developing-plugins) |
| Developer   | Extend an existing plugin to customize it for a specific Strapi project️ | [Dev Docs > Extending plugins](/dev-docs/plugins-extension) |

<br/>



# Plugins extension
Source: https://docs-v4.strapi.io/dev-docs/plugins-extension

# Plugins extension

Strapi comes with [plugins](/dev-docs/plugins) that can be installed from the [Marketplace](/user-docs/plugins/installing-plugins-via-marketplace#installing-marketplace-plugins-and-providers) or as npm packages. You can also create your own plugins (see [plugins development](/dev-docs/plugins-development)) or extend the existing ones.

:::warning
* Any plugin update could break this plugin's extensions.
* New versions of Strapi are released with [migration guides](/dev-docs/migration-guides) when required, but these guides never cover plugin extensions. Consider forking a plugin if extensive customizations are required.
* Currently, the admin panel part of a plugin can only be extended using [patch-package](https://www.npmjs.com/package/patch-package), but please consider that doing so might break your plugin in future versions of Strapi.
:::

Plugin extensions code is located in the `./src/extensions` folder (see [project structure](/dev-docs/project-structure)). Some plugins automatically create files there, ready to be modified.

<details> 
<summary>Example of extensions folder structure</summary>

```bash
/extensions
  /some-plugin-to-extend
    strapi-server.js|ts
    /content-types
      /some-content-type-to-extend
        model.json
      /another-content-type-to-extend
        model.json
  /another-plugin-to-extend
    strapi-server.js|ts
```
</details>

Plugins can be extended in 2 ways:

- [extending the plugin's content-types](#extending-a-plugin-s-content-types)
- [extending the plugin's interface](#extending-a-plugin-s-interface) (e.g. to add controllers, services, policies, middlewares and more)

## Extending a plugin's content-types

A plugin's Content-Types can be extended in 2 ways: using the programmatic interface within `strapi-server.js|ts` and by overriding the content-types schemas.

The final schema of the content-types depends on the following loading order:

1. the content-types of the original plugin,
2. the content-types overridden by the declarations in the [schema](/dev-docs/backend-customization/models#model-schema) defined in `./src/extensions/plugin-name/content-types/content-type-name/schema.json`
3. the content-types declarations in the [`content-types` key exported from `strapi-server.js|ts`](/dev-docs/api/plugins/server-api#content-types)
4. the content-types declarations in the [`register()` function](/dev-docs/configurations/functions#register) of the Strapi application

To overwrite a plugin's [content-types](/dev-docs/backend-customization/models):

1. _(optional)_ Create the `./src/extensions` folder at the root of the app, if the folder does not already exist.
2. Create a subfolder with the same name as the plugin to be extended.
3. Create a `content-types` subfolder.
4. Inside the `content-types` subfolder, create another subfolder with the same [singularName](/dev-docs/backend-customization/models#model-information) as the content-type to overwrite.
5. Inside this `content-types/name-of-content-type` subfolder, define the new schema for the content-type in a `schema.json` file (see [schema](/dev-docs/backend-customization/models#model-schema) documentation).
6. _(optional)_ Repeat steps 4 and 5 for each content-type to overwrite.

## Extending a plugin's interface

When a Strapi application is initializing, plugins, extensions and global lifecycle functions events happen in the following order:

1. Plugins are loaded and their interfaces are exposed.
2. Files in `./src/extensions` are loaded.
3. The `register()` and `bootstrap()` functions in `./src/index.js|ts` are called.

A plugin's interface can be extended at step 2 (i.e. within `./src/extensions`) or step 3 (i.e. inside `./src/index.js|ts`).

:::note
If your Strapi project is TypeScript-based, please ensure that the `index` file has a TypeScript extension (i.e., `src/index.ts`) otherwise it will not be compiled.
:::

### Within the extensions folder

To extend a plugin's server interface using the `./src/extensions` folder:

1. _(optional)_ Create the `./src/extensions` folder at the root of the app, if the folder does not already exist.
2. Create a subfolder with the same name as the plugin to be extended.
3. Create a `strapi-server.js|ts` file to extend a plugin's back end using the [Server API](/dev-docs/api/plugins/server-api).
4. Within this file, define and export a function. The function receives the `plugin` interface as an argument so it can be extended.

<details>
<summary>Example of backend extension</summary>

```js title="./src/extensions/some-plugin-to-extend/strapi-server.js|ts"

module.exports = (plugin) => {
  plugin.controllers.controllerA.find = (ctx) => {};

  plugin.policies[newPolicy] = (ctx) => {};

  plugin.routes['content-api'].routes.push({
    method: 'GET',
    path: '/route-path',
    handler: 'controller.action',
  });

  return plugin;
};
```
</details>

### Within the register and bootstrap functions

To extend a plugin's interface within `./src/index.js|ts`, use the `bootstrap()` and `register()` [functions](/dev-docs/configurations/functions) of the whole project, and access the interface programmatically with [getters](/dev-docs/api/plugins/server-api#usage).

<details>
<summary>Example of extending a plugin's content-type within ./src/index.js|ts</summary>

```js title="./src/index.js|ts"

module.exports = {
  register({ strapi }) {
    const contentTypeName = strapi.contentType('plugin::my-plugin.content-type-name')  
    contentTypeName.attributes = {
      // Spread previous defined attributes
      ...contentTypeName.attributes,
      // Add new, or override attributes
      'toto': {
        type: 'string',
      }
    }
  },
  bootstrap({ strapi }) {},
};
```
</details>



# Developing plugins
Source: https://docs-v4.strapi.io/dev-docs/plugins/developing-plugins

# Developing Strapi plugins

:::info
This section is about developing Strapi plugins to use them as local plugins or to submit them to the Marketplace. Not what you're looking for? Read the [plugins introduction](/dev-docs/plugins) and find your use case and recommended section to read from there.
:::

Strapi allows the development of plugins that work exactly like the built-in plugins or 3rd-party plugins available from the [Marketplace](https://market.strapi.io). Once created, your plugin can be:

- used as a local plugin, working only with a specific Strapi project,
- or [submitted to the Marketplace](https://market.strapi.io/submit-plugin) to be shared with the community.

👉 To start developing a Strapi plugin:

1. [Create a plugin](/dev-docs/plugins/development/create-a-plugin) using the CLI-based generator.
2. Learn more about the [structure of a plugin](/dev-docs/plugins/development/plugin-structure).
3. Get an overview of the [plugin APIs](#plugin-apis) to add features to your plugin.
4. Read some [guides](#guides) based on your use case(s).

## Plugin APIs

Strapi provides the following programmatic APIs for plugins to hook into some of Strapi's features:

:::strapi Custom fields plugins
Plugins can also be used to add [custom fields](/dev-docs/custom-fields) to Strapi.
:::

## Guides

<br />

:::strapi Additional resources
The Strapi blog features a [tutorial series](https://strapi.io/blog/how-to-create-a-strapi-v4-plugin-server-customization-4-6) about creating a Strapi v4 'Todo' plugin. The [contributors documentation](https://contributor.strapi.io/) can also include additional information useful while developing a Strapi plugin.
:::



# Plugin creation & setup
Source: https://docs-v4.strapi.io/dev-docs/plugins/development/create-a-plugin

# Plugin creation and setup

To start developing a Strapi plugin, you need to:

1. create the plugin,
2. enable the plugin,
3. install dependencies, build the admin panel, and start the server(s).

:::prerequisites
You created a Strapi project.

<details>
<summary>Use the CLI to create a project:</summary>

Run the corresponding command in a terminal window, replacing `my-project` with the name of your choice:

</Tabs>

More details can be found in the [CLI installation guide](/dev-docs/installation/cli).

</details>
:::

## Create the plugin using the CLI generator

The fastest way to create a Strapi plugin is to use the CLI generator. To do so:

1. Navigate to the root of an existing Strapi project, or create a new one.
2. Run the following command in a terminal window to start the interactive CLI:

  </Tabs>

4. Choose either `JavaScript` or `TypeScript` for the plugin language.

:::callout 🚧 Experimental plugin CLI
Strapi now also offers a [plugin CLI](/dev-docs/plugins/development/plugin-cli), but use it at your own risk as it's still experimental.
:::

## Enable the plugin

Once the `strapi generate plugin` CLI script has finished running, the minimum required code for the plugin to work is created for you, but the plugin is not enabled yet.

To enable a plugin:

1. If it does not exist already, create the **plugins configuration file** 

  </Tabs>

:::tip
If you plan to use the plugin outside the Strapi project it was created in, move your plugin file outside the Strapi project and change the `resolve` value to the absolute directory path of your plugin.
:::

## Install dependencies, build the admin panel, and start servers

Once the plugin code has been generated and the plugin is enabled, the next steps slighly differ depending on whether you created a vanilla JavaScript-based plugin or a TypeScript-based plugin (see [step 3](#create-the-plugin-using-the-cli-generator) of the CLI generator instructions).

  </Tabs>

3. Navigate back to the Strapi project root with `cd ../../..` and run the following command to build the admin panel and start the server(s):

  </Tabs>

</TabItem>

  </Tabs>

3. Still in the plugin directory (e.g., `src/plugins/my-plugin`), run the following command:

  </Tabs>

  This step transpiles the TypeScript files and outputs the JavaScript files to a `dist` directory that is unique to the plugin.

4. Navigate back to the Strapi project root with `cd ../../..` and run the following command to build the admin panel and start the server(s):

  </Tabs>

</TabItem>
</Tabs>

You should now be ready to start developing your plugin.

:::strapi What to read next?
You can either jump to the [plugin structure](/dev-docs/plugins/development/plugin-structure) documentation or read the [servers and hot reloading](#servers-and-hot-reloading) section to learn more about different ways to start the server.
:::

### Servers and hot reloading

Strapi itself is **headless** 

</Tabs>

This will run the server on `localhost:1337` and enable hot reloading only on the back-end server, i.e. it will only auto-reload when changes are made to the server. If you are only doing development in the `./server` directory of your plugin, this will be faster.

#### Start both the backend and admin panel servers

If you are doing development on both the `/server` and `/admin` directories of your plugin, run the following command:

</Tabs>

This will run the server on `localhost:1337` and enable hot reloading on both the back-end and front-end servers, i.e.it will auto-reload when changes are made to the server or the admin panel of Strapi.



# Plugin CLI
Source: https://docs-v4.strapi.io/dev-docs/plugins/development/plugin-cli

# Plugin CLI reference

:::caution
The Plugin CLI is currently experimental.
:::

The Plugin CLI is set of commands orientated around developing plugins to use them as local plugins or to publish them on NPM and/or submit them to the Marketplace.

The present documentation lists the available Plugin CLI commands. The [associated guide](/dev-docs/plugins/guides/use-the-plugin-cli) illustrates how to use these commands to create a plugin from scratch, link it to an existing project, and publish it.

## strapi plugin:init

Create a new plugin at a given path.

```bash
strapi plugin:init <path>
```

| Arguments |  Type  | Description         | Default                   |
| --------- | :----: | --------------------| ------------------------- |
| `path`    | string | Path to the plugin  | `./src/plugins/my-plugin` |

| Option        | Type | Description                              | Default |
| ------------- | :--: | ---------------------------------------- |---------|
| `-d, --debug` |  -   | Enable debugging mode with verbose logs  | false   |
| `--silent`    |  -   | Do not log anything                      | false   |

## strapi plugin:build

Bundle the strapi plugin for publishing.

```bash
strapi plugin:build
```

| Option         |  Type  | Description                                                                                                       | Default |
| -------------- | :----: | ----------------------------------------------------------------------------------------------------------------- | --------|
| `--force`      | string | Automatically answer "yes" to all prompts, including potentially destructive requests, and run non-interactively. | -       |
| `-d, --debug`  |   -    | Enable debugging mode with verbose logs                                                                           | false   |
| `--silent`     |   -    | Do not log anything                                                                                               | false   |
| `--minify`     |   -    | Minify the output                                                                                                 | true    |
| `--sourcemaps` |   -    | Produce sourcemaps                                                                                                | false   |

## strapi plugin:link-watch

Recompiles the plugin automatically on changes and runs `yalc push --publish`.

```bash
strapi plugin:link-watch
```

| Option        | Type | Description                                              | Default |
| ------------- | :--: | -------------------------------------------------------- | --------|
| `-d, --debug` |  -   | Enable debugging mode with verbose logs                  | false   |
| `--silent`    |  -   | Do not log anything                                      | false   |

## strapi plugin:watch

Watch and compile the Strapi plugin for local development.

```bash
strapi plugin:watch
```

| Option        | Type | Description                                              | Default |
| ------------- | :--: | -------------------------------------------------------- |---------|
| `-d, --debug` |  -   | Enable debugging mode with verbose logs                  | false   |
| `--silent`    |  -   | Do not log anything                                      | false   |

## strapi plugin:verify

Verify the output of the plugin before publishing it.

```bash
strapi plugin:verify
```

| Option        | Type | Description                                              | Default |
| ------------- | :--: | -------------------------------------------------------- | --------|
| `-d, --debug` |  -   | Enable debugging mode with verbose logs                  | false   |
| `--silent`    |  -   | Do not log anything                                      | false   |



# Plugin structure
Source: https://docs-v4.strapi.io/dev-docs/plugins/development/plugin-structure

# Plugin structure

When [creating a plugin with the CLI generator](/dev-docs/plugins/development/create-a-plugin), Strapi generates the following boilerplate structure for you in the `./src/plugins/my-plugin` folder:

A Strapi plugin is divided into 2 parts, each living in a different folder and offering a different API:

| Plugin part | Description | Folder       | API |
|-------------|-------------|--------------|-----|
| Admin panel | Includes what will be visible in the [admin panel](/user-docs/intro) (components, navigation, settings, etc.) | `/admin` |[Admin Panel API](/dev-docs/api/plugins/admin-panel-api)|
| Backend server | Includes what relates to the [backend server](/dev-docs/backend-customization) (content-types, controllers, middlewares, etc.) |`/server` |[Server API](/dev-docs/api/plugins/server-api)|

<br />

:::note Notes about the usefulness of the different parts for your specific use case
- **Server-only plugin**: You can create a plugin that will just use the server part to enhance the API of your application. For instance, this plugin could have its own visible or invisible content-types, controller actions, and routes that are useful for a specific use case. In such a scenario, you don't need your plugin to have an interface in the admin panel.

- **Admin panel plugin vs. application-specific customization**: You can create a plugin to inject some components into the admin panel. However, you can also achieve this by creating a `./src/admin/app.js` file and invoking the `bootstrap` lifecycle function to inject your components. In this case, deciding whether to create a plugin depends on whether you plan to reuse and distribute the code or if it's only useful for a unique Strapi application.
:::

<br/>

:::strapi What to read next?
The next steps of your Strapi plugin development journey will require you to use any of the Strapi plugins APIs.

2 different types of resources help you understand how to use the plugin APIs:

- The reference documentation for the [Admin Panel API](/dev-docs/api/plugins/admin-panel-api) and [Server API](/dev-docs/api/plugins/server-api) give an overview of what is possible to do with a Strapi plugin.
- [Guides](/dev-docs/plugins/developing-plugins#guides) cover some specific, use-case based examples.
:::



# Documentation
Source: https://docs-v4.strapi.io/dev-docs/plugins/documentation

# Documentation plugin

The Documentation plugin is useful to document the available endpoints once you created an API.

If installed, the Documentation plugin will inspect content types and routes found on all APIs in your project and any plugin specified in the configuration. The plugin will then programmatically generate documentation to match the [OpenAPI specification](https://swagger.io/specification/). The Documentation plugin generates the [paths objects](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#paths-object) and [schema objects](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#schema-object) and converts all Strapi types to [OpenAPI data types](https://swagger.io/docs/specification/data-models/data-types/).

The generated documentation can be accessed either through your application's source code or through the running application itself:
- **Source code**: The documentation is located at <br/>`src/extensions/documentation/documentation/<version>/full_documentation.json`
- **Running application**: Use the URL <br/>`<server-url>:<server-port>/documentation/<version>/openapi.json`

## Installation

To install the plugin run following command in your terminal:

</Tabs>

Once the plugin is installed, starting the application generates the API documentation.

## Swagger UI

The Documentation plugin visualizes your API using [Swagger UI](https://swagger.io/tools/swagger-ui/). To access the UI, select *Plugins > ![Documentation plugin icon](/img/assets/icons/documentation-plugin.svg) Documentation* in the main navigation of the admin panel. Then click **Open documentation** to open the Swagger UI. Using the Swagger UI you can view all of the endpoints available on your API and trigger API calls.

:::tip
Once installed, the Documentation plugin UI can be accessed at the following URL:
`<server-url>:<server-port>/documentation/<documentation-version>`
(e.g., [`localhost:1337/documentation/v1.0.0`](http://localhost:1337/documentation/v1.0.0)).
:::

### Authenticated requests

Strapi is secured by default, which means that most of your end-points require the user to be authorized. If the action has not been set to public in users and permission then you must provide your JWT. To do this, click the “Authorize” button and paste your JWT.

## Administration panel

This plugin comes with an interface that is available in your administration panel and a configuration file.

### Restrict the access to your API documentation

By default, your documentation will be accessible by anyone.

To restrict API documentation access, enable the **Restricted Access** option from the admin panel:

1. Navigate to ![Settings icon](/img/assets/icons/settings.svg) *Settings* in the main navigation of the admin panel.
2. Choose **Documentation**.
3. Toggle **Restricted Access** to `ON`.
4. Define a password in the `password` input.
5. Save the settings.

### Regenerate documentation

There are 2 ways to update the documentation after making changes to your API:

- restart your application to regenerate the version of the documentation specified in the Documentation plugin's configuration,
- or go to the Documentation plugin page and click the **regenerate** button for the documentation version you want to regenerate.

## Configuration

The Documentation plugin is initialized with the following configuration, where all properties can be altered by providing new values to the documentation plugin's configuration object in `config/plugins.js`:

```js
module.exports = {
  documentation: {
    enabled: true,
    config: {
      openapi: '3.0.0',
      info: {
        version: '1.0.0',
        title: 'DOCUMENTATION',
        description: '',
        termsOfService: 'YOUR_TERMS_OF_SERVICE_URL',
        contact: {
          name: 'TEAM',
          email: 'contact-email@something.io',
          url: 'mywebsite.io'
        },
        license: {
          name: 'Apache 2.0',
          url: 'https://www.apache.org/licenses/LICENSE-2.0.html'
        },
      },
      'x-strapi-config': {
        // Leave empty to ignore plugins during generation
        plugins: [ 'upload', 'users-permissions'],
        path: '/documentation',
      },
      servers: [{ url: 'http://localhost:1337/api', description: 'Development server' }],
      externalDocs: {
        description: 'Find out more',
        url: 'https://docs.strapi.io/developer-docs/latest/getting-started/introduction.html'
      },
      security: [ { bearerAuth: [] } ]
    }
  }
}
```

### Create a new version of the documentation

To create a new version of your documentation, update the `version` key as follows:

```js title="config/plugins.js"

module.exports = {
  documentation: {
    enabled: true,
    config: {
      info: { version: "2.0.0" },
    },
  },
};
```

### Indicate which plugins need documentation generated

If you want plugins to be included in documentation generation, they should be included in the `plugins` array on the `x-strapi-config`. By default, the array is initialized with `["upload", "users-permissions"]`.

Similarly, if you do not want plugins to be included in documentation generation, provide an empty array:

```js title="config/plugins.js"

module.exports = {
  documentation: {
    enabled: true,
    config: {
      "x-strapi-config": {
        // Default
        plugins: ["upload", "users-permissions"],
        // Custom
        plugins: ["upload"],
        // Do not generate for plugins
        plugins: [],
      },
    },
  },
};
```

## Overriding the generated documentation

### Excluding from generation

To exclude certain APIs or plugins from being generated, use the `excludeFromGeneration` found on the documentation plugin’s `override` service in your application or plugin's [`register` lifecycle](/dev-docs/api/plugins/admin-panel-api#register).

:::note
`excludeFromGeneration` gives more fine-grained control over what is generated.

For example, pluginA might create several new APIs while pluginB may only want to generate documentation for some of those APIs. In that case, pluginB could still benefit from the generated documentation it does need by excluding only what it does not need.
:::

**`excludeFromGeneration()`**

| Parameter | Type                       | Description                                              |
| --------- | -------------------------- | -------------------------------------------------------- |
| `api`       | String or Array of Strings | The name of the API/plugin, or list of names, to exclude |

```js title="Application or plugin register lifecycle"

module.exports = {
  register({ strapi }) {
    strapi
      .plugin("documentation")
      .service("override")
      .excludeFromGeneration("restaurant");
    // or several
    strapi
      .plugin("documentation")
      .service("override")
      .excludeFromGeneration(["address", "upload"]);
  }
}
```

### Providing replacement documentation

If the Documentation plugin fails to generate what you expect, it is possible to replace what has been generated.

The Documentation plugin exposes an API that allows you to replace what was generated for the following OpenAPI root level keys: `paths`, `tags`, `components` .

To provide an override, use the `registerOverride` function found on the Documentation plugin’s `override` service in your application or plugin's [`register` lifecycle](/dev-docs/api/plugins/admin-panel-api#register).

**`registerOverride()`**

| Parameter                     | Type                      | Description                                                                                                   |
| ----------------------------- | ------------------------- | ------------------------------------------------------------------------------------------------------------- |
| `override`                     | Object                    | OpenAPI object including any of the following keys paths, tags, components. Accepts JavaScript, JSON, or yaml |
| `options`                      | Object                    | Accepts `pluginOrigin` and `excludeFromGeneration`                                                               |
| `options.pluginOrigin`          | String                    | The plugin that is registering the override                                                                   |
| `options.excludeFromGeneration` | String or Array of String | The name of the API/plugin, or list of names, to exclude                                                      |

:::caution
Plugin developers providing an override should always specify the `pluginOrigin` options key. Otherwise the override will run regardless of the user’s configuration.
:::

The Documentation plugin will use the registered overrides to replace the value of common keys on the generated documentation with what the override provides. If no common keys are found, the plugin will add new keys to the generated documentation.

If the override completely replaces what the documentation generates, you can specify that generation is no longer necessary by providing the names of the APIs or plugins to exclude in the options key array `excludeFromGeneration`.

If the override should only be applied to a specific version, the override must include a value for `info.version`. Otherwise, the override will run on all documentation versions.

```js title="Application or plugin register lifecycle"

module.exports = {
  register({ strapi }) {
    if (strapi.plugin('documentation')) {
      const override = {
        // Only run this override for version 1.0.0
        info: { version: '1.0.0' },
        paths: {
          '/answer-to-everything': {
            get: {
              responses: { 200: { description: "*" }}
            }
          }
        }
      }

      strapi
        .plugin('documentation')
        .service('override')
        .registerOverride(override, {
          // Specify the origin in case the user does not want this plugin documented
          pluginOrigin: 'upload',
          // The override provides everything don't generate anything
          excludeFromGeneration: ['upload'],
        });
    }
  },
}
```

The overrides system is provided to try and simplify amending the generated documentation. It is the only way a plugin can add or modify the generated documentation.

The Documentation plugin’s configuration also accepts a `mutateDocumentation` function on `info['x-strapi-config']`. This function receives a draft state of the generated documentation that be can be mutated. It should only be applied from an application and has the final say in the OpenAPI schema.

**`mutateDocumentation()`**

| Parameter                   | Type   | Description                                                            |
| --------------------------- | ------ | ---------------------------------------------------------------------- |
| `generatedDocumentationDraft` | Object | The generated documentation with applied overrides as a mutable object |

```js title="config/plugins.js"

module.exports = {
  documentation: {
    config: {
      "x-strapi-config": {
        mutateDocumentation: (generatedDocumentationDraft) => {
          generatedDocumentationDraft.paths[
            "/answer-to-everything" // must be an existing path
          ].get.responses["200"].description = "*";
        },
      },
    },
  },
};
```



# Email
Source: https://docs-v4.strapi.io/dev-docs/plugins/email

# Email plugin

The Email plugin enables applications to send emails from a server or an external provider. The Email plugin uses the Strapi global API, meaning it can be called from anywhere inside a Strapi application. Two of the most common use cases are in the Strapi back end and in the admin panel. The following documentation describes how to use the Email plugin in a controller or service for back-end use cases and using a lifecycle hook for admin panel use cases.

:::prerequisites

The Email plugin requires a provider and a provider configuration in the `config/plugins.js` file or `config/plugins.ts` file. See the [Providers](/dev-docs/providers) documentation for detailed installation and configuration instructions.

:::

:::note
[`Sendmail`](https://www.npmjs.com/package/sendmail) is the default email provider in the Strapi Email plugin. It provides functionality for the local development environment but is not production-ready in the default configuration. For production stage applications you need to further configure `Sendmail` (refer to its [README on npm](https://www.npmjs.com/package/sendmail)) or change providers. The [Providers](/dev-docs/providers) documentation has instructions for changing providers, configuring providers, and creating a new email provider.
:::

## Sending emails with a controller or service

The Email plugin has an `email` [service](/dev-docs/backend-customization/services#services) that contains 2 functions to send emails:

* `send()` directly contains the email contents,
* `sendTemplatedEmail()` consumes data from the Content Manager to populate emails, streamlining programmatic emails.

### Using the `send()` function

To trigger an email in response to a user action add the `send()` function to a [controller](/dev-docs/backend-customization/controllers) or [service](/dev-docs/backend-customization/services). The send function has the following properties:

| Property  | Type     | Format        | Description                                           |
|-----------|----------|---------------|-------------------------------------------------------|
| `from`    | `string` | email address | If not specified, uses `defaultFrom` in `plugins.js`. |
| `to`      | `string` | email address | Required                                              |
| `cc`      | `string` | email address | Optional                                              |
| `bcc`     | `string` | email address | Optional                                              |
| `replyTo` | `string` | email address | Optional                                              |
| `subject` | `string` | -             | Required                                              |
| `text`    | `string` | -             | Either `text` or `html` is required.                  |
| `html`    | `string` | HTML          | Either `text` or `html` is required.                  |

```js title="This code example can be used in a controller or a service path: ./src/api/{api name}/controllers/{api name}.js or ./src/api/{api name}/services/{api name}.js"

  await strapi.plugins['email'].services.email.send({
    to: 'valid email address',
    from: 'your verified email address', //e.g. single sender verification in SendGrid
    cc: 'valid email address',
    bcc: 'valid email address',
    replyTo: 'valid email address',
    subject: 'The Strapi Email plugin worked successfully',
    text: 'Hello world!',
    html: 'Hello world!',
  }),
```

### Using the `sendTemplatedEmail()` function

The `sendTemplatedEmail()` function is used to compose emails from a template. The function compiles the email from the available properties and then sends the email. To use the `sendTemplatedEmail()` function, define the `emailTemplate` object and add the function to a controller or service. The function calls the `emailTemplate` object, and can optionally call the `emailOptions` and `data` objects:

| Parameter       | Description                                                                                                                                | Type     | Default |
|-----------------|--------------------------------------------------------------------------------------------------------------------------------------------|----------|---------|
| `emailOptions` <br/> Optional | Contains email addressing properties: `to`, `from`, `replyTo`, `cc`, and `bcc`                                                             | `object` | { }      |
| `emailTemplate` | Contains email content properties: `subject`, `text`, and `html` using [Lodash string templates](https://lodash.com/docs/4.17.15#template) | `object` | { }      |
| `data`  <br/> Optional          | Contains the data used to compile the templates                                                                                            | `object` | { }      |

```js title="This code example can be used in a controller or a service path: ./src/api/{api name}/controllers/{api name}.js or ./src/api/{api name}/services/{api name}.js"

const emailTemplate = {
  subject: 'Welcome <%= user.firstname %>',
  text: `Welcome to mywebsite.fr!
    Your account is now linked with: <%= user.email %>.`,
  html: `<h1>Welcome to mywebsite.fr!</h1>
    <p>Your account is now linked with: <%= user.email %>.<p>`,
};

await strapi.plugins['email'].services.email.sendTemplatedEmail(
  {
    to: user.email,
    // from: is not specified, the defaultFrom is used.
  },
    emailTemplate,
  {
    user: _.pick(user, ['username', 'email', 'firstname', 'lastname']),
  }
);
```

## Sending emails with a lifecycle hook

 To trigger an email based on administrator actions in the admin panel use [lifecycle hooks](/dev-docs/backend-customization/models#lifecycle-hooks) and the [`send()` function](#using-the-send-function). For example, to send an email each time a new content entry is added in the Content Manager use the `afterCreate` lifecycle hook:

</Tabs>



# GraphQL
Source: https://docs-v4.strapi.io/dev-docs/plugins/graphql

# GraphQL plugin

By default Strapi create [REST endpoints](/dev-docs/api/rest#endpoints) for each of your content-types. With the GraphQL plugin, you will be able to add a GraphQL endpoint to fetch and mutate your content.

:::strapi Looking for the GraphQL API documentation?
The [GraphQL API reference](/dev-docs/api/graphql) describes queries, mutations and parameters you can use to interact with your API using Strapi's GraphQL plugin.
:::

## Usage

To get started with GraphQL in your application, please install the plugin first. To do that, open your terminal and run the following command:

</Tabs>

Then, start your app and open your browser at [http://localhost:1337/graphql](http://localhost:1337/graphql). You should now be able to access the **GraphQL Playground** that will help you to write your GraphQL queries and mutations.

:::note
- The GraphQL Playground is enabled by default for both the development and staging environments but disabled in production environments. Set the `playgroundAlways` configuration option to `true` to also enable the GraphQL Playground in production environments (see [plugins configuration documentation](/dev-docs/configurations/plugins#graphql-configuration)).
- If the GraphQL Playground does not appear to be accessible, please ensure that the GraphQL plugin is enabled: `graphql: true` should be added to the `config/plugins.js|ts` configuration file; if not, edit the file to add this line (see [plugins configuration](/dev-docs/configurations/plugins) for more details). 
:::

## Configuration

Plugins configuration are defined in the `config/plugins.js|ts` file. This configuration file can include a `graphql.config` object to define specific configurations for the GraphQL plugin (see [plugins configuration documentation](/dev-docs/configurations/plugins#graphql-configuration)).

[Apollo Server](https://www.apollographql.com/docs/apollo-server/api/apollo-server/#apolloserver) options can be set with the `graphql.config.apolloServer` [configuration object](/dev-docs/configurations/plugins#graphql-configuration). Apollo Server options can be used for instance to enable the [tracing feature](https://www.apollographql.com/docs/federation/metrics/), which is supported by the GraphQL playground to track the response time of each part of your query. From `Apollo Server` version 3.9 default cache option is `cache: 'bounded'`. You can change it in the `apolloServer` configuration. For more information visit [Apollo Server Docs](https://www.apollographql.com/docs/apollo-server/performance/cache-backends/).

:::caution
The maximum number of items returned by the response is limited to 100 by default. This value can be changed using the `defaultLimit` configuration option, but should only be changed after careful consideration: a large query can cause a DDoS (Distributed Denial of Service) and may cause abnormal load on your Strapi server, as well as your database server.
:::

</Tabs>

## Shadow CRUD

To simplify and automate the build of the GraphQL schema, we introduced the Shadow CRUD feature. It automatically generates the type definitions, queries, mutations and resolvers based on your models.

**Example:**

If you've generated an API called `Document` using [the interactive `strapi generate` CLI](/dev-docs/cli#strapi-generate) or the administration panel, your model looks like this:

```json title="./src/api/[api-name]/content-types/document/schema.json"

{
  "kind": "collectionType",
  "collectionName": "documents",
  "info": {
    "singularName": "document",
    "pluralName": "documents",
    "displayName": "document",
    "name": "document"
  },
  "options": {
    "draftAndPublish": true
  },
  "pluginOptions": {},
  "attributes": {
    "name": {
      "type": "string"
    },
    "description": {
      "type": "richtext"
    },
    "locked": {
      "type": "boolean"
    }
  }
}
```

<details> 
<summary>Generated GraphQL type and queries</summary>

```graphql
# Document's Type definition
input DocumentFiltersInput {
  name: StringFilterInput
  description: StringFilterInput
  locked: BooleanFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  and: [DocumentFiltersInput]
  or: [DocumentFiltersInput]
  not: DocumentFiltersInput
}

input DocumentInput {
  name: String
  description: String
  locked: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type Document {
  name: String
  description: String
  locked: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type DocumentEntity {
  id: ID
  attributes: Document
}

type DocumentEntityResponse {
  data: DocumentEntity
}

type DocumentEntityResponseCollection {
  data: [DocumentEntity!]!
  meta: ResponseCollectionMeta!
}

type DocumentRelationResponseCollection {
  data: [DocumentEntity!]!
}

# Queries to retrieve one or multiple restaurants.
type Query  {
  document(id: ID): DocumentEntityResponse
  documents(
    filters: DocumentFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
    publicationState: PublicationState = LIVE
):DocumentEntityResponseCollection
}

# Mutations to create, update or delete a restaurant.
type Mutation {
  createDocument(data: DocumentInput!): DocumentEntityResponse
  updateDocument(id: ID!, data: DocumentInput!): DocumentEntityResponse
  deleteDocument(id: ID!): DocumentEntityResponse
}
```

</details>

## Customization

Strapi provides a programmatic API to customize GraphQL, which allows:

* disabling some operations for the [Shadow CRUD](#shadow-crud)
* [using getters](#using-getters) to return information about allowed operations
* registering and using an `extension` object to [extend the existing schema](#extending-the-schema) (e.g. extend types or define custom resolvers, policies and middlewares)

<details> 
<summary>Example of GraphQL customizations</summary>

</Tabs>

</details>

### Disabling operations in the Shadow CRUD

The `extension` [service](/dev-docs/backend-customization/services) provided with the GraphQL plugin exposes functions that can be used to disable operations on Content-Types:

| Content-type function | Description                                    | Argument type    | Possible argument values |
| --------------------  | ---------------------------------------------- | ---------------- | ---------------------------------------------------------------------------------------------------------- |
| `disable()`           | Fully disable the Content-Type                 | -                | -                                                                                                          |
| `disableQueries()`    | Only disable queries for the Content-Type      | -                | -                                                                                                          |
| `disableMutations()`  | Only disable mutations for the Content-Type    | -                | -                                                                                                          |
| `disableAction()`     | Disable a specific action for the Content-Type | String           | One value from the list:<ul><li>`create`</li><li>`find`</li><li>`findOne`</li><li>`update`</li><li>`delete`</li></ul>   |
| `disableActions()`    | Disable specific actions for the Content-Type  | Array of Strings | Multiple values from the list: <ul><li>`create`</li><li>`find`</li><li>`findOne`</li><li>`update`</li><li>`delete`</li></ul>  |

Actions can also be disabled at the field level, with the following functions:

| Field function     | Description                      |
| ------------------ | -------------------------------- |
| `disable()`        | Fully disable the field          |
| `disableOutput()`  | Disable the output on a field    |
| `disableInput()`   | Disable the input on a field     |
| `disableFilters()` | Disable filters input on a field |

**Examples:**

```js
// Disable the 'find' operation on the 'restaurant' content-type in the 'restaurant' API
strapi
  .plugin('graphql')
  .service('extension')
  .shadowCRUD('api::restaurant.restaurant')
  .disableAction('find')

// Disable the 'name' field on the 'document' content-type in the 'document' API
strapi
  .plugin('graphql')
  .service('extension')
  .shadowCRUD('api::document.document')
  .field('name')
  .disable()
```

### Using getters

The following getters can be used to retrieve information about operations allowed on content-types:

| Content-type getter        | Description                                                       | Argument type | Possible argument values                                                                                              |
| -------------------------- | ----------------------------------------------------------------- | ------------- | --------------------------------------------------------------------------------------------------------------------- |
| `isEnabled()`              | Returns whether a content-type is enabled                         | -             | -                                                                                                                     |
| `isDisabled()`             | Returns whether a content-type is disabled                        | -             | -                                                                                                                     |
| `areQueriesEnabled()`      | Returns whether queries are enabled on a content-type             | -             | -                                                                                                                     |
| `areQueriesDisabled()`     | Returns whether queries are disabled on a content-type            | -             | -                                                                                                                     |
| `areMutationsEnabled()`    | Returns whether mutations are enabled on a content-type           | -             | -                                                                                                                     |
| `areMutationsDisabled()`   | Returns whether mutations are disabled on a content-type          | -             | -                                                                                                                     |
| `isActionEnabled(action)`  | Returns whether the passed `action` is enabled on a content-type  | String        | One value from the list:<ul><li>`create`</li><li>`find`</li><li>`findOne`</li><li>`update`</li><li>`delete`</li></ul> |
| `isActionDisabled(action)` | Returns whether the passed `action` is disabled on a content-type | String        | One value from the list:<ul><li>`create`</li><li>`find`</li><li>`findOne`</li><li>`update`</li><li>`delete`</li></ul> |

The following getters can be used to retrieve information about operations allowed on fields:

| Field getter          | Description                                   |
| --------------------- | --------------------------------------------- |
| `isEnabled()`         | Returns whether a field is enabled            |
| `isDisabled()`        | Returns whether a field is disabled           |
| `hasInputEnabled()`   | Returns whether a field has input enabled     |
| `hasOutputEnabled()`  | Returns whether a field has output enabled    |
| `hasFiltersEnabled()` | Returns whether a field has filtering enabled |

### Extending the schema

The schema generated by the Content API can be extended by registering an extension.

This extension, defined either as an object or a function returning an object, will be used by the `use()` function exposed by the `extension` [service](/dev-docs/backend-customization/services) provided with the GraphQL plugin.

The object describing the extension accepts the following parameters:

| Parameter         | Type   | Description                                                                                  |
| ----------------- | ------ | -------------------------------------------------------------------------------------------- |
| `types`           | Array  | Allows extending the schema types using [Nexus](https://nexusjs.org/)-based type definitions |
| `typeDefs`        | String | Allows extending the schema types using [GraphQL SDL](https://graphql.org/learn/schema/)     |
| `plugins`         | Array  | Allows extending the schema using Nexus [plugins](https://nexusjs.org/docs/plugins)          |
| `resolvers`       | Object | Defines custom resolvers                                                                     |
| `resolversConfig` | Object | Defines [configuration options for the resolvers](#custom-configuration-for-resolvers), such as [authorization](#authorization-configuration), [policies](#policies) and [middlewares](#middlewares) |

:::tip
The `types` and `plugins` parameters are based on [Nexus](https://nexusjs.org/). To use them, register the extension as a function that takes `nexus` as a parameter:

<details>
<summary> Example: </summary>

</Tabs>

</details>
:::

#### Custom configuration for resolvers

A resolver is a GraphQL query or mutation handler (i.e. a function, or a collection of functions, that generate(s) a response for a GraphQL query or mutation). Each field has a default resolver.

When [extending the GraphQL schema](#extending-the-schema), the `resolversConfig` key can be used to define a custom configuration for a resolver, which can include:

* [authorization configuration](#authorization-configuration) with the `auth` key
* [policies with the `policies`](#policies) key
* and [middlewares with the `middlewares`](#middlewares) key

##### Authorization configuration

By default, the authorization of a GraphQL request is handled by the registered authorization strategy that can be either [API token](/dev-docs/configurations/api-tokens) or through the [Users & Permissions plugin](#usage-with-the-users--permissions-plugin). The Users & Permissions plugin offers a more granular control.

<details>
<summary> Authorization with the Users & Permissions plugin</summary>

With the Users & Permissions plugin, a GraphQL request is allowed if the appropriate permissions are given.

For instance, if a 'Category' content-type exists and is queried through GraphQL with the `Query.categories` handler, the request is allowed if the appropriate `find` permission for the 'Categories' content-type is given.

To query a single category, which is done with the `Query.category` handler, the request is allowed if the the `findOne` permission is given.

Please refer to the user guide on how to [define permissions with the Users & Permissions plugin](/user-docs/users-roles-permissions/configuring-administrator-roles#editing-a-role).
</details>

To change how the authorization is configured, use the resolver configuration defined at `resolversConfig.[MyResolverName]`. The authorization can be configured:

* either with `auth: false` to fully bypass the authorization system and allow all requests,
* or with a `scope` attribute that accepts an array of strings to define the permissions required to authorize the request.

<details>
<summary> Examples of authorization configuration</summary>

</Tabs>
</details>

##### Policies

[Policies](/dev-docs/backend-customization/policies) can be applied to a GraphQL resolver through the `resolversConfig.[MyResolverName].policies` key.

The `policies` key is an array accepting a list of policies, each item in this list being either a reference to an already registered policy or an implementation that is passed directly (see [policies configuration documentation](/dev-docs/backend-customization/routes#policies)).

Policies directly implemented in `resolversConfig` are functions that take a `context` object and the `strapi` instance as arguments.
The `context` object gives access to:

* the `parent`, `args`, `context` and `info` arguments of the GraphQL resolver,
* Koa's [context](https://koajs.com/#context) with `context.http` and [state](https://koajs.com/#ctx-state) with `context.state`.

<details>
<summary> Example of GraphQL policies applied to resolvers</summary>

</Tabs>

</details>

##### Middlewares

[Middlewares](/dev-docs/backend-customization/middlewares) can be applied to a GraphQL resolver through the `resolversConfig.[MyResolverName].middlewares` key. The only difference between the GraphQL and REST implementations is that the `config` key becomes `options`.  

The `middlewares` key is an array accepting a list of middlewares, each item in this list being either a reference to an already registered middleware or an implementation that is passed directly (see [middlewares configuration documentation](/dev-docs/backend-customization/routes#middlewares)).

Middlewares directly implemented in `resolversConfig` can take the GraphQL resolver's [`parent`, `args`, `context` and `info` objects](https://www.apollographql.com/docs/apollo-server/data/resolvers/#resolver-arguments) as arguments.

:::tip
Middlewares with GraphQL can even act on nested resolvers, which offer a more granular control than with REST.
:::

<details>
<summary> Examples of GraphQL middlewares applied to a resolver</summary>

</Tabs>

</details>

## Usage with the Users & Permissions plugin

The [Users & Permissions plugin](/dev-docs/plugins/users-permissions) is an optional plugin that allows protecting the API with a full authentication process.

### Registration

Usually you need to sign up or register before being recognized as a user then perform authorized requests.

You should see a new user is created in the `Users` collection type in your Strapi admin panel.

### Authentication

To perform authorized requests, you must first get a JWT:

Then on each request, send along an `Authorization` header in the form of `{ "Authorization": "Bearer YOUR_JWT_GOES_HERE" }`. This can be set in the HTTP Headers section of your GraphQL Playground.

## API tokens

To use API tokens for authentication, pass the token in the `Authorization` header using the format `Bearer your-api-token`.

:::note
Using API tokens in the the GraphQL playground requires adding the authorization header with your token in the `HTTP HEADERS` tab:

```http
{
  "Authorization" : "Bearer <TOKEN>"
}
```

Replace `<TOKEN>` with your API token generated in the Strapi Admin panel.
:::

## Security

GraphQL is a query language allowing users to use a broader panel of inputs than traditional REST APIs. GraphQL APIs are inherently prone to security risks, such as credential leakage and denial of service attacks, that can be reduced by taking appropriate precautions.

### Disable playground in production

In production environments, disabling the GraphQL Playground is recommended.
If you haven't edited the [configuration file](/dev-docs/configurations/plugins#graphql-configuration), it is already disabled in production by default.

### Limit max depth and complexity

A malicious user could send a query with a very high depth, which could overload your server. Use the `depthLimit` [configuration parameter](/dev-docs/configurations/plugins#graphql-configuration) to limit the maximum number of nested fields that can be queried in a single request. By default, `depthLimit` is set to 10 but can be set to a higher value during testing and development.

:::tip
To increase GraphQL security even further, 3rd-party tools can be used. See the guide about [using GraphQL Armor with Strapi on the forum](https://forum.strapi.io/t/use-graphql-armor-with-strapi/).
:::



# How to pass data from server to admin panel with a Strapi plugin
Source: https://docs-v4.strapi.io/dev-docs/plugins/guides/pass-data-from-server-to-admin

# How to pass data from server to admin panel with a Strapi plugin

Plugins in Strapi help you add additional features to the existing core set of built-in features. They can be used to extend the API, customize the admin panel, and more. In many cases, you would like your plugin to store data for later retrieval, and to access this data.

When [developing a Strapi plugin](/dev-docs/plugins/developing-plugins) you might want to pass data from the `/server` to the `/admin` folder. Within the `/server` folder you have access to the Strapi object and can do database queries whereas in the `/admin` folder you can't.

Strapi is **headless** . The admin panel is completely separate from the server.

Passing data from the `/server` to the `/admin` folder can be done using the admin panel's Axios instance:

```mermaid
graph LR
    A{Server} -->|Axios instance| B{Admin Panel}
    B --> A
```

To pass data from the `/server` to `/admin` folder you would first [create a custom admin route](#create-a-custom-admin-route) and then [get the data returned in the admin panel](#get-the-data-in-the-admin-panel).

## Create a custom admin route

Admin routes are like the routes that you would have for any controller, except that the `type: 'admin'` declaration hides them from the general API router, and allows you to access them from the admin panel.

The following code will declare a custom admin route for the `my-plugin` plugin:

```js title="/my-plugin/server/routes/index.js"
module.exports = {
  'pass-data': {
    type: 'admin',
    routes: [
      {
        method: 'GET',
        path: '/pass-data',
        handler: 'myPluginContentType.index',
        config: {
          policies: [],
          auth: false,
        },
      },
    ]
  }
  // ...
};
```

This route will call the `index` method of the `myPluginContentType` controller when you send a GET request to the `/my-plugin/pass-data` URL endpoint.

Let's create a basic custom controller that simply returns a simple text:

```js title="/my-plugin/server/controllers/my-plugin-content-type.js"
'use strict';

module.exports = {
  async index(ctx) {
    ctx.body = 'You are in the my-plugin-content-type controller!';
  }
}
```

This means that when sending a GET request to the `/my-plugin/pass-data` URL endpoint, you should get the `You are in the my-plugin-content-type controller!` text returned with the response.

## Get the data in the admin panel

Any request sent from an admin panel component to the endpoint for which we defined the custom route `/my-plugin/pass-data` should now return the text message returned by the custom controller.

So for instance, if you create an `/admin/src/api/foobar.js` file and copy and paste the following code example:

```js title="/my-plugin/admin/src/api/foobar.js"

const foobarRequests = {
  getFoobar: async () => {
    const data = await axios.get(`/my-plugin/pass-data`);
    return data;
  },
};

```

You will be able to use `foobarRequests.getFoobar()` in the code of an admin panel component and have it return the `You are in the my-plugin-content-type controller!` text with the data.

For instance, within a React component, you could use `useEffect` to get the data after the component initializes:

```js title="/my-plugin/admin/src/components/MyComponent/index.js"

const [foobar, setFoobar] = useState([]);

// …
useEffect(() => {
  foobarRequests.getFoobar().then(res => {
    setSchemas(res.data);
  });
}, [setFoobar]);
// …
```

This would set the `You are in the my-plugin-content-type controller!` text within the `foobar` data of the component's state.



# How to store and access data from a Strapi plugin
Source: https://docs-v4.strapi.io/dev-docs/plugins/guides/store-and-access-data

# How to store and access data from a Strapi plugin

[Plugins](/dev-docs/plugins/developing-plugins) in Strapi help you add additional features to the existing core set of built-in features. They can be used to extend the API, customize the admin panel, and more. In many cases, you would like your plugin to store data for later retrieval, and to access this data.

To store data with a Strapi plugin, use a plugin content-type. Plugin content-types work exactly like other [content-types](/dev-docs/backend-customization/models). Once the content-type is [created](#create-a-content-type-for-your-plugin), you can start [interacting with the data](#interact-with-data-from-the-plugin).

## Create a content-type for your plugin

To create a content-type with the CLI generator, run the following command in a terminal:

</Tabs>

The generator CLI is interactive and asks a few questions about the content-type and the attributes it will contain. Answer the first questions, then for the `Where do you want to add this model?` question, choose the `Add model to existing plugin` option and type the name of the related plugin when asked.

<figure style={{width: '100%', margin: '0' }}>
  <img src="/img/assets/development/generate-plugin-content-type.png" alt="Generating a content-type plugin with the CLI" />
  <em><figcaption style={{fontSize: '12px'}}>The <code>strapi generate content-type</code> CLI generator is used to create a basic content-type for a plugin.</figcaption></em>
</figure>

<br />

The CLI will generate some code required to use your plugin, which includes the following:

- the [content-type schema](/dev-docs/backend-customization/models#model-schema)
- and a basic [controller](/dev-docs/backend-customization/controllers), [service](/dev-docs/backend-customization/services), and [route](/dev-docs/backend-customization/routes) for the content-type

:::tip
You may want to create the whole structure of your content-types either entirely with the CLI generator or by directly creating and editing `schema.json` files. We recommend you first create a simple content-type with the CLI generator and then leverage the [Content-Type Builder](/user-docs/content-type-builder) in the admin panel to edit your content-type.

If your content-type is not visible in the admin panel, you might need to set the `content-manager.visible` and `content-type-builder.visible` parameters to `true` in the `pluginOptions` object of the content-type schema:

<details>
<summary>Making a plugin content-type visible in the admin panel:</summary>

The following highlighted lines in an example `schema.json` file show how to make a plugin content-type visible to the Content-Type Builder and Content-Manager:

```json title="/server/content-types/my-plugin-content-type/schema.json" {13-20} showLineNumbers
{
  "kind": "collectionType",
  "collectionName": "my_plugin_content_types",
  "info": {
    "singularName": "my-plugin-content-type",
    "pluralName": "my-plugin-content-types",
    "displayName": "My Plugin Content-Type"
  },
  "options": {
    "draftAndPublish": false,
    "comment": ""
  },
  "pluginOptions": {
    "content-manager": {
      "visible": true
    },
    "content-type-builder": {
      "visible": true
    }
  },
  "attributes": {
    "name": {
      "type": "string"
    }
  }
}

```

</details>
:::

### Ensure plugin content-types are imported

The CLI generator might not have imported all the related content-type files for your plugin, so you might have to make the following adjustments after the `strapi generate content-type` CLI command has finished running:

1. In the `/server/index.js` file, import the content-types:

  ```js {7,22} showLineNumbers title="/server/index.js"
  'use strict';

  const register = require('./register');
  const bootstrap = require('./bootstrap');
  const destroy = require('./destroy');
  const config = require('./config');
  const contentTypes = require('./content-types');
  const controllers = require('./controllers');
  const routes = require('./routes');
  const middlewares = require('./middlewares');
  const policies = require('./policies');
  const services = require('./services');

  module.exports = {
    register,
    bootstrap,
    destroy,
    config,
    controllers,
    routes,
    services,
    contentTypes,
    policies,
    middlewares,
  };

  ```

2. In the `/server/content-types/index.js` file, import the content-type folder:

  ```js title="/server/content-types/index.js"
  'use strict';

  module.exports = {
    // In the line below, replace my-plugin-content-type
    // with the actual name and folder path of your content type
    "my-plugin-content-type": require('./my-plugin-content-type'),
  };
  ```

3. Ensure that the `/server/content-types/[your-content-type-name]` folder contains not only the `schema.json` file generated by the CLI, but also an `index.js` file that exports the content-type with the following code:

  ```js title="/server/content-types/my-plugin-content-type/index.js
  'use strict';

  const schema = require('./schema');

  module.exports = {
    schema,
  };
  ```

## Interact with data from the plugin

Once you have created a content-type for your plugin, you can create, read, update, and delete data.

:::note
A plugin can only interact with data from the `/server` folder. If you need to update data from the admin panel, please refer to the [passing data guide](/dev-docs/plugins/guides/pass-data-from-server-to-admin).
:::

To create, read, update, and delete data, you can use either the [Entity Service API](/dev-docs/api/entity-service) or the [Query Engine API](/dev-docs/api/query-engine). While it's recommended to use the Entity Service API, especially if you need access to components or dynamic zones, the Query Engine API is useful if you need unrestricted access to the underlying database.

Use the `plugin::your-plugin-slug.the-plugin-content-type-name` syntax for content-type identifiers in Entity Service and Query Engine API queries.

**Example:**

Here is how to find all the entries for the `my-plugin-content-type` collection type created for a plugin called `my-plugin`:

```js
// Using the Entity Service API
let data = await strapi.entityService.findMany('plugin::my-plugin.my-plugin-content-type');

// Using the Query Engine API
let data = await strapi.db.query('plugin::my-plugin.my-plugin-content-type').findMany();
````

:::tip
You can access the database via the `strapi` object which can be found in `middlewares`, `policies`, `controllers`, `services`, as well as from the `register`, `boostrap`, `destroy` lifecycle functions.
:::



# How to use the Plugin CLI to build and publish a Strapi plugin
Source: https://docs-v4.strapi.io/dev-docs/plugins/guides/use-the-plugin-cli

# How to use the Plugin CLI to create and publish a Strapi plugin

:::caution
The Plugin CLI is currently experimental.
:::

The Plugin CLI is set of commands orientated around developing plugins to use them as local plugins or to publish them on NPM and/or submit them to the Marketplace.

As opposed to the `strapi generate plugin` command (see [plugin creation and setup](/dev-docs/plugins/development/create-a-plugin)) you do not need to set up a Strapi project to use the Plugin CLI.

The present guide covers creating a plugin from scratch, linking it to an existing Strapi project, and publishing the plugin. If you already have an existing plugin, you can instead retrofit the plugin setup to utilise the Plugin CLI commands (please refer to the [Plugin CLI reference](/dev-docs/plugins/development/plugin-cli) for a full list of available commands).

## Getting started with the Plugin CLI

:::note
This guide assumes you want to develop a plugin external to your Strapi project. However, the steps largely remain the same if you want to develop a plugin within your existing project. If you are not [using a monorepo](#working-with-the-plugin-cli-in-a-monorepo-environment) the steps are exactly the same.
:::

### Creating the plugin

To create your plugin, ensure you are in the parent directory of where you want it to be created and run the following command:

</Tabs>

The path `my-strapi-plugin` can be replaced with whatever you want to call your plugin, including the path to where it should be created (e.g., `code/strapi-plugins/my-new-strapi-plugin`).

You will be ran through a series of prompts to help you setup your plugin. If you selected yes to all options the final structure will be similar to the default [plugin structure](/dev-docs/plugins/development/plugin-structure).

### Linking the plugin to your project

Once you created your plugin, you will want to register it with the [yalc](https://github.com/wclr/yalc) repository (it's local to your machine). To do this, run the following command:

</Tabs>

This will then produce an output explaing how to link your plugin to your Strapi project. Open a new terminal window to do the next steps:

</Tabs>

:::note
In the above examples we use the name of the plugin when linking it to the project. This is the name of the package, not the name of the folder.
:::

Because this plugin is installed via `node_modules` you won't need to explicity add it to your `plugins` [configuration file](/dev-docs/configurations/plugins), so running the [`develop command`](../../cli.md#strapi-develop) will automatically pick up your plugin. However, to improve your experience we recommend you run Strapi with the `--watch-admin` flag so that your admin panel is automatically rebuilt when you make changes to your plugin:

</Tabs>

You are now ready to develop your plugin how you see fit! If you are making server changes, you will need to restart your server for them to take effect.

### Building the plugin for publishing

When you are ready to publish your plugin, you will need to build it. To do this, run the following command:

</Tabs>

The above commands will not only build the plugin, but also verify that the output is valid and ready to be published. You can then publish your plugin to NPM as you would any other package.

## Working with the plugin CLI in a monorepo environment

If you are working with a monorepo environment to develop your plugin, you don't need to use the `link-watch` command because the monorepo workspace setup will handle the symlink. You can use the `watch` command instead.

However, if you are writing admin code, you might add an `alias` that targets the source code of your plugin to make it easier to work with within the context of the admin panel:

```ts

  config.resolve.alias = {
    ...config.resolve.alias,
    "my-strapi-plugin": path.resolve(
      __dirname,
      // We've assumed the plugin is local.
      "../plugins/my-strapi-plugin/admin/src"
    ),
  };

  return config;
};
```

:::caution
Because the server looks at the `strapi-server.js` file to import your plugin code, you must use the `watch` command otherwise the code will not be transpiled and the server will not be able to find your plugin.
:::



# Internationalization (i18n)
Source: https://docs-v4.strapi.io/dev-docs/plugins/i18n

# 🌍 Internationalization (i18n) plugin

The Internationalization (i18n) plugin allows Strapi users to create, manage and distribute localized content in different languages, called "locales". For more information about the concept of internationalization, please refer to the
[W3C definition](https://www.w3.org/International/questions/qa-i18n.en#i18n).

The i18n plugin:

- allows admin panel users to create several localized versions of their content (see [user guide](/user-docs/content-manager/translating-content))
- allows developers to build localized projects by fetching and consuming the right content depending on the country/language of the audience.

:::note
The i18n plugin does not automatically translate the users' content nor adapt the admin interface to languages specificities (e.g. displaying the admin panel in Right To Left format).
:::

## Installation

:::prerequisites
The Internationalization plugin is installed by default on all Strapi applications running on version 3.6.0 or higher. For lower versions, a migration is needed (see [Update Strapi version](/dev-docs/update-version)), as well as a manual installation of the plugin.
:::

The plugin can be installed:

- [from the Marketplace](/user-docs/plugins/installing-plugins-via-marketplace),
- or using the Terminal, by running one of the following commands:

</Tabs>

### Configuration of the default locale

A `STRAPI_PLUGIN_I18N_INIT_LOCALE_CODE` [environment variable](/dev-docs/configurations/environment#strapi-s-environment-variables) can be configured to set the default locale for your environment. The value used for this variable should be an ISO country code (see [full list of available locales](https://github.com/strapi/strapi/blob/v4.0.0/packages/plugins/i18n/server/constants/iso-locales.json)).

This is useful when a Strapi application is deployed in production, with the i18n plugin installed and enabled for your content types the first time. On a fresh i18n plugin installation, `en` is set as default locale. If the database does not contain any locale, and no `STRAPI_PLUGIN_I18N_INIT_LOCALE_CODE` is set for the environment, all entities of the content types, which have localization enabled, will be automatically migrated to the `en` locale.

## Usage with the REST API

The i18n plugin adds new features to the [REST API](/dev-docs/api/rest):

- a new [`locale`](#getting-localized-entries-with-the-locale-parameter) parameter to fetch content only for a specified locale
- the ability to create a localized entry, either [from scratch](#creating-a-new-localized-entry) or [for an existing localized entry](#creating-a-localization-for-an-existing-entry)

### Getting localized entries with the `locale` parameter

The `locale` [API parameter](/dev-docs/api/rest/filters-locale-publication) can be used to fetch entries only for a specified locale. It takes a locale code as value (see [full list of available locales](https://github.com/strapi/strapi/blob/v4.0.0/packages/plugins/i18n/server/constants/iso-locales.json)).

:::tip
To fetch content for a locale, make sure it has been already [added to Strapi in the admin panel](/user-docs/settings/internationalization).
:::

The format for a GET request is the following:

Use `all` as a value for the locale code, as in `http://localhost:1337/api/restaurants?locale=all`, to fetch entries for all locales that have been configured in the admin panel.

If the `locale` parameter isn't defined, it will be set to the default locale. `en` is the default locale when the i18n plugin is installed, so by default a GET request to `http://localhost:1337/api/restaurants` will return the same response as a request to `http://localhost:1337/api/restaurants?locale=en`.

:::tip
Another locale can be [set as the default locale](/user-docs/settings/internationalization) in the admin panel.
:::

When the i18n plugin is installed, the response to requests can include fields that are specific to internationalization:

- The `locale` (string) field is always included, it's the locale code for the content entry.

- The `localizations` (object) can be included if specifically requested by appending `?populate=localizations` to the URL (see [relations population documentation](/dev-docs/api/rest/populate-select#population). It includes a `data` array with a list of objects, each of them including the `id` and `attributes` of the localization.

</ApiCall>

In the example response above:

- restaurant with `"id": 4` is a French (`"locale": "fr"`) localization of the existing restaurant with `"id": 3` (created for the default `en` locale).
- restaurant with `"id": "8"` was created from scratch using the API, passing the `locale: fr` in the request body (see [creating a new localized entry](#creating-a-new-localized-entry)).

### Creating a new localized entry

To create a localized entry from scratch, send a POST request to the Content API.

If no locale has been passed in the request body, the entry is created using the default locale for the application:

</ApiCall>

To create a localized entry for a locale different from the default one, add the `locale` attribute to the body of the POST request:

</ApiCall>

### Creating a localization for an existing entry

To create another localization for an existing localized entry, send a POST request to the appropriate URL depending on the type of content:

| Content-Type    | Request URL format                           |
| --------------- | -------------------------------------------- |
| Collection type | `POST /api/{content-type}/:id/localizations` |
| Single type     | `POST /api/{content-type}/localizations`     |

When creating a localization for existing localized entries, the body of the POST request can only accept localized fields.

:::tip
The Content-Type should have the [`createLocalization` permission](/user-docs/users-roles-permissions/configuring-administrator-roles#collection-and-single-types) enabled, otherwise the POST request will return a `403: Forbidden` status.
:::

#### Creating a localization for a collection type

When sending a POST request to a collection type, Strapi will:

1. use the `id` as a base entry for the non-localized fields and copy them in the new entry
2. then create a new entry for the given locale and link it with the base entry.

This request:

1. creates a new entry in `en`
2. links the created entry with `restaurant:8` (they will share the same `localizations` object)
3. copies every non-localized fields from `restaurant:8` into the new entry and keeps the localized fields from the request's body

</ApiCall>

#### Creating a localization for a single type

</ApiCall>

### Updating an entry

To update an existing localized entry, send a `PUT` request to the appropriate URL depending on the type of content:

| Content-Type    | Request URL format                           |
| --------------- | -------------------------------------------- |
| Collection type | `PUT /api/{localized-content-type}/:id` |
| Single type     | `PUT /api/{localized-content-type}/?locale={locale}` |

When updating a localization for existing localized entries, the body of the `PUT` request can only accept localized fields.

:::tip
It is not possible to change the locale of an existing localized entry. When updating a localized entry, if you set a `locale` attribute in the request body it will be ignored.
:::

## Usage with the GraphQL plugin

The i18n plugin adds new features to the [GraphQL plugin](/dev-docs/plugins/graphql):

- The `locale` and `localizations` fields are added to the [GraphQL](https://graphql.org/) schema.
- The GraphQL [query API](/dev-docs/api/graphql) can be used to:
  - [query with the `locale` argument](/dev-docs/plugins/i18n#usage-with-the-graphql-plugin) on collection types and single types
  - [create new localizations with a mutation](/dev-docs/plugins/i18n#creating-new-localized-entries-with-graphql) for collection types and single types
  - [update](/dev-docs/plugins/i18n#updating-a-localized-single-type-with-graphql) and [delete](/dev-docs/plugins/i18n#deleting-a-localization-for-a-single-type-with-graphql) a localization with a mutation on single types

### Getting localized entries with GraphQL

Queries can use the `locale` argument to fetch entries only for a specified locale.

:::tip
To fetch entries for all locales, use `locale: "all"` in the query.
:::

#### Fetching a collection type

</ApiCall>

#### Fetching a single type

</ApiCall>

### Creating new localized entries with GraphQL

The `locale` field can be passed in the `data` object of the mutation to create a localized entry for this specific locale (for more information, see [create a new entry with the GraphQL plugin](/dev-docs/api/graphql#create-a-new-entry)).

#### Creating a new localization for a collection type

</ApiCall>

#### Creating a new localization for a single type

</ApiCall>

### Updating a localized single type with GraphQL

A `locale` argument can be passed in the mutation to update content for a given locale (for more information, see [update an existing entry with the GraphQL plugin](/dev-docs/api/graphql#update-an-existing-entry)).

Currently, it is not possible to change the locale of an existing localized entry. If you set a `locale` field in the `data` object of the mutation, it will be ignored.

</ApiCall>

### Deleting a localization for a single type with GraphQL

Pass the `locale` argument in the mutation to delete a specific localization for a single type:

The response returns the entry that has just been deleted.

</ApiCall>



# Sentry
Source: https://docs-v4.strapi.io/dev-docs/plugins/sentry

# Sentry plugin

This plugin enables you to track errors in your Strapi application using [Sentry](https://sentry.io/welcome/).

By using the Sentry plugin you can:

* Initialize a Sentry instance upon startup of a Strapi application
* Send Strapi application errors as events to Sentry
* Include additional metadata in Sentry events to assist in debugging
* Expose a [global Sentry service](#global-sentry-service-access)

Begin by first [installing](#installation) the Sentry plugin, and then [configuring](#configuration) the plugin to enable your Strapi application to send events to the Sentry instance.

## Installation

Install the Sentry plugin by adding the dependency to your Strapi application as follows:

</Tabs>

## Configuration

Create or edit your `./config/plugins.js` file to configure the Sentry plugin. The following properties are available:

| Property | Type | Default Value | Description |
| -------- | ---- | ------------- |------------ |
| `dsn` | string | `null` | Your Sentry [data source name](https://docs.sentry.io/product/sentry-basics/dsn-explainer/). |
| `sendMetadata` | boolean | `true` | Whether the plugin should attach additional information (e.g. OS, browser, etc.) to the events sent to Sentry. |
| `init` | object | `{}` | A config object that is passed directly to Sentry during initialization. See the official [Sentry documentation](https://docs.sentry.io/platforms/node/configuration/options/) for all available options. |

An example configuration:

</Tabs>

### Environment configuration

Using the [`env` utility](/dev-docs/configurations/environment#configuration-using-environment-variables), you can enable or disable the Sentry plugin based on the environment. For example, to only enable the plugin in your `production` environment:

</Tabs>

## Global Sentry service access

After installing and configuring the plugin, you can access a Sentry service in your Strapi application as follows:

```js
const sentryService = strapi.plugin('sentry').service('sentry');
```

This service exposes the following methods:

| Method | Description | Parameters |
| ------ | ----------- | ---------- |
| `sendError()` | Manually send errors to Sentry. | <ul><li><code>error</code>: The error to be sent.</li><li><code>configureScope</code>: Optional. Enables you to customize the error event.</li></ul> See the official [Sentry documentation](https://docs.sentry.io/platforms/node/enriching-events/scopes/#configuring-the-scope) for more details. |
| `getInstance()` | Used for direct access to the Sentry instance. | |

Below are examples for each method.

</Tabs>



# Upload
Source: https://docs-v4.strapi.io/dev-docs/plugins/upload

# Upload plugin

The Upload plugin is the backend powering the Media Library plugin available by default in the Strapi admin panel. Using either the Media Library from the admin panel or the upload API directly, you can upload any kind of file for use in your Strapi application.

By default Strapi provides a [provider](/dev-docs/providers) that uploads files to a local directory, which by default will be `public/uploads/` in your Strapi project. Additional providers are available should you want to upload your files to another location.

The providers maintained by Strapi include:

- [Amazon S3](https://market.strapi.io/providers/@strapi-provider-upload-aws-s3)
- [Cloudinary](https://market.strapi.io/providers/@strapi-provider-upload-cloudinary)
- [Local](https://www.npmjs.com/package/@strapi/provider-upload-local)

## Configuration

This section details configuration options for the default upload provider. If using another provider (e.g. AWS S3 or Cloudinary), see the available configuration parameters in that provider's documentation.

### Local server

By default Strapi accepts `localServer` configurations for locally uploaded files. These will be passed as the options for [koa-static](https://github.com/koajs/static).

You can provide them by creating or editing the `./config/plugins.js` file. The following example sets the `max-age` header.

</Tabs>

### Max file size

Currently the Strapi middleware in charge of parsing requests needs to be configured to support file sizes larger than the default of 200MB in addition to provider options passed to the upload plugin for sizeLimit.

:::caution
You may also need to adjust any upstream proxies, load balancers, or firewalls to allow for larger file sizes.<br/>
(e.g. [Nginx](http://nginx.org/en/docs/http/ngx_http_core_module.html#client_max_body_size) has a config setting called `client_max_body_size` that will need to be adjusted since it's default is only 1mb.)
:::

The library we use is [`koa-body`](https://github.com/dlau/koa-body), and it uses the [`node-formidable`](https://github.com/felixge/node-formidable) library to process files.

You can pass configuration to the middleware directly by setting it in the [`body` middleware](/dev-docs/configurations/middlewares#body) configuration in `./config/middlewares.js`:

</Tabs>

In addition to the middleware configuration, you can pass the `sizeLimit`, which is an integer in bytes, in the [plugin configuration](/dev-docs/configurations/plugins) in `./config/plugins.js`:

</Tabs>

### Upload request timeout

By default, the value of `strapi.server.httpServer.requestTimeout` is set to 330 seconds. This includes uploads. To make it possible for users with slow internet connection to upload large files, it might be required to increase this timeout limit. The recommended way to do it is by setting the `http.serverOptions.requestTimeout` parameter in the `config/server.js|ts` file (see [server configuration](/dev-docs/configurations/server).
An alternate method is to set the `requestTimeout` value in the `bootstrap` function that runs before Strapi gets started. This is useful in cases where it needs to change programmatically — for example, to temporarily disable and re-enable it:

</Tabs>

### Responsive Images

When the `Enable responsive friendly upload` setting is enabled in the settings panel the plugin will generate the following responsive image sizes:

| Name    | Largest Dimension |
| :------ | :--------- |
| large   | 1000px     |
| medium  | 750px      |
| small   | 500px      |

These sizes can be overridden in `./config/plugins.js`:

</Tabs>

:::caution
  Breakpoint changes will only apply to new images, existing images will not be resized or have new sizes generated.
:::

## Endpoints

<style lang="stylus">
#endpoint-table
  table
    display table
    width 100%

  tr
    border none
    &:nth-child(2n)
      background-color white

  tbody
    tr
      border-top 1px solid #dfe2e5

  th, td
    border none
    padding 1.2em 1em
    border-right 1px solid #dfe2e5
    &:last-child
      border-right none
</style>

<div id="endpoint-table">

| Method | Path                  | Description         |
| :----- | :-------------------- | :------------------ |
| GET    | /api/upload/files     | Get a list of files |
| GET    | /api/upload/files/:id | Get a specific file |
| POST   | /api/upload           | Upload files        |
| POST   | /api/upload?id=x      | Update fileInfo    |
| DELETE | /api/upload/files/:id | Delete a file       |

</div>

:::note
[Folders](/user-docs/media-library/organizing-assets-with-folders) are an admin panel feature and are not part of the REST or the GraphQL API. Files uploaded through the REST or GraphQL API are located in the automatically created "API Uploads" folder.
:::

## Examples

### Upload files

Upload one or more files to your application.

The following parameters are accepted:

- `files`: The file(s) to upload. The value(s) can be a Buffer or Stream.

</Tabs>

:::caution
You have to send FormData in your request body.
:::

### Upload entry files

Upload one or more files that will be linked to a specific entry.

The following parameters are accepted:

| Parameter | Description |
| --------- | ----------- |
|`files`    | The file(s) to upload. The value(s) can be a Buffer or Stream. |
|`path` (optional) | The folder where the file(s) will be uploaded to (only supported on strapi-provider-upload-aws-s3). |
| `refId` | The ID of the entry which the file(s) will be linked to. |
| `ref` | The unique ID (uid) of the model which the file(s) will be linked to (see more below). |
| `source` (optional) | The name of the plugin where the model is located. |
| `field` | The field of the entry which the file(s) will be precisely linked to. |

For example, given the `Restaurant` model attributes:

```json title="path: ./src/api/restaurant/content-types/restaurant/schema.json"

{
  // ...
  "attributes": {
    "name": {
      "type": "string"
    },
    "cover": {
      "type": "media",
      "multiple": false,
    }
  }
// ...
}
```

The corresponding code is be:

```html
<form>
  <!-- Can be multiple files if you setup "collection" instead of "model" -->
  <input type="file" name="files" />
  <input type="text" name="ref" value="api::restaurant.restaurant" />
  <input type="text" name="refId" value="5c126648c7415f0c0ef1bccd" />
  <input type="text" name="field" value="cover" />
  <input type="submit" value="Submit" />
</form>

<script type="text/javascript">
  const form = document.querySelector('form');

  form.addEventListener('submit', async (e) => {
    e.preventDefault();

    await fetch('/api/upload', {
      method: 'post',
      body: new FormData(e.target)
    });
  });
</script>
```

:::caution
You have to send FormData in your request body.
:::

### Upload files at entry creation

You can also add files during your entry creation.

For example, given the `Restaurant` model attributes:

```json title="path: ./src/api/restaurant/content-types/restaurant/schema.json"

{
  // ...
  "attributes": {
    "name": {
      "type": "string"
    },
    "cover": {
      "type": "media",
      "multiple": false,
    }
  }
  // ...
}
```

The corresponding code would be:

```html
<form>
  <!-- Can be multiple files if you setup "collection" instead of "model" -->
  <input type="text" name="name" />
  <input type="file" name="cover" />
  <input type="submit" value="Submit" />
</form>

<script type="text/javascript">
  const form = document.querySelector('form');

  form.addEventListener('submit', async (e) => {
    e.preventDefault();

    const data = {};
    const formData = new FormData();

    form.elements
      .forEach(({ name, type, value, files, ...element }) => {
        if (!['submit', 'file'].includes(type)) {
          data[name] = value;
        } else if (type === 'file') {
          files.forEach((file) => {
            formData.append(`files.${name}`, file, file.name);
          });
        }
      });

    formData.append('data', JSON.stringify(data));

    await fetch('/api/restaurants', {
      method: 'post',
      body: formData
    });
  });
</script>
```

Your entry data has to be contained in a `data` key and you need to `JSON.stringify` this object. The keys for files need to be prefixed with `files` (e.g. for a cover attribute: `files.cover`).

:::tip
If you want to upload files for a repeatable component, you will have to specify the zero-based index of the item you want to add the file to, using the following syntax: `files.my_component_name[the_index].attribute_name`. For instance, if you put 3 components and the file is for the second one, the index will be 1.
:::

:::caution
You have to send FormData in your request body.
:::

### Models definition

Adding a file attribute to a model (or the model of another plugin) is like adding a new association.

In the first example below, you will be able to upload and attach one file to the avatar attribute.

```json title="path: ./src/api/restaurant/content-types/restaurant/schema.json"

{
  // ...
  {
    "attributes": {
      "pseudo": {
        "type": "string",
        "required": true
      },
      "email": {
        "type": "email",
        "required": true,
        "unique": true
      },
      "avatar": {
        "type": "media",
        "multiple": false,
      }
    }
  }
  // ...
}

```

In our second example, you can upload and attach multiple pictures to the restaurant.

```json title="path: ./src/api/restaurant/content-types/restaurant/schema.json"

{
  // ...
  {
    "attributes": {
      "name": {
        "type": "string",
        "required": true
      },
      "covers": {
        "type": "media",
        "multiple": true,
      }
    }
  }
  // ...
}
```

### Update fileInfo

Update a file in your application.

The following parameters are accepted:

- `fileInfo`: The fileInfo to update.

```js

const fileId = 50;
const newFileData = {
  alternativeText: 'My new alternative text for this image!',
};

const form = new FormData();

form.append('fileInfo', JSON.stringify(newFileData));

const response = await fetch(`http://localhost:1337/api/upload?id=${fileId}`, {
  method: 'post',
  body: form,
});

```

### Upload single file from an API controller

Add a file to Media Library from the backend.

```js
async create(ctx) {

  // ...

  const { body, files } = ctx.request;

  const file = files["files.uploadedFile"];

  const createdFiles = await strapi.plugins.upload.services.upload.upload({
    data: {
      fileInfo: {
        name: "Name",
        caption: "Caption",
        alternativeText: "Alternative Text",
      },
    },
    files: file,
  });

  // ...

},
```



# Users & Permissions
Source: https://docs-v4.strapi.io/dev-docs/plugins/users-permissions

# Users & Permissions plugin

This plugin provides a full authentication process based on [JSON Web Tokens (JWT)](https://en.wikipedia.org/wiki/JSON_Web_Token) to protect your API. It also provides an access-control list (ACL) strategy that enables you to manage permissions between groups of users.

To access the plugin admin panel, click on the **Settings** link in the left menu of your Strapi application dashboard and under the **USERS & PERMISSIONS PLUGIN** section you will find sections for managing **Roles**, **Providers**, **Email Templates**, and **Advanced Settings**.

## Concept

When this plugin is installed, it adds an access layer on your application.
The plugin uses `JWTs` to authenticate users. Your JWT contains your user ID, which is matched to the group your user is in and used to determine whether to allow access to the route.

Each time an API request is sent the server checks if an `Authorization` header is present and verifies if the user making the request has access to the resource.

## Manage role permissions

### Public role

This is the default role used when the server receives a request without an `Authorization` header. Any permissions (i.e. accessible endpoints) granted to this role will be accessible by anyone.

It is common practice to select `find` / `findOne` endpoints when you want your front-end application to access all the content without requiring user authentication and authorization.

### Authenticated role

This is the default role that is given to every **new user** at creation if no role is provided. In this role you define routes that a user can access.

### Permissions management

By clicking on the **Role** name, you can see all functions available in your application (with these functions related to the specific route displayed).

If you check a function name, it makes this route accessible by the current role you are editing. On the right sidebar you can see the URL related to this function.

### Update the default role

When you create a user without a role, or if you use the `/api/auth/local/register` route, the `authenticated` role is given to the user.

To change the default role, go to the `Advanced settings` tab and update the `Default role for authenticated users` option.

## Authentication

### Login

Submit the user's identifier and password credentials for authentication. On successful authentication the response data will have the user's information along with an authentication token.

#### Local

The `identifier` param can be an **email** or **username**.

</Tabs>

### Token usage

The `jwt` may then be used for making permission-restricted API requests. To make an API request as a user place the JWT into an `Authorization` header of the `GET` request.

Any request without a token will assume the `public` role permissions by default. Modify the permissions of each user's role in the admin dashboard.

Authentication failures return a `401 (unauthorized)` error.

#### Usage

The `token` variable is the `data.jwt` received when logging in or registering.

```js

const token = 'YOUR_TOKEN_HERE';

// Request API.
axios
  .get('http://localhost:1337/posts', {
    headers: {
      Authorization: `Bearer ${token}`,
    },
  })
  .then(response => {
    // Handle success.
    console.log('Data: ', response.data);
  })
  .catch(error => {
    // Handle error.
    console.log('An error occurred:', error.response);
  });
```

### JWT configuration

You can configure the JWT generation by using the [plugins configuration file](/dev-docs/configurations/plugins).

Strapi uses [jsonwebtoken](https://www.npmjs.com/package/jsonwebtoken) to generate the JWT.

Available options:

- `jwtSecret`: random string used to create new JWTs, typically set using the `JWT_SECRET` [environment variable](/dev-docs/configurations/environment#strapi-s-environment-variables).
- `jwt.expiresIn`: expressed in seconds or a string describing a time span.<br/>
  Eg: 60, "45m", "10h", "2 days", "7d", "2y". A numeric value is interpreted as a seconds count. If you use a string be sure you provide the time units (minutes, hours, days, years, etc), otherwise milliseconds unit is used by default ("120" is equal to "120ms").

</Tabs>

:::warning
Setting JWT expiry for more than 30 days is **not recommended** due to security concerns.
:::

### Registration

#### Configuration

If you have added any additional fields to your user model that need to be accepted on registration, they need to be added to the list of allowed fields in the `register` configuration option, otherwise they will not be accepted.

For example, if you have added a field called "nickname" that you wish to accept from the API on user registration:

</Tabs>

#### Usage

Creates a new user in the database with a default role as 'registered'.

```js

// Request API.
// Add your own code here to customize or restrict how the public can register new users.
axios
  .post('http://localhost:1337/api/auth/local/register', {
    username: 'Strapi user',
    email: 'user@strapi.io',
    password: 'strapiPassword',
  })
  .then(response => {
    // Handle success.
    console.log('Well done!');
    console.log('User profile', response.data.user);
    console.log('User token', response.data.jwt);
  })
  .catch(error => {
    // Handle error.
    console.log('An error occurred:', error.response);
  });
```

### Providers

 [Grant](https://github.com/simov/grant) and [Purest](https://github.com/simov/purest) allow you to use OAuth and OAuth2 providers to enable authentication in your application.

For a better understanding, review the following description of the login flow. The example uses`github` as the provider but it works the same for other providers.

#### Understanding the login flow

Let's say that:
* Strapi's backend is located at: `strapi.website.com`, and
* Your app frontend is located at: `website.com`

1. The user goes on your frontend app (`https://website.com`) and clicks on your button `connect with Github`.
2. The frontend redirects the tab to the backend URL: `https://strapi.website.com/api/connect/github`.
3. The backend redirects the tab to the GitHub login page where the user logs in.
4. Once done, Github redirects the tab to the backend URL:`https://strapi.website.com/api/connect/github/callback?code=abcdef`.
5. The backend uses the given `code` to get an `access_token` from Github that can be used for a period of time to make authorized requests to Github to get the user info.
6. Then, the backend redirects the tab to the url of your choice with the param `access_token` (example: `http://website.com/connect/github/redirect?access_token=eyfvg`).
7. The frontend (`http://website.com/connect/github/redirect`) calls the backend with `https://strapi.website.com/api/auth/github/callback?access_token=eyfvg` that returns the Strapi user profile with its `jwt`. <br/> (Under the hood, the backend asks Github for the user's profile and a match is done on Github user's email address and Strapi user's email address).
8. The frontend now possesses the user's `jwt`, which means the user is connected and the frontend can make authenticated requests to the backend!

An example of a frontend app that handles this flow can be found here: [react login example app](https://github.com/strapi/strapi-examples/tree/master/examples/login-react).

#### Setting up the server url

Before setting up a provider you must specify the absolute url of your backend in `server.js`.

**example -** `config/server.js`

</Tabs>

:::tip
Later you will give this url to your provider. <br/> For development, some providers accept the use of localhost urls but many don't. In this case we recommend to use [ngrok](https://ngrok.com/docs) (`ngrok http 1337`) that will make a proxy tunnel from a url it created to your localhost url (ex: `url: env('', 'https://5299e8514242.ngrok.io'),`).
:::

#### Setting up the provider - examples

Instead of a generic explanation we decided to show an example for each provider.

In the following examples, the frontend app will be the [react login example app](https://github.com/strapi/strapi-examples/tree/master/examples/login-react). <br/>
It (the frontend app) will be running on `http://localhost:3000`. <br/>
Strapi (the backend) will be running on `http://localhost:1337`.

</Tabs>

Your configuration is done.
Launch the backend and the [react login example app](https://github.com/strapi/strapi-examples/tree/master/examples/login-react), go to `http://localhost:3000` and try to connect to the provider your configured.

#### Setup the frontend

Once you have configured strapi and the provider, in your frontend app you have to :

- Create a button that links to `GET STRAPI_BACKEND_URL/api/connect/${provider}` (ex: `https://strapi.mywebsite/api/connect/github`).
- Create a frontend route like `FRONTEND_URL/connect/${provider}/redirect` that have to handle the `access_token` param and that have to request `STRAPI_BACKEND_URL/api/auth/${provider}/callback` with the `access_token` parameter.<br/>
  The JSON request response will be `{ "jwt": "...", "user": {...} }`.

Now you can make authenticated requests. More info here: [token usage](#token-usage).

:::caution Troubleshooting

- **Error 429**: It's most likely because your login flow fell into a loop. To make new requests to the backend, you need to wait a few minutes or restart the backend.
- **Grant: missing session or misconfigured provider**: It may be due to many things.
  - **The redirect url can't be built**: Make sure you have set the backend url in `config/server.js`: [Setting up the server url](#setting-up-the-server-url)
  - **A session/cookie/cache problem**: You can try again in a private tab.
  - **The incorrect use of a domain with ngrok**: Check your urls and make sure that you use the ngrok url instead of `http://localhost:1337`. Don't forget to check the backend url set in the example app at `src/config.js`.
- **You can't access your admin panel**: It's most likely because you built it with the backend url set with a ngrok url and you stopped/restarted ngrok. You need to replace the backend url with the new ngrok url and run `yarn build` or `npm run build` again.
:::

### Reset password

**Can only be used for users registered using the email provider.**

</Tabs>

### Email validation

:::note
In production, make sure the `url` config property is set. Otherwise the validation link will redirect to `localhost`. More info on the config [here](/dev-docs/configurations/server).
:::

After registering, if you have set **Enable email confirmation** to **ON**, the user will receive a confirmation link by email. The user has to click on it to validate their registration.

Example of the confirmation link: `https://yourwebsite.com/api/auth/email-confirmation?confirmation=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MywiaWF0IjoxNTk0OTgxMTE3LCJleHAiOjE1OTc1NzMxMTd9.0WeB-mvuguMyr4eY8CypTZDkunR--vZYzZH6h6sChFg`

If needed you can re-send the confirmation email by making the following request:

```js

// Request API.
axios
  .post(`http://localhost:1337/api/auth/send-email-confirmation`, {
    email: 'user@strapi.io', // user's email
  })
  .then(response => {
    console.log('Your user received an email');
  })
  .catch(error => {
    console.error('An error occurred:', error.response);
  });
```

## User object in Strapi context

The `user` object is available to successfully authenticated requests.

The authenticated `user` object is a property of `ctx.state`.

```js
create: async ctx => {
  const { id } = ctx.state.user;

  const depositObj = {
    ...ctx.request.body,
    depositor: id,
  };

  const data = await strapi.services.deposit.add(depositObj);

  // Send 201 `created`
  ctx.created(data);
};
```

<!-- Needs to be updated to v4>

## Adding a new provider (to your project)

:::caution
This documentation is not up-to-date with Strapi v4 and is a work in progress. In the meantime, [contributions](https://github.com/strapi/documentation/blob/main/CONTRIBUTING.md) are most welcome.
:::

**[Grant](https://github.com/simov/grant) supplies configuration for a number of commonly used OAuth providers. [Custom](https://github.com/simov/grant#misc-custom-providers) providers are also supported**. <br/> You can view and try out the 200+ supported providers here: [OAuth Playground](https://grant.outofindex.com/).

### Prepare your files

To add a new provider on Strapi, you will need to perform changes to the following files:

```
extensions/users-permissions/services/Providers.js
extensions/users-permissions/config/functions/bootstrap.js
```

If these files don't exist you will need to copy from your `node_modules` or the Strapi mono-repo. You can see [plugin extensions](/dev-docs/plugins-extension) for more information on how it works.

We will go step by step.

### Configure your Provider Request

Configure the new provider in the `Provider.js` file at the `getProfile` function.

The `getProfile` takes three params:

- **provider**: The name of the used provider as a string.
- **query**: The query is the result of the provider callback.
- **callback**: The callback function who will continue the internal Strapi login logic.

Here is an example that uses the `discord` provider.

### Configure your oauth generic information

```js
case 'discord': {
  const discord = new Purest({
    provider: 'discord',
    config: {
      'discord': {
        'https://discordapp.com/api/': {
          '__domain': {
            'auth': {
              'auth': {'bearer': '[0]'}
            }
          },
          '{endpoint}': {
            '__path': {
              'alias': '__default'
            }
          }
        }
      }
    }
  });
}
```

This code creates a `Purest` object that gives us a generic way to interact with the provider's REST API.

For more specs on using the `Purest` module, please refer to the [Official Purest Documentation](https://github.com/simov/purest)

You may also want to take a look onto the numerous already made configurations [here](https://github.com/simov/purest-providers/blob/master/config/providers.json).

### Retrieve your user's information:

For our discord provider it will look like:

```js
  discord.query().get('users/@me').auth(access_token).request((err, res, body) => {
    if (err) {
      callback(err);
    } else {
      // Combine username and discriminator because discord username is not unique
      const username = `${body.username}#${body.discriminator}`;
      callback(null, {
        username,
        email: body.email
      });
    }
  });
  break;
}
```

Here is the next part of our switch. Now that we have properly configured our provider, we want to use it to retrieve
user information.

Here you see the real power of `purest`, you can simply make a get request on the desired URL, using the `access_token`
from the `query` parameter to authenticate.

That way, you should be able to retrieve the user info you need.

Now, you can simply call the `callback` function with the username and email of your user. That way, Strapi will be able
to retrieve your user from the database and log you in.

### Configure the new provider model onto database

Now, we need to configure our 'model' for our new provider. That way, our settings can be stored in the database, and
managed from the admin panel.

Open the file `packages/strapi-plugin-users-permissions/config/functions/bootstrap.js`

Add the fields your provider needs into the `grantConfig` object.
For our discord provider it will look like:

```js
discord: {
  enabled: false,  // make this provider disabled by default
  icon: 'comments', // The icon to use on the UI
  key: '',  // our provider app id (leave it blank, you will fill it with the Content Manager)
  secret: '', // our provider secret key (leave it blank, you will fill it with the Content Manager)
  callback: '/auth/discord/callback', // the callback endpoint of our provider
  scope: [  // the scope that we need from our user to retrieve information
    'identify',
    'email'
  ]
},
```
-->

## Templating emails

By default this plugin comes with two templates: reset password and email address confirmation. The templates use Lodash's `template()` method to populate the variables.

You can update these templates under **Plugins** > **Roles & Permissions** > **Email Templates** tab in the admin panel.

### Reset Password

- `USER` (object)
  - `username`
  - `email`
- `TOKEN` corresponds to the token generated to be able to reset the password.
- `URL` is the link where the user will be redirected after clicking on it in the email.
- `SERVER_URL` is the absolute server url (configured in server configuration).

### Email address confirmation

- `USER` (object)
  - `username`
  - `email`
- `CODE` corresponds to the CODE generated to be able confirm the user email.
- `URL` is the Strapi backend URL that confirms the code (by default `/auth/email-confirmation`).
- `SERVER_URL` is the absolute server url (configured in server configuration).

## Security configuration

JWTs can be verified and trusted because the information is digitally signed. To sign a token a _secret_ is required. By default Strapi generates and stores it in `./extensions/users-permissions/config/jwt.js`.

This is useful during development but for security reasons it is recommended to set a custom token via an environment variable `JWT_SECRET` when deploying to production.

By default you can set a `JWT_SECRET` environment variable and it will be used as secret. If you want to use another variable you can update the configuration file.

</Tabs>

:::tip
You can learn more about configuration [here](/dev-docs/configurations).
:::

### Creating a custom callback validator

By default, Strapi SSO only redirects to the redirect URL that is exactly equal to the url in the configuration:

If you need to configure a custom handler to accept other URLs, you can create a callback `validate` function in your plugins.js for the `users-permissions` plugin.

```tsx title="/config/plugins.js|ts"
  // ... other plugins configuration ...
  // Users & Permissions configuration
  'users-permissions': {
    enabled: true,
    config: {
      callback: {
        validate: (cbUrl, options) => {
          // cbUrl is where Strapi is being asked to redirect the auth info
          // that was received from the provider to
          
          // in this case, we will only validate that the 
          // if using a base url, you should always include the trailing slash
          // although in real-world usage you should also include the full paths
          if (cbUrl.startsWith('https://myproxy.mysite.com/') || 
              cbUrl.startsWith('https://mysite.com/')) {
            return;
          }

          // Note that you MUST throw an error to fail validation
          // return values are not checked
          throw new Error('Invalid callback url');
        },
      },
    },
  },
```



# Using Strapi plugins
Source: https://docs-v4.strapi.io/dev-docs/plugins/using-plugins

# Using Strapi built-in plugins

:::info
This section is about using Strapi built-in plugins from a developer's perspective. Not what you're looking for? Read the [plugins introduction](/dev-docs/plugins) and find your use case and recommended section to read from there.
:::

## Built-in plugins

Strapi comes with the following built-in plugins that are officially maintained and documented by the Strapi core team:

## Automatic plugins discovery

Strapi automatically loads plugins installed with npm. Under the hood, Strapi scans every `package.json` file of the project dependencies, and looks for the following declaration:

```json
"strapi": {
  "kind": "plugin"
}
```

Installed plugins can also be manually enabled or disabled.

## Manual enabling/disabling of plugins

To disable a plugin without uninstalling it, switch its `enabled` key to `false` in the [`/config/plugins.js` file](/dev-docs/configurations/plugins).



# Project structure
Source: https://docs-v4.strapi.io/dev-docs/project-structure

# Project structure

:::note
If the Strapi project was created with the [starter CLI](https://strapi.io/blog/announcing-the-strapi-starter-cli), its structure includes both a `frontend` and `backend` folder, where the `backend` folder has the default structure.

<details>
<summary> Structure of a project created with the starter CLI</summary>

```sh
my-project
├─── frontend # starter folder
├─── backend  # template folder, has the default structure of a project
└─── node_modules
```

</details>

:::

The default structure of a Strapi project created without the starter CLI depends on whether the project was created with vanilla JavaScript or with [TypeScript](/dev-docs/typescript), and looks like the following:



# Providers
Source: https://docs-v4.strapi.io/dev-docs/providers

# Providers

Certain [plugins](../../../user-docs/plugins) can be extended via the installation and configuration of additional [providers](../../../user-docs/plugins#providers).

Providers add an extension to the core capabilities of the plugin, for example to upload media files to AWS S3 instead of the local server, or using Amazon SES for emails instead of Sendmail.

:::note
Only the [Upload](/dev-docs/plugins/upload) and [Email](/dev-docs/plugins/email) plugins are currently designed to work with providers. 
:::

For the relevant plugins, there are both official providers maintained by Strapi — discoverable via the [Marketplace](../../../user-docs/plugins/installing-plugins-via-marketplace) — and many community maintained providers available via [npm](https://www.npmjs.com/).

A provider can be configured to be [private](#creating-private-providers) to ensure asset URLs will be signed for secure access.

:::strapi Providers for Strapi Cloud
This page describes how providers work for the Strapi CMS (self-hosted version). [Email providers](/cloud/advanced/email) and [upload providers](/cloud/advanced/upload) for Strapi Cloud are described in the Cloud documentation.
:::

## Installing providers

New providers can be installed using `npm` or `yarn` using the following format `@strapi/provider-<plugin>-<provider> --save`.

For example:

</Tabs>

## Configuring providers

Newly installed providers are enabled and configured in the `./config/plugins.js` file. If this file does not exist you must create it.

Each provider will have different configuration settings available. Review the respective entry for that provider in the [Marketplace](../../../user-docs/plugins/installing-plugins-via-marketplace) or [npm](https://www.npmjs.com/) to learn more.

Below are example configurations for the Upload and Email plugins.

</Tabs>

:::note
Strapi has a default [`security` middleware](/dev-docs/configurations/middlewares#security) that has a very strict `contentSecurityPolicy` that limits loading images and media to `"'self'"` only, see the example configuration on the [provider page](https://www.npmjs.com/package/@strapi/provider-upload-aws-s3) or the [middleware documentation](/dev-docs/configurations/middlewares#security) for more information.
:::

</TabItem>

</Tabs>

:::tip Sendmail
If you prefer to use Sendmail over Sendgrid, please refer to the [`@strapi/provider-email-sendmail`](https://www.npmjs.com/package/@strapi/provider-email-sendmail) documentation.
:::

:::note

* When using a different provider per environment, specify the correct configuration in `./config/env/${yourEnvironment}/plugins.js` (See [Environments](/dev-docs/configurations/environment)).
* Only one email provider will be active at a time. If the email provider setting isn't picked up by Strapi, verify the `plugins.js` file is in the correct folder.
* When testing the new email provider with those two email templates created during strapi setup, the _shipper email_ on the template defaults to `no-reply@strapi.io` and needs to be updated according to your email provider, otherwise it will fail the test (See [Configure templates locally](/user-docs//settings/configuring-users-permissions-plugin-settings#configuring-email-templates)).

:::

</TabItem>
</Tabs>

### Configuration per environment

When configuring your provider you might want to change the configuration based on the `NODE_ENV` environment variable or use environment specific credentials.

You can set a specific configuration in the `./config/env/{env}/plugins.js` configuration file and it will be used to overwrite the default configuration.

## Creating providers

To implement your own custom provider you must [create a Node.js module](https://docs.npmjs.com/creating-node-js-modules).

The interface that must be exported depends on the plugin you are developing the provider for. Below are templates for the Upload and Email plugins:

</Tabs>

</TabItem>

</Tabs>

</TabItem>
</Tabs>

In the send function you will have access to:

* `providerOptions` that contains configurations written in `plugins.js`
* `settings` that contains configurations written in `plugins.js`
* `options` that contains options you send when you call the send function from the email plugin service

You can review the [Strapi maintained providers](https://github.com/strapi/strapi/tree/master/packages/providers) for example implementations.

After creating your new provider you can [publish it to npm](https://docs.npmjs.com/creating-and-publishing-unscoped-public-packages) to share with the community or [use it locally](#local-providers) for your project only.

### Local providers

:::strapi Providers for Strapi Cloud
This section describes how providers work for the Strapi CMS (self-hosted version). [Email providers](/cloud/advanced/email) and [upload providers](/cloud/advanced/upload) for Strapi Cloud are described in the Cloud documentation.
:::

If you want to create your own provider without publishing it on npm you can follow these steps:

1. Create a `providers` folder in your application.
2. Create your provider (e.g. `./providers/strapi-provider-<plugin>-<provider>`)
3. Then update your `package.json` to link your `strapi-provider-<plugin>-<provider>` dependency to the [local path](https://docs.npmjs.com/files/package.json#local-paths) of your new provider.

```json
{
  ...
  "dependencies": {
    ...
    "strapi-provider-<plugin>-<provider>": "file:providers/strapi-provider-<plugin>-<provider>",
    ...
  }
}
```

4. Update your `./config/plugins.js` file to [configure the provider](#configuring-providers).
5. Finally, run `yarn install` or `npm install` to install your new custom provider.

## Creating private providers

You can set up a private provider, meaning that every asset URL displayed in the Content Manager will be signed for secure access.

To enable private providers, you must implement the `isPrivate()` method and return `true`.

In the backend, Strapi generates a signed URL for each asset using the `getSignedUrl(file)` method implemented in the provider. The signed URL includes an encrypted signature that allows the user to access the asset (but normally only for a limited time and with specific restrictions, depending on the provider).

Note that for security reasons, the content API will not provide any signed URLs. Instead, developers using the API should sign the urls themselves.

**Example**

To create a private `aws-s3` provider:

1. Create a `./providers/aws-s3` folder in your application. See [Local Providers](#local-providers) for more information.
2. Implement the `isPrivate()` method in the `aws-s3` provider to return `true`.
3. Implement the `getSignedUrl(file)` method in the `aws-s3` provider to generate a signed URL for the given file.

</Tabs>



# Quick Start Guide - Strapi Developer Docs
Source: https://docs-v4.strapi.io/dev-docs/quick-start

const detailsStyle = {backgroundColor: 'transparent', border: 'solid 1px #4945ff' }
const summaryStyle = {fontSize: '18px'}

# Quick Start Guide

Strapi offers a lot of flexibility. Whether you want to go fast and quickly see the final result, or would rather dive deeper into the product, we got you covered. For this tutorial, we'll go for the DIY approach and build a project and data structure from scratch, then deploy your project to Strapi Cloud to add data from there.

*Estimated completion time: 5-10 minutes*

:::prerequisites

    </Tabs>

Within a few moments, your local project will be hosted on Strapi Cloud. 🚀 

Once it's done, the terminal will provide you a clickable link that starts with `https://cloud.strapi.io/projects`. Click on the link, or copy and paste it in your browser address bar, to visit the page.

You will see the Strapi Cloud project we've just created, `my-strapi-project`, visible in the Strapi Cloud dashboard. Click the **Visit app** button in the top right corner to access your deployed Strapi project.

:::callout 🥳 CONGRATULATIONS!  
Now your project is hosted on Strapi Cloud and accessible online. Enjoy your 14-day free Strapi Cloud trial! You can learn more about Strapi Cloud by reading [its dedicated documentation](/cloud/intro) or proceed to part D to log in into your online Strapi project and add your first data from there.
:::

:::tip
Feel free to play with the Content-Type Builder even further and add more fields to your content-types or create new content-types. Anytime you make such changes, deploy them again on Strapi Cloud, by running the appropriate `deploy` command, and see your hosted project updated within a few minutes. Magical, isn't it? 🪄
:::

## 📝 Part D: Add content to your Strapi Cloud project with the Content Manager

Now that we have created a basic data structure with 2 collection types, "Restaurant" and "Category", and deployed your project to Strapi Cloud, let's use the Cloud to actually add content by creating new entries.

<details style={detailsStyle}>
<summary style={summaryStyle}>Step 1: Log in to the admin panel of your new Strapi Cloud project</summary>

### Step 1: Log in to the admin panel of your new Strapi Cloud project

Now that your Strapi Cloud project is created, let's log in into the project:

1. From your [Strapi Cloud dashboard](https://cloud.strapi.io/projects), click the `my-strapi-project` project.
3. Click the **Visit app** button.
4. In the new page that opens, complete the form to create the first administrator user of this Strapi Cloud project.

Logged in into our first Strapi Cloud project, we will now add data from there.

<details>
<summary>ℹ️ Additional information and tips about users and Strapi Cloud projects:</summary>

:::note Note: Local users and Strapi Cloud users are different
The databases for your Strapi Cloud project and your local project are different. This means that data is not automatically transferred from your local project to Strapi Cloud. This includes users that you previously created locally. That's why you are invited to create a new administrator account when logging in to your Strapi Cloud project for the first time.
:::

:::tip Tip: Directly accessing the admin panel of your Strapi Cloud project
Any project hosted on Strapi Cloud is accessible from its own URL, something like `https://my-strapi-project-name.strapiapp.com`. To access the admin panel of your online project, simply add `/admin` to the URL, for instance as in `https://my-strapi-project-name.strapiapp.com/admin`. URLs can be found in your Strapi Cloud dashboard and you can also directly access your Strapi Cloud projects from there by clicking on the name of your project then on the **Visit app** button.
:::

</details>

</details>

<details style={detailsStyle}>
<summary style={summaryStyle}>Step 2: Create an entry for the "Restaurant" collection type</summary>

### Step 2: Create an entry for the "Restaurant" collection type

1. Go to ![Content Manager icon](/img/assets/quick-start-guide/icons/content.svg) _Content Manager > Collection types - Restaurant_ in the navigation.
2. Click on **Create new entry**.
3. Type the name of your favorite local restaurant in the _Name_ field. Let's say it's `Biscotte Restaurant`.
4. In the _Description_ field, write a few words about it. If you're lacking some inspiration, you can use `Welcome to Biscotte restaurant! Restaurant Biscotte offers a cuisine based on fresh, quality products, often local, organic when possible, and always produced by passionate producers.`
5. Click **Save**.

The restaurant is now listed in the _Collection types - Restaurant_ view of the ![Content Manager icon](/img/assets/quick-start-guide/icons/content.svg) _Content Manager_.

</details>

<details style={detailsStyle}>
<summary style={summaryStyle}>Step 3: Add Categories</summary>

#### Step 3: Add Categories

Let's go to ![Content Manager icon](/img/assets/quick-start-guide/icons/content.svg) _Content Manager > Collection types - Category_ and create 2 categories:

1. Click on **Create new entry**.
2. Type `French Food` in the _Name_ field.
3. Click **Save**.
4. Go back to _Collection types - Category_, then click again on **Create new entry**.  
5. Type `Brunch` in the _Name_ field, then click **Save**.

The "French Food" and "Brunch" categories are now listed in the _Collection types - Category_ view of the ![Content Manager icon](/img/assets/quick-start-guide/icons/content.svg) _Content Manager_.

Now, we will add a category to a restaurant:

1. Go to ![Content Manager icon](/img/assets/quick-start-guide/icons/content.svg) _Content Manager > Collection types - Restaurant_ in the navigation, and click on "Biscotte Restaurant".
2. In the **Categories** drop-down list at the bottom of the page, select "Brunch". Scroll back to the top of the page and click **Save**.

</details>

<details style={detailsStyle}>
<summary style={summaryStyle}>Step 4: Set Roles & Permissions</summary>

### Step 4: Set Roles & Permissions

We have just added a restaurant and 2 categories. We now have enough content to consume (pun intended). But first, we need to make sure that the content is publicly accessible through the API:

1. Click on _![Settings icon](/img/assets/quick-start-guide/icons/settings.svg) Settings_ at the bottom of the main navigation.
2. Under _Users & Permissions Plugin_, choose _Roles_.
3. Click the **Public** role.
4. Scroll down under _Permissions_.
5. In the _Permissions_ tab, find _Restaurant_ and click on it.
6. Click the checkboxes next to **find** and **findOne**.
7. Repeat with _Category_: click the checkboxes next to **find** and **findOne**.
8. Finally, click **Save**.

</details>

<details style={detailsStyle}>
<summary style={summaryStyle}>Step 5: Publish the content</summary>

### Step 5: Publish the content

By default, any content you create is saved as a draft. Let's publish our categories and restaurant.

First, navigate to ![Content Manager icon](/img/assets/quick-start-guide/icons/content.svg) _Content Manager > Collection types - Category_. From there:

1. Click the "Brunch" entry.
2. On the next screen, click **Publish**.
3. In the _Confirmation_ window, click **Yes, publish**.  

Then, go back to the Categories list and repeat for the "French Food" category.

Finally, to publish your favorite restaurant, go to ![Content Manager icon](/img/assets/quick-start-guide/icons/content.svg) _Content Manager > Collection types - Restaurant_, click the "Biscotte Restaurant" entry, and **Publish** it.

</details>

<details style={detailsStyle}>
<summary style={summaryStyle}>Step 6: Use the API</summary>

### Step 6: Use the API

OK dear gourmet, we have just finished creating our content and making it accessible through the API. You can give yourself a pat on the back — but you have yet to see the final result of your hard work.

There you are: the list of restaurants should be accessible by visting the `/api/restaurants` path of your Strapi Cloud project URL (e.g., `https://beautiful-first-strapi-project.strapiapp.com/api/restaurants`).

Try it now! The result should be similar to the example response below 👇.

<details>
<summary>Click me to view an example of API response:</summary>

```json
{
  "data": [
    {
      "id": 1,
      "attributes": {
        "name": "Biscotte Restaurant",
        "description": "Welcome to Biscotte restaurant! Restaurant Biscotte offers a cuisine based on fresh, quality products, often local, organic when possible, and always produced by passionate producers.",
        "createdAt": "2021-11-18T13:34:53.885Z",
        "updatedAt": "2021-11-18T13:59:05.035Z",
        "publishedAt": "2021-11-18T13:59:05.033Z"
      }
    }
  ],
  "meta": {
    "pagination": {
      "page": 1,
      "pageSize": 25,
      "pageCount": 1,
      "total": 1
    }
  }
}
```

</details>

</details>

:::callout 🥳 CONGRATULATIONS!  
Now your content is created, published, and you have permissions to request it through the API.
Keep on creating amazing content!
:::

:::tip Tip: Transfer data between your local and Strapi Cloud projects
The databases for your Strapi Cloud project and your local project are different. This means that data is not automatically synchronized between your Strapi Cloud and local projects. You can use the [data management system](/dev-docs/data-management) to transfer data between projects.
:::

## ⏩ What to do next?

Now that you know the basics of creating and publishing content with Strapi, we encourage you to explore and dig deeper into some Strapi features:

- 👉 learn how to use Strapi's [REST](/dev-docs/api/rest) API to query the content,
- 👉 learn more about Strapi features by browsing the [User Guide](/user-docs/intro),
- 👉 learn more about Strapi Cloud projects by reading the [Cloud Documentation](/cloud/intro),
- 👉 and [customize your Strapi back end](/dev-docs/backend-customization) and [admin panel](/dev-docs/admin-panel-customization) for advanced use cases.



# Setup and Deployment
Source: https://docs-v4.strapi.io/dev-docs/setup-deployment

# Installation, Configuration, and Deployment

Strapi is meant to be installed on your local machine, then configured, and finally deployed to a remote environment. This documentation section describes these topics, and clicking on any of the following cards will lead you to the corresponding section:

:::tip
If you're just discovering Strapi, we encourage you to read the [Quick Start Guide](/dev-docs/quick-start) as it not only presents how to install Strapi but also gives you a quick tour of the available features.
:::



# TypeScript
Source: https://docs-v4.strapi.io/dev-docs/typescript

# TypeScript development

TypeScript adds an additional type system layer above JavaScript, which means that existing JavaScript code is also TypeScript code. Strapi supports TypeScript in new projects on v4.3.0 and above. Existing JavaScript projects can [add TypeScript support](#add-typescript-support-to-an-existing-strapi-project) through a conversion procedure. TypeScript-enabled projects allow developing plugins with TypeScript as well as using TypeScript typings.

:::strapi Getting started with TypeScript
To start developing in TypeScript, use the [CLI installation documentation](/dev-docs/installation/cli) to create a new TypeScript project. For existing projects, [TypeScript support can be added](#add-typescript-support-to-an-existing-strapi-project) with the provided conversion steps. Additionally, the [project structure](/dev-docs/project-structure) and [TypeScript configuration](/dev-docs/configurations/typescript) sections have TypeScript-specific resources for understanding and configuring an application.
:::

## Start developing in TypeScript

Starting the development environment for a TypeScript-enabled project requires building the admin panel prior to starting the server. In development mode, the application source code is compiled to the `./dist/build` directory and recompiled with each change in the Content-type Builder. To start the application, run the following commands in the root directory:

</Tabs>

## Use TypeScript typings

Strapi provides typings on the `Strapi` class to improve the TypeScript developing experience. These typings come with an autocomplete feature that automatically offers suggestions while developing.

To experience TypeScript-based autocomplete while developing Strapi applications, you could try the following:

1. From your code editor, open the `./src/index.ts` file.
2. In the `register` method, declare the `strapi` argument as of type `Strapi`:

   ```js title=" ./src/index.ts"
   import { Strapi } from "@strapi/strapi";

   export default {
     register({ strapi }: { strapi: Strapi }) {
       // ...
     },
   };
   ```

3. Within the body of the `register` method, start typing `strapi.` and use keyboard arrows to browse the available properties.
4. Choose `runLifecyclesfunctions` from the list.
5. When the `strapi.runLifecyclesFunctions` method is added, a list of available lifecycle types (i.e. `register`, `bootstrap` and `destroy`) are returned by the code editor. Use keyboard arrows to choose one of the lifecycles and the code will autocomplete.

## Generate typings for project schemas

To generate typings for your project schemas use the [`ts:generate-types` CLI command](/dev-docs/cli#strapi-tsgenerate-types). The `ts:generate-types` command creates the folder `types`, at the project root, which stores the typings for your project. The optional `--debug` flag returns a detailed table of the generated schemas.

To use `ts:generate-types`run the following code in a terminal at the project root:

</Tabs>

:::tip Tip: Types generation for JavaScript projects
For JavaScript projects, automatic types generation can be turned off (see [`config/typescript.js` documentation](/dev-docs/configurations/typescript#strapi-specific-configuration-for-typescript)).
:::

:::tip Tip: Using types in your front-end application
To use Strapi types in your front-end application, you can [use a workaround](https://github.com/strapi-community/strapi-typed-fronend) until Strapi implements an official solution, and you will find additional information in [this blog article](https://strapi.io/blog/improve-your-frontend-experience-with-strapi-types-and-type-script).
:::

### Fix build issues with the Generated Types

The generated types can be excluded so that the Entity Service doesn't use them and falls back on looser types that don't check the actual properties available in the content types.

To do that, edit the `tsconfig.json` of the Strapi project and add `types/generated/**` to the `exclude` array.

```json title="./tsconfig.json"
  // ...
  "exclude": [
    "node_modules/",
    "build/",
    "dist/",
    ".cache/",
    ".tmp/",
    "src/admin/",
    "**/*.test.ts",
    "src/plugins/**",
    "types/generated/**"
  ]
  // ...
```

However, if you still want to use the generated types on your project but don't want Strapi to use them, a workaround could be to copy those generated types and paste them outside of the `generated` directory (so that they
aren't overwritten when the types are regenerated) and remove the `declare module '@strapi/types'` on the bottom of the file.

:::warning
Types should only be imported from `@strapi/strapi` to avoid breaking changes. The types in `@strapi/types` are for internal use only and may change without notice.
:::

## Develop a plugin using TypeScript

New plugins can be generated following the [plugins development documentation](/dev-docs/plugins-development). There are 2 important distinctions for TypeScript applications:

- After creating the plugin, run `yarn` or `npm install` in the plugin directory `src/admin/plugins/[my-plugin-name]` to install the dependencies for the plugin.
- Run `yarn build` or `npm run build` in the plugin directory `src/admin/plugins/[my-plugin-name]` to build the admin panel including the plugin.

:::note
It is not necessary to repeat the `yarn` or `npm install` command after the initial installation. The `yarn build` or `npm run build` command is necessary to implement any plugin development that affects the admin panel.
:::

## Start Strapi programmatically

To start Strapi programmatically in a TypeScript project the Strapi instance requires the compiled code location. This section describes how to set and indicate the compiled code directory.

### Use the `strapi()` factory

Strapi can be run programmatically by using the `strapi()` factory. Since the code of TypeScript projects is compiled in a specific directory, the parameter `distDir` should be passed to the factory to indicate where the compiled code should be read:

```js title="./server.js"
const strapi = require("@strapi/strapi");
const app = strapi({ distDir: "./dist" });
app.start();
```

### Use the `strapi.compile()` function

The `strapi.compile()` function should be mostly used for developing tools that need to start a Strapi instance and detect whether the project includes TypeScript code. `strapi.compile()` automatically detects the project language. If the project code contains any TypeScript code, `strapi.compile()` compiles the code and returns a context with specific values for the directories that Strapi requires:

```js
const strapi = require("@strapi/strapi");

strapi.compile().then((appContext) => strapi(appContext).start());
```

## Add TypeScript support to an existing Strapi project

Adding TypeScript support to an existing project requires adding 2 `tsconfig.json` files and rebuilding the admin panel. Additionally, the `eslintrc` and `eslintignore` files can be optionally removed. The TypeScript flag `allowJs` should be set to `true` in the root `tsconfig.json` file to incrementally add TypeScript files to existing JavaScript projects. The `allowJs` flag allows `.ts` and `.tsx` files to coexist with JavaScript files.

TypeScript support can be added to an existing Strapi project using the following procedure:

1. Add a `tsconfig.json` file at the project root and copy the following code, with the `allowJs` flag, to the file:

```json title="./tsconfig.json"
{
  "extends": "@strapi/typescript-utils/tsconfigs/server",
  "compilerOptions": {
    "outDir": "dist",
    "rootDir": ".",
    "allowJs": true //enables the build without .ts files
  },
  "include": ["./", "src/**/*.json"],
  "exclude": [
    "node_modules/",
    "build/",
    "dist/",
    ".cache/",
    ".tmp/",
    "src/admin/",
    "**/*.test.ts",
    "src/plugins/**"
  ]
}
```

2. Add a `tsconfig.json` file in the `./src/admin/` directory and copy the following code to the file:

```json title="./src/admin/tsconfig.json"
{
  "extends": "@strapi/typescript-utils/tsconfigs/admin",
  "include": ["../plugins/**/admin/src/**/*", "./"],
  "exclude": ["node_modules/", "build/", "dist/", "**/*.test.ts"]
}
```

3. (optional) Delete the `.eslintrc` and `.eslintignore` files from the project root.
4. Add an additional `'..'` to the `filename` property in the `database.ts` configuration file (only required for SQLite databases):

```js title="./config/database.ts"
const path = require("path");

module.exports = ({ env }) => ({
  connection: {
    client: "sqlite",
    connection: {
      filename: path.join(
        __dirname,
        "..",
        "..",
        env("DATABASE_FILENAME", ".tmp/data.db")
      ),
    },
    useNullAsDefault: true,
  },
});
```

5. Rebuild the admin panel and start the development server:

</Tabs>

After completing the preceding procedure a `dist` directory will be added at the project root and the project has access to the same TypeScript features as a new TypeScript-supported Strapi project.



# Upgrade Strapi version
Source: https://docs-v4.strapi.io/dev-docs/update-version

# Upgrade Strapi version

Strapi periodically releases code improvements through upgrades. Upgrades contain no breaking changes and are announced in both the terminal and in the administration panel. [Migration guides](/dev-docs/migration-guides) are provided whenever a new Strapi version includes breaking changes.

:::caution
 [Plugins extension](/dev-docs/plugins/users-permissions) that create custom code or modify existing code will need to be updated and compared to the changes in the repository. Not updating the plugin extensions could break the application.
:::

## Upgrade the dependencies

:::prerequisites

- Stop the server before starting the upgrade.
- Confirm there are no [migrations](/dev-docs/migration-guides) between the current and ultimate Strapi versions.
:::

1. Upgrade all of the Strapi packages version numbers in `package.json` to the latest stable Strapi version (Strapi stable versions are listed on the [GitHub releases page](https://github.com/strapi/strapi/releases)):

    ```jsx
    // path: package.json

    {
      // ...
      "dependencies": {
        "@strapi/strapi": "4.7.0", 
        "@strapi/plugin-users-permissions": "4.7.0",
        "@strapi/plugin-i18n": "4.7.0",
        "better-sqlite3": "7.4.6"
        // ...
      }
    }

    ```

2. Save the edited `package.json` file.

3. 

## Rebuild the application

## Restart the application



# Usage information
Source: https://docs-v4.strapi.io/dev-docs/usage-information

# Collected Usage Information

We are committed to providing a solution, with Strapi, that exceeds the expectations of the users and community. We are also committed to continuing to develop and make Strapi even better than it is today. To that end, Strapi contains a feature in which non-sensitive data is collected. This data is collectively aggregated for all our users, which when taken together give us a better global understanding of how users are interacting and using Strapi. We will never share the data collected in any way that would identify our Customers or their users; if shared, this data will always be anonymous.

## Context

The number of developers using Strapi is growing significantly. As mentioned earlier, we are committed to providing the best experience to our users. We will always continue to do hands-on UI/UX testing, surveys, issue tracking, roadmap votes, etc... and otherwise talk with the Strapi Community while striving to understand and deliver what is being asked for and what is needed, by any means available.

However, these above actions alone are often insufficient to maintain an overall picture of some aspects of the global usage of Strapi and its features. Globally aggregated data helps us answer and make choices around questions like these:

- Are our users using a particular feature or not? For those who are using it, what do they use it for? Is it activated and used alongside another plugin? Which specific plugin? Or something else, like, only in development/production?
- How long does setting up a project take? If the global install time increases, does it mean that users are encountering issues or the process is simply too complicated?
- What type of errors our users are facing?
- What are the most used plugins?
- Should we focus our efforts on being compatible with Node 16? Maybe our community uses version 16 in greater percentages than the global Node.js community?
- And more...

Without these metrics, we wouldn't be able to make the right choices as we continue to move forward with the roadmap and provide what you, the community and users, are asking for.

## Collected data

The following data is collected:

- Unique project ID (generated with UUID)
- Unique machine ID (generated with [node-machine-id](https://www.npmjs.com/package/node-machine-id))
- Environment state (development, staging, production)
- System information (OS)
- Build configurations

:::caution GDPR
Any identifiable data collected and aggregated is of a non-sensitive nature. We are compliant with the European GDPR recommendations (see our [Privacy Policy](https://strapi.io/privacy)). We do not collect databases configurations, password or custom variables. Any data collected (as above) is secured, encrypted and then anonymized.
:::

:::note
If you check the box "Keep me updated about new features & upcoming improvements (by doing this, you accept the terms and the privacy policy)" on the first registration screen, your email address, first name, and role in the company will be sent to our marketing team.

These data are used for marketing-related purposes only (e.g., the Strapi newsletter) and are not sent to Strapi's telemetry system. This collected usage information is opt-out by default: the data aren't sent if you don't check the box.
:::

### Opt-out

:::caution
Strapi previously recommended disabling data collection by removing the `uuid` property in the `package.json` file located in the project root. While this method will still work it is discouraged since the `uuid` might be required for certain project functionality and adding a `uuid` at a later date would re-enable data collection without informing the user.
:::

The default data collection feature can be disabled using the following CLI command:

</Tabs>

Alternatively, the `strapi.telemetryDisabled: true` flag in the project `package.json` file will also disable data collection.

Data collection can later be re-enabled by deleting the flag or setting it to false, or by using the `telemetry:enable` command.

:::note
If you have any questions or concerns regarding data collection, please contact us at the following email address [privacy@strapi.io](mailto:privacy@strapi.io).
:::



# Including content in a release
Source: https://docs-v4.strapi.io/user-docs/content-manager/adding-content-to-releases

# Including content in a release   

Using the [Releases](/user-docs/releases/introduction) feature, you can group several entries to publish them altogether. Adding entries to a release is done from the Content Manager. You can also remove an entry from a release while updating the entry.

:::prerequisites
- Before entries can be added to a release, you must create a release from the [Releases](/user-docs/releases/creating-a-release) page.
- Adding content to a release requires the appropriate permissions for the Content-Releases plugin (see [configuring administrator roles](/user-docs/users-roles-permissions/configuring-administrator-roles#plugins-and-settings)).
:::

## Adding multiple entries to a release

Multiple entries can be added to a [release](/user-docs/releases/introduction) from the list view of the Content Manager.

To add entries to a release:

1. From the list view of the Content Manager, select which entries you want to add by ticking the box on the left side of the entries' record.
2. Click on the **Add to release** button located above the header of the table.
3. In the modal, select which release to add these entries to.
4. Click on the **Publish** or **Unpublish** button to decide whether these entries will be published or unpublished when the release is published, then click **Continue**.

## Adding an entry to a release

An entry can be added to a [release](/user-docs/releases/introduction) while editing it from the edit view of the Content Manager. 

To add an entry to a release:

1. In the Releases box in the right sidebar, click the **+ Add to release** button.
2. Select which release to add this entry to.
3. Click on the **Publish** or **Unpublish** button depending on whether you want the entry to be published or unpublished when the release itself is published, then click **Continue**.

The Releases box in the right sidebar should show which release(s) the entry is included in.

:::info
If [Releases scheduling](/user-docs/releases/managing-a-release#scheduling-a-release-) is enabled and the entry is added to a scheduled release, the release date and time will also be displayed.
:::

## Removing an entry from a release

An entry can be removed from a [release](/user-docs/releases/introduction) while editing it from the edit view of the Content Manager.

To remove an entry from a release:

1. In the Releases box in the right sidebar, click the **…** three dots below the name of the release.
2. Click the **Remove from release** button.

<!-- TODO: re-add when implemented -->
<!-- :::tip
You can also remove multiple entries from a release directly from the release page (see [Managing a release](/user-docs/releases/managing-a-release)).
::: -->

<!-- TODO: add screenshot -->



# Configuring views of a content-type
Source: https://docs-v4.strapi.io/user-docs/content-manager/configuring-view-of-content-type

# Configuring the views of a content-type

Depending on their type, content-types can be divided into 2 interfaces: the list view and the edit view. Both interfaces can be configured.

## Configuring the list view

On the right side of the list view interface, right above the table, a settings button ![Cog icon](/img/assets/icons/cog.svg) is displayed. It allows to access the configurations that can be set for the list view of your collection type, and to choose which fields to display in the table.

:::note
The configurations only apply to the list view of the collection type from which the settings are accessed (i.e. disabling the filters or search options for a collection type will not automatically also disable these same options for all other collection types).
<br />

Note also that the explanations below explain how to permanently configure which fields are displayed in the table of the list view of your collection type. It is also possible to configure the displayed fields temporarily (see [Introduction to Content Manager](/user-docs/content-manager)).
:::

### List view settings

1. In the list view of your collection type, click on the settings button ![Cog icon](/img/assets/icons/cog.svg) to be redirected to the list view configuration interface.
2. In the Settings area, define your chosen new settings:

| Setting name           | Instructions                                                                                       |
| ---------------------- | -------------------------------------------------------------------------------------------------- |
| Enable search          | Click on **TRUE** or **FALSE** to able or disable the search.                                          |
| Enable filters         | Click on **TRUE** or **FALSE** to able or disable filters.                                             |
| Enable bulk actions    | Click on **TRUE** or **FALSE** to able or disable the multiple selection boxes in the list view table. |
| Entries per page       | Choose among the drop-down list the number of entries per page.                                    |
| Default sort attribute | Choose the sorting field that will be used by default.                                             |
| Default sort order     | Choose the sorting type that will be applied by default.                                           |

3. Click on the **Save** button.

### List view display

1. In the list view of your collection type, click on the settings button ![Cog icon](/img/assets/icons/cog.svg) to be redirected to the list view configuration interface.
2. In the View area, define what fields to display in the list view table, and in what order:
   - Click the add button ![Add icon](/img/assets/icons/add_icon.svg) to add a new field.
   - Click the delete button ![Clear icon](/img/assets/icons/clear.svg) to remove a field.
   - Click the reorder button ![Drag icon](/img/assets/icons/drag.svg) and drag and drop it to the place you want it to be displayed among the other fields.
3. Click the edit button ![Edit icon](/img/assets/icons/edit.svg) to access its available own settings:

| Setting name              | Instructions                                                              |
| ------------------------- | ------------------------------------------------------------------------- |
| Label                     | Write the label to be used for the field in the list view table.          |
| Enable sort on this field | Click on **TRUE** or **FALSE** to able or disable the sort on the field.  |

4. Click on the **Save** button.

:::note
Relational fields can also be displayed in the list view. There are however some specificities to keep in mind:

- Only one field can be displayed per relational field.
- Only first-level fields can be displayed (i.e. fields from the relation of a relation can't be displayed).
- If the displayed field contains more than one value, not all its values will be displayed, but a counter indicating the number of values. You can hover this counter to see a tooltip indicating the first 10 values of the relational field.

Note also that relational fields have a couple limitations when it comes to sorting options:

- Sorting cannot be enabled for relational fields which display several fields.
- Relational fields cannot be set as default sort.
:::

## Configuring the edit view

In the edit view of a content-type, in the right side of the interface, a **Configure the view** button is displayed. It allows to access the configurations that can be set for the edit view of the content-type, such as the entry title, and the display of the fields of the content-type, including the relational ones.

### Edit view settings

1. In the edit view of your content-type, click on the **Configure the view** button.
2. In the Settings area, define your chosen new settings:

| Setting name    | Instructions                                                                          |
| --------------- | ------------------------------------------------------------------------------------- |
| Entry title     | Choose among the drop-down list the field that should be used as title for the entry. |

3. Click on the **Save** button.

### Edit view display

1. In the edit view of your content-type, click on the **Configure the view** button.
2. In the View area, define what fields (including relational fields) to display in the list view table, in what order and what size:
   - Click the ![Add icon](/img/assets/icons/add_icon.svg) **Insert another field** button to add a new field.
   - Click the delete button ![Clear icon](/img/assets/icons/clear.svg) to remove a field.
   - Click the reorder button ![Drag icon](/img/assets/icons/drag.svg) and drag and drop it to the place you want it to be displayed among the other fields.
3. Click the edit button ![Edit icon](/img/assets/icons/edit.svg) of a field to access its available settings:

| Setting name    | Instructions                                                                              |
| --------------- | ----------------------------------------------------------------------------------------- |
| Label           | Write the label that should be used for the field.                                        |
| Description     | Write a description for the field, to help other administrators fill it properly.         |
| Placeholder     | Write the placeholder that should be displayed by default in the field.                   |
| Editable field  | Click on **ON** or **OFF** to able or disable the edition of the field by administrators. |
| Size            | Select the size in which the field should be displayed in the Content Manager. Note that this setting is neither available for JSON and Rich Text fields, nor dynamic zones and components. |
| Entry title     | *(relational fields only)* Write the entry title that should be used for the relational field. It is recommended to choose well the entry title of relational fields as the more comprehensive it is, the easier it will be for administrators to manage the content of relational fields from the edit view. |

4. Click on the **Save** button.

:::caution
The settings and display of a component's fields cannot be managed and reordered through the entry's edit view configuration page. Click on the **Set the component's layout** button of a component to access the component's own configuration page. You will find the exact same settings and display options as for the entry, but that will specifically apply to your component.

Note also that the settings are defined for the component itself, which means that the settings will automatically be applied for every other content-type where the component is used.
:::



# Introduction to the Content Manager
Source: https://docs-v4.strapi.io/user-docs/content-manager/introduction-to-content-manager

# Introduction to the Content Manager

The Content Manager is a core plugin of Strapi. It is a feature that is always activated by default and cannot be deactivated. It is accessible both when the application is in a development and production environment.

The Content Manager is accessible from ![Content icon](/img/assets/icons/content.svg) *Content Manager* in the main navigation, which opens a sub navigation displaying 2 categories: _Collection types_ and _Single types_. Each category contains the available collection and single content-types which were created beforehand using the [Content-type Builder](/user-docs/content-type-builder/introduction-to-content-types-builder.md). From these 2 categories, administrators can create, manage, and publish content.

:::tip
Click the search icon ![Search icon](/img/assets/icons/search.svg) in the sub navigation to use a text search and find one of your content-types more quickly!
:::

## Collection types

The _Collection types_ category of the Content Manager displays the list of available collection types which are accessible from the ![Content icon](/img/assets/icons/content.svg) Content Manager sub navigation.

For each available collection type multiple entries can be created which is why each collection type is divided into 2 interfaces: the list view and the edit view (see [Writing content](writing-content.md)).

The list view of a collection type displays all entries created for that collection type.

From the list view, it is possible to:

- create a new entry ,
- make a textual search  or set filters  to find specific entries,
- if the [Internationalization plugin](/user-docs/plugins/strapi-plugins#-internationalization-plugin) is installed, filter by locale to display only the entries translated in a chosen locale ,
- configure the fields displayed in the table of the list view ,
- edit ![Edit icon](/img/assets/icons/edit.svg) (see [Writing content](/user-docs/content-manager/writing-content.md)), duplicate ![Duplicate icon](/img/assets/icons/duplicate.svg), or delete ![Delete icon](/img/assets/icons/delete.svg) (see [Deleting content](/user-docs/content-manager/saving-and-publishing-content.md#deleting-content)) an entry,
- select multiple entries to simultaneously [publish, unpublish](/user-docs/content-manager/saving-and-publishing-content#bulk-publish-and-unpublish-), or [delete](/user-docs/content-manager/saving-and-publishing-content.md#deleting-content).

:::tip
Sorting can be enabled for most fields displayed in the list view table (see [Configuring the views of a content-type](../content-manager/configuring-view-of-content-type.md)). Click on a field name, in the header of the table, to sort on that field.
:::

### Filtering entries

Right above the list view table, on the left side of the interface, a **Filters** button is displayed. It allows to set one or more condition-based filters, which add to one another (i.e. if you set several conditions, only the entries that match all the conditions will be displayed).

To set a new filter:

1. Click on the **Filters** button.
2. Click on the 1st drop-down list to choose the field on which the condition will be applied.
3. Click on the 2nd drop-down list to choose the type of condition to apply.
4. Enter the value(s) of the condition in the remaining textbox.
6. Click on the **Add filter** button.

:::note
When active, filters are displayed next to the **Filters** button. They can be removed by clicking on the delete icon ![Clear icon](/img/assets/icons/clear.svg).
:::

### Creating a new entry

On the top right side of the list view interface, an **Add new entry** button is displayed. It allows to create a new entry for your collection type.

Clicking on the new entry button will redirect you to the edit view, where you will be able to write the content of the new entry (see [Writing content](writing-content.md)).

:::note
New entries are only considered created once some of their content has been written and saved once. Only then will the new entry be listed in the list view.
:::

### Configuring the table fields

Above the list view table, on the right, a settings button ![Cog icon](/img/assets/icons/cog.svg) is displayed. It allows to temporarily choose which fields to display in the table or to access permanent view settings.

:::note
Configuring the displayed field of the table in the way detailed below is only temporary: the configurations will be reset as soon as the page is refreshed or when navigating outside the Content Manager. For permanent configurations, go to the list view configuration interface by clicking on the settings button ![Cog icon](/img/assets/icons/cog.svg) and clicking on the **Configure the view** button (see [Configuring the views of a content-type](../content-manager/configuring-view-of-content-type.md)).
:::

To temporarily configure the fields displayed in the table:

1. Click on the settings button ![Cog icon](/img/assets/icons/cog.svg).
2. Tick the boxes associated with the field you want to be displayed in the table.
3. Untick the boxes associated with the fields you do not want to be displayed in the table.

:::tip
Relational fields can also be displayed in the list view. Please refer to [Configuring the views of a content-type](../content-manager/configuring-view-of-content-type.md) for more information on their specificities.
:::

## Single types

The _Single types_ category of the Content Manager displays the list of available single types, which are accessible from the ![Content icon](/img/assets/icons/content.svg) Content Manager sub navigation.

Unlike collection types which have multiple entries, single types are not created for multiple uses. In other words, there can only be one default entry per available single type. There is therefore no list view in the Single types category.

Clicking on a single type will directly redirect you to the edit view, where you will be able to write the content of your single type (see [Writing content](writing-content.md)).



# Managing relational fields
Source: https://docs-v4.strapi.io/user-docs/content-manager/managing-relational-fields

# Managing relational fields

Relation-type fields added to a content-type from the Content-type Builder allow establishing a relation with another collection type. These fields are called "relational fields". 

The content of relational fields is written from the edit view of the content-type they belong to (see [Writing content](writing-content.md)). However, relational fields can point to one or several entries of the other collection type, this is why in the Content Manager it is possible to manage a content-type's relational fields to choose which entries are relevant.

<details>
<summary>Example</summary>

In my Strapi admin panel I have created 2 collection types:

- Restaurant, where each entry is a restaurant
- Category, where each entry is a type of restaurant

I want to assign a category to each of my restaurants, therefore I have established a relation between my 2 collection types: restaurants can have one category.

In the Content Manager, from the edit view of my Restaurant entries, I can manage the Category relational field, and choose which entry of Category is relevant for my restaurant.
</details>

The relational fields of a content-type are displayed among regular fields. For each relational field is displayed a drop-down list containing all available entry titles. It allows to choose which entry the relational fields should point to. You can either choose one or several entries depending on the type of relation that was established.

:::tip
Not all entries are listed by default: more can be displayed by clicking on the **Load more** button. Also, instead of choosing an entry by scrolling the list, you can click any relational field drop-down list and type to search a specific entry.
:::

:::note
If the Draft & Publish feature (see [Saving, publishing and deleting content](saving-and-publishing-content.md)) is activated for the content-type the relational field belongs to, you will notice blue or green dots next to the entries names in the drop-down list. They indicate the status of the entry, respectively draft or published content.
:::

:::caution
If the [Internationalization plugin](/user-docs/plugins/strapi-plugins#-internationalization-plugin) is installed, the list of entries may be limited or differ from one locale to another. Only relevant entries that can possibly be chosen for a relational field will be listed.
:::

## Managing one-choice relational fields

Many-to-one, one-to-one, and one-way types of relation only allow to choose one entry per relational field.

To select the only relevant relational field's entry:

1. In the content-type's edit view, click on the drop-down list of the relational field.
2. Among the list of entries, choose one.

:::tip
You can click on the name of the selected entry to be redirected to the edit view of the relational field's content type. Make sure you save your page first, to avoid losing your last modifications.
:::

To remove the entry selected in the drop-down list, click on the delete button ![Clear icon](/img/assets/icons/clear.svg).

## Managing multiple-choice relational fields

Many-to-many, one-to-many, and many-ways types of relation allow to choose several entries per relational field.

To select the relevant relational field's entries:

1. In the content-type's edit view, click on the drop-down list of the relational field.
2. Among the list of entries, choose one.
3. Repeat step 2 until all relevant entries have been chosen.

:::tip
All selected entries are listed right below the drop-down list. Click on the name of an entry to be redirected to the edit view of the relational field's content-type. Make sure you save your page first, to avoid losing your last modifications.
:::

To remove an entry, click on the cross button ![Cross icon](/img/assets/icons/cross.svg) in the selected entries list.

Entries from multiple-choice relational fields can be reordered, indicated by a drag button ![Drag icon](/img/assets/icons/drag.svg). To move an entry, click and hold it, drag it to the desired position, then release it.



# Reviewing content
Source: https://docs-v4.strapi.io/user-docs/content-manager/reviewing-content

# Reviewing content 

Using the [Review Workflows](/user-docs/settings/review-workflows) feature, you can manage content throughout the content creation process. In the Content Manager, you can change the review stage of the content from the edit view, and keep moving it between stages as needed. You can also change the assignee of the content, assigning it to a Strapi admin user for review.

When viewing your content in the Content Manager, you can see the current stage in the **Review Stage** and the assignee in the **Assignee** column:

## Change review stage

As content is created and revised among your team, you can change the review stage of the content to any stage defined in the review workflow (see [Managing Review Workflows](/user-docs/settings/review-workflows)).

To change the review stage of your content:

1. Access the edit view of your content-type.
2. In the Information box, click on the _Review stage_ drop-down list.
3. Choose the new review stage of your entry. It is automatically saved.

## Change assignee

Entries of a review workflow content type can be assigned to any admin user in Strapi for review.

To change the assignee of your content:

1. Access the edit view of your content-type.
2. In the Information box, click on the _Assignee_ drop-down list.
3. Choose the new assignee of your entry. It is automatically saved.

![Review Stage dropdown](/img/assets/content-manager/review-assignee-dropdown.png)



# Saving, publishing, and deleting content
Source: https://docs-v4.strapi.io/user-docs/content-manager/saving-and-publishing-content

# Saving, publishing and deleting content

Strapi allows you to manage your content throughout its whole lifecycle, whether you are working on its draft version, about to finish it and share it with the world, or wanting to delete it when it's obsolete.

## Saving & publishing content

:::caution
The possibility to manage drafts for contents comes from the Draft & Publish feature. This feature is activated by default, but it can be deactivated for any content-type from the Content-type Builder. If you disabled the Draft & Publish feature, saving your content means saving and publishing at the same time.
:::

Your contents can have 2 statuses: draft or published. You can see the current status indicated on the right of the interface, above the Information box.

By default, each newly created content is a draft. Drafts can be modified and saved at will, using the **Save** button on the top right corner of the edit view, until they are ready to be published.

### Publishing and unpublishing

#### Publishing a draft

To publish a draft, click on the **Publish** button in the top right corner of the content editor.

:::caution
Before publishing a draft, make sure it doesn't have relations with other non-published content, otherwise some of the content may not be available through the API.
:::

When a content is not a draft anymore, but has been published, it is indicated on the right of the interface, above the Information box.

:::tip
To schedule publication, i.e. convert a draft to a published entry at a given date and time, you can follow [this technical guide](https://forum.strapi.io/t/schedule-publications/23184) which requires adding custom code to the Strapi application.
:::

#### Unpublishing content

Published contents can be unpublished, switching back to being drafts again.

To unpublish content, click on the **Unpublish** button in the top right corner of the content editor.

### Bulk publishing and unpublishing

Selecting multiple entries from the Content Manager's list view will display additional buttons to publish or unpublish several entries simultaneously. This is what is called "bulk publishing/unpublishing".

:::caution
If the [Internationalization plugin](/user-docs/plugins/strapi-plugins.md#-internationalization-plugin) is installed, the bulk publish/unpublish actions only apply to the currently selected locale.
:::

![Selecting entries for bulk publish/unpublish](/img/assets/content-manager/bulk-publish.png)

#### Bulk publishing drafts

To publish several entries at the same time:

1. From the list view of the Content Manager, select your entries to publish by ticking the box on the left side of the entries' record.
2. Click on the **Publish** button located above the header of the table.
3. In the *Publish entries* dialog, check the list of selected entries and their status:

   - ![Success icon](/img/assets/icons/CheckCircle.svg) Ready to publish: the entry can be published
   - ![Fail icon](/img/assets/icons/CrossCircle.svg) "[field name] is required", "[field name] is too short" or "[field name] is too long": the entry cannot be published because of the issue stated in the red warning message.

4. (optional) If some of your entries have a ![Edit icon](/img/assets/icons/CrossCircle.svg) status, click the ![Edit icon](/img/assets/icons/edit.svg) edit buttons to fix the issues until all entries have the ![Success icon](/img/assets/icons/CheckCircle.svg) Ready to publish status. Note that you will have to click on the **Refresh** button to update the *Publish entries* dialog as you fix the various entries issues.
5. Click the **Publish** button.
6. In the confirmation dialog box, confirm your choice by clicking again on the **Publish** button.

#### Bulk unpublishing content

To unpublish several entries at the same time:

1. From the list view of the Content Manager, select your entries to unpublish by ticking the box on the left side of the entries' record.
2. Click on the **Unpublish** button located above the header of the table.
3. In the confirmation dialog box, confirm your choice by clicking again on the **Unpublish** button.

## Deleting content

You can delete content by deleting any entry of a collection type, or the default entry of a single type.

1. In the edit view of the entry, click on the **Delete this entry** button, located at the bottom of the right side of the interface.
2. In the window that pops up, click on the **Confirm** button to confirm the deletion.

:::tip
You can delete entries from the list view of a collection type, by clicking on the delete button ![Delete icon](/img/assets/icons/delete.svg) on the right side of the entry's record in the table. <br /> You also have the possibility to delete multiple entries at the same time. To do so, select your entries to delete by ticking the box on the left side of the entries' record. Then, click on the **Delete** button located above the header of the table.
:::

:::caution
If the [Internationalization plugin](/user-docs/plugins/strapi-plugins.md#-internationalization-plugin) is installed, entries can only be deleted one locale at the time.
:::



# Translating content
Source: https://docs-v4.strapi.io/user-docs/content-manager/translating-content

# Translating content

With the [Internationalization plugin](/user-docs/plugins/strapi-plugins#-internationalization-plugin) installed, it is possible to manage content in more than one language, called "locale". To manage content in a specific locale, the latter must be added beforehand through the Internationalization settings (see [Configuring Internationalization locales](../settings/internationalization)).

In the Content Manager, when the Internationalization plugin is installed, some options are added to the edit view:

- an Internationalization box, displayed in the right side of the interface, from where it is possible to switch locales
- icons displayed next to every field to indicate whether the field can be translated or not:
  - ![World icon](/img/assets/icons/world.svg) indicates that the field can be translated,
  - ![Striked world icon](/img/assets/icons/world_striked.svg) indicates that the field cannot be translated: its content is the same for every locale (i.e. changing the value of a non-localizable field changes it for all other locales).

The Internationalization plugin also allows dynamic zones and components to differ from one locale to another. Depending on the locale, dynamic zones can indeed have different structures depending on the locale, and repeatable components can have different entries and be organized differently as well.

:::caution
Content can only be managed one locale at the time. It is not possible to edit or publish content for several locales at the same time (e.g. Clicking on the **Publish** button will only publish the content for the locale you are currently working on).
:::

To translate content in another locale:

1. Access the edit view of your collection or single type.
2. In the Internationalization box, click on the *Locales* drop-down list.
3. Choose the locale in which you want to translate your content.
4. Translate your content by filling up your content-type's fields (see [Writing content](writing-content.md)). 

:::tip
Click on the **Fill in from another locale** button in the Internationalization box for all non relational fields to be filled up with the values of another chosen locale. It can be useful if you do not remember what was the exact content in another locale.
:::



# Writing Content
Source: https://docs-v4.strapi.io/user-docs/content-manager/writing-content

# Writing content

In Strapi, writing content consists in filling up fields, which are meant to contain specific content (e.g. text, numbers, media, etc.). These fields were configured for the collection or single type beforehand, through the [Content-type Builder](/user-docs/content-type-builder).

## Filling up fields

To write or edit content:

1. Access the edit view of your collection type or single type.
2. Write your content, following the available field schema. You can refer to the table below for more information and instructions on how to fill up each field type.

| Field name  | Instructions                                                                                                                                                                                                                                                                                                                                                              |
| ----------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| Text        | Write your content in the textbox.                                                                                                                                                                                                                                                                                                                                        |
| Rich text (Markdown) | Write your textual content in the editor, in Markdown. Some basic formatting options (titles, bold, italics, underline) are available in the top bar of the editor to apply to selected text. A **Preview mode/Markdown mode** button to switch between modes is also available. <br /><br /> 💡 The box can be expanded by clicking on **Expand** in the bottom bar. It displays side by side, at the same time, the textbox that you can edit and the preview. |
| Rich text (Blocks) | Write and manage your content in the editor, which automatically renders live all additions/updates. In the Blocks editor, paragraphs behave as blocks of text: hovering on a paragraph will display an icon ![Reorder icon](/img/assets/icons/reorder.svg) on which to click to reorder the content. Options to format or enrich the content are also accessible from the top bar of the editor (basic formatting options, code, links, image etc.). <br /><br /> 💡 In the Blocks editor, you can use text formatting keyboard shortcuts (e.g. `ctrl + B` to apply bold formatting on selected content) as well as Markdown shortcuts. <details><summary>List of available Markdown shortcuts in Blocks</summary><ul><li>`#` to `######` to convert to H1 to H6 headings</li><li>`>` to convert to a quote</li><li>`-`, `*` or `+` to convert to a bullet list</li><li>`1.` to convert to a numbered list</li><li>`![` to add an image</li><li><code>```</code> to convert to a code block</li></ul></details> 💡 You can also click on the **Expand** button <!-- add icon --> in the bottom right corner to expand the Rich text field. |
| Number      | Write your number in the textbox. Up and down arrows, displayed on the right of the box, allow to increase or decrease the current number indicated in the textbox.                                                                                                                                                                                                       |
| Date        | 1. Click the date and/or time box. <br /> 2. Type the date and time or choose a date using the calendar and/or a time from the list. The calendar view fully supports keyboard-based navigation.
| Boolean     | Click on **OFF** or **ON**.                                                                                                                                                                                                                                                                                                                                               |
| Relation    | Choose an entry from the drop-down list. See [Managing relational fields](/user-docs/content-manager/managing-relational-fields.md) for more information.                                                                                                                                                                                                          |
| Email       | Write a complete and valid email address.                                                                                                                                                                                                                                                                                                                                 |
| Password    | Write a password. <br /><br /> 💡 Click the eye icon, displayed on the right of the box, to show the password.                                                                                                                                                                                                                                                                |
| Enumeration | 1. Click the drop-down list. <br /> 2. Choose an entry from the list.                                                                                                                                                                                                                                                                                                       |
| Media       | 1. Click the media area. <br /> 2. Choose an asset from the [Media Library](/user-docs/media-library) or from a [folder](/user-docs/media-library/organizing-assets-with-folders.md) if you created some, or click the **Add more assets** button to add a new file to the Media Library. <br /><br /> 💡 It is possible to drag and drop the chosen file in the media area.                                                                                                                                   |
| JSON        | Write your content, in JSON format, in the code textbox.                                                                                                                                                                                                                                                                                                                  |
| UID         | Write a unique identifier in the textbox. A "Regenerate" button, displayed on the right of the box, allows automatically generating a UID based on the content type name.                                                                                                                                                                                                |
:::note
Filling out a [custom field](/user-docs/content-type-builder/configuring-fields-content-type.md#custom-fields) depends on the type of content handled by the field. Please refer to the dedicated documentation for each custom field hosted on the [Marketplace](https://market.strapi.io).
:::

### Components

Components are a combination of several fields, which are grouped together in the edit view. Writing their content works exactly like for independent fields, but there are some specificities to components.

There are 2 types of components: non-repeatable and repeatable components.

#### Non-repeatable components

Non-repeatable components are a combination of fields that can be used only once.

By default, the combination of fields is not directly displayed in the edit view:

1. Click on the add button ![Add icon](/img/assets/icons/add_circle.svg) to add the component.
2. Fill in the fields of the component.

To delete the non-repeatable component, click on the delete button ![Delete icon](/img/assets/icons/delete.svg), located in the top right corner of the component area.

#### Repeatable components

Repeatable components are also a combination of fields, but they allow the creation of multiple component entries, all following the same combination of fields.

To add a new entry and display its combination of fields:

1. Click on the add button ![Add icon](/img/assets/icons/add_circle.svg) to add the component.
2. Fill in the fields of the component.
3. (optional) Click on the **Add new entry** button and fill in the fields again.

The repeatable component entries can be reordered or deleted directly in the edit view, using buttons displayed on the right of the entry area.

- Use the drag & drop button ![Drag icon](/img/assets/icons/drag.svg) to reorder entries of your repeatable component.
- Use the delete button ![Delete icon](/img/assets/icons/delete.svg) to delete an entry from your repeatable component.

:::note
Unlike regular fields, the order of the entries of a repeatable component is important. It should correspond exactly to how end users will read/see the content.
:::

### Dynamic zones

Dynamic zones are a combination of components, which themselves are composed of several fields. Writing the content of a dynamic zone requires additional steps in order to access the fields.

1. Click on the ![Add icon](/img/assets/icons/add_circle.svg) **Add a component to [dynamic zone name]** button.
2. Choose a component available for the dynamic zone.
3. Fill in the fields of the component.

Dynamic zones' components can also be reordered or deleted directly in the edit view, using buttons displayed in the top right corner of the component area.

- Use the drag & drop button ![Drag icon](/img/assets/icons/drag.svg) to reorder components in your dynamic zone.
- Use the delete button ![Delete icon](/img/assets/icons/delete.svg) to delete a component from your dynamic zone.

:::tip
You can also use the keyboard to reorder components: focus the component using Tab, press Space on the drag & drop button ![Drag icon](/img/assets/icons/drag.svg) and use the arrow keys to then re-order, pressing Space again to drop the item.
:::

:::note
Unlike regular fields, the order of the fields and components inside a dynamic field is important. It should correspond exactly to how end users will read/see the content.
:::



# Configuring fields for content-types
Source: https://docs-v4.strapi.io/user-docs/content-type-builder/configuring-fields-content-type

# Configuring fields for content-types

:::note Development-only
The Content-type Builder is only accessible to create and update content-types when your Strapi application is in a development environment, else it will be in a read-only mode in other environments.
:::

Content-types are composed of one or several fields. Each field is designed to contain specific kind of data, filled up in the Content Manager (see [Writing content](/user-docs/content-manager/writing-content.md)).

In the Content-type Builder, fields can be added at the creation of a new content-type or component, or afterward when a content-type or component is edited or updated. The following documentation lists all existing regular fields but also tackles the specificities of components and dynamic zones. For each, you will find a definition, explanation of the form they take once in the Content Manager, and instructions to configure them.

:::note
Depending on what content-type or component is being created or edited, not all fields -including components and dynamic zones- are always available.
:::

</Tabs>

### <img width="28" src="/img/assets/icons/ctb_richtext.svg" /> Rich Text (Markdown)

The Rich Text (Markdown) field displays an editor with basic formatting options to manage rich text written in Markdown. This field can be used for long written content.

</Tabs>

### <img width="28" src="/img/assets/icons/ctb_richtextblocks.svg" /> Rich Text (Blocks)

The Rich Text (Blocks) field displays an editor with live rendering and various options to manage rich text. This field can be used for long written content, even including images and code.

</Tabs>

:::strapi Front-end renderers
If using the Blocks editor, we recommend that you also use the official [Strapi Blocks React Renderer](https://github.com/strapi/blocks-react-renderer) to render the content in a React frontend. Other community-supported renderers are also available on [npm](https://www.npmjs.com/search?q=strapi%20blocks%20renderer).
:::

### <img width="28" src="/img/assets/icons/ctb_number.svg" /> Number

The Number field displays a field for any kind of number: integer, decimal and float.

</Tabs>

### <img width="28" src="/img/assets/icons/ctb_date.svg" /> Date

The Date field can display a date (year, month, day), time (hour, minute, second) or datetime (year, month, day, hour, minute, and second) picker.

</Tabs>

### <img width="28" src="/img/assets/icons/ctb_boolean.svg" /> Boolean

The Boolean field displays a toggle button to manage boolean values (e.g. Yes or No, 1 or 0, True or False).

</Tabs>

### <img width="28" src="/img/assets/icons/ctb_relation.svg" /> Relation

The Relation field allows to establish a relation with another content-type, that must be a collection type.

There are 6 different types of relations:

- <img width="25" src="/img/assets/icons/ctb_relation_oneway.svg" /> One way: Content-type A *has one* Content-type B
- <img width="25" src="/img/assets/icons/ctb_relation_1to1.svg" /> One-to-one: Content-type A *has and belong to one* Content-type B
- <img width="25" src="/img/assets/icons/ctb_relation_1tomany.svg" /> One-to-many: Content-type A *belongs to many* Content-type B
- <img width="25" src="/img/assets/icons/ctb_relation_manyto1.svg" /> Many-to-one: Content-type B *has many* Content-type A
- <img width="25" src="/img/assets/icons/ctb_relation_manytomany.svg" /> Many-to-many: Content-type A *has and belongs to many* Content-type B
- <img width="25" src="/img/assets/icons/ctb_relation_manyway.svg" /> Many way: Content-type A *has many* Content-type B

</Tabs>

### <img width="28" src="/img/assets/icons/ctb_email.svg" /> Email

The Email field displays an email address field with format validation to ensure the email address is valid.

</Tabs>

### <img width="28" src="/img/assets/icons/ctb_password.svg" /> Password

The Password field displays a password field that is encrypted.

</Tabs>

### <img width="28" src="/img/assets/icons/ctb_enum.svg" /> Enumeration

The Enumeration field allows to configure a list of values displayed in a drop-down list.

<!--- Add note about Enumeration fields known issues (i.e. recommending a relation using either oneWay or manyWay for some use-cases instead of enum) --->

</Tabs>

:::caution
Since Strapi v4.1.3, enumeration values should always have an alphabetical character preceding any number as it could otherwise cause the server to crash without notice when the GraphQL plugin is installed.
:::

### <img width="28" src="/img/assets/icons/ctb_media.svg" /> Media

The Media field allows to choose one or more media files (e.g. image, video) from those uploaded in the Media Library of the application.

</Tabs>

### <img width="28" src="/img/assets/icons/ctb_json.svg" /> JSON

The JSON field allows to configure data in a JSON format, to store JSON objects or arrays.

</Tabs>

### <img width="28" src="/img/assets/icons/ctb_uid.svg" /> UID

The UID field displays a field that sets a unique identifier, optionally based on an existing other field from the same content-type.

</Tabs>

:::tip
The UID field can be used to create a slug based on the Attached field.
:::

## Custom fields

Custom fields are a way to extend Strapi’s capabilities by adding new types of fields to content-types or components. Once installed (see [Marketplace](/user-docs/plugins/installing-plugins-via-marketplace.md) documentation), custom fields are listed in the _Custom_ tab when selecting a field for a content-type.

Each custom field type can have basic and advanced settings. The [Marketplace](https://market.strapi.io/plugins?categories=Custom+fields) lists available custom fields, and hosts dedicated documentation for each custom field, including specific settings.

## <img width="28" src="/img/assets/icons/ctb_component.svg" /> Components

Components are a combination of several fields. Components allow to create reusable sets of fields, that can be quickly added to content-types, dynamic zones but also nested into other components.

When configuring a component through the Content-type Builder, it is possible to either:

- create a new component by clicking on *Create a new component* (see [Creating a new component](/user-docs/content-type-builder/creating-new-content-type#creating-a-new-component)),
- or use an existing one by clicking on *Use an existing component*.

</Tabs>

## <img width="28" src="/img/assets/icons/ctb_dz.svg" /> Dynamic zones

Dynamic zones are a combination of components that can be added to content-types. They allow a flexible content structure as once in the Content Manager, administrators have the choice of composing and rearranging the components of the dynamic zone how they want.

</Tabs>

After configuring the settings of the dynamic zone, its components must be configured as well. It is possible to either choose an existing component or create a new one.

:::caution
When using dynamic zones, different components cannot have the same field name with different types (or with enumeration fields, different values).
:::



# Creating content-types
Source: https://docs-v4.strapi.io/user-docs/content-type-builder/creating-new-content-type

# Creating content-types

:::note Development-only
The Content-type Builder is only accessible to create and update content-types when your Strapi application is in a development environment, else it will be in a read-only mode in other environments.
:::

The Content-type Builder allows to create new content-types: single and collection types. Although they are not proper content-types as they cannot exist independently, components can also be created through the Content-type Builder, in the same way as collection and single types.

## Creating a new content-type

Content types are created from the Content-type Builder's Collection types and Single types categories, both displayed in the Content-type Builder sub navigation.

To create a new content-type:

1. Choose whether you want to create a collection type or a single type.
2. In the category of the content-type you want to create, click on **Create a new collection/single type**.
3. In the content-type creation window, write the name of the new content-type in the *Display name* textbox.
4. Check the *API UID* to make sure the automatically pre-filled values are correct. Collection type names are indeed automatically pluralized when displayed in the Content Manager. It is recommended to opt for singular names, but the *API UID* field allows to fix any pluralization mistake.
5. (optional) In the Advanced Settings tab, configure the available settings for the new content-type:

      | Setting name    | Instructions                                                                                                                                     |
      |-----------------|--------------------------------------------------------------------------------------------------------------------------------------------------|
      | Draft & publish | Tick the checkbox to allow entries of the content-type to be managed as draft versions, before they are published (see [Saving & publishing content](/user-docs/content-manager/saving-and-publishing-content#saving-publishing-content)). |
      | Localization | (if the [Internationalization plugin](/user-docs/plugins/strapi-plugins#-internationalization-plugin) is installed) Tick the checkbox to allow entries of the content-type to be translated into other locales. |
      | Review workflows |  Tick the checkbox to allow entries of the content-type to be managed through defined review stages (see [Managing Review Workflows](/user-docs/settings/review-workflows)). |

6. Click on the **Continue** button.
7. Add and configure chosen fields for your content-type (see [Configuring fields for content-types](/user-docs/content-type-builder/configuring-fields-content-type)).
8. Click on the **Save** button.

:::caution
New content-types are only considered created once they have been saved. Saving is only possible if at least one field has been added and properly configured. If these steps have not been done, a content-type cannot be created, listed in its category in the Content-type Builder, and cannot be used in the Content Manager.
:::

## Creating a new component

Components are created from the same-named category of the Content-type Builder's sub navigation.

To create a new component:

1. In the Components category of the Content-type Builder sub navigation, click on **Create a new component**.
2. In the component creation window, configure the base settings of the new component:
   - Write the name of the component in the *Name* textbox.
   - Select an available category, or enter in the textbox a new category name to create one.
   - _(optional)_ Choose an icon representing the new component. You can use the search ![Search icon](/img/assets/icons/search.svg) to find an icon instead of scrolling through the list.
3. Click on the **Continue** button.
4. Add and configure chosen fields for your component (see [Configuring fields for content-types](/user-docs/content-type-builder/configuring-fields-content-type)).
5. Click on the **Save** button.



# Introduction to the Content-type Builder
Source: https://docs-v4.strapi.io/user-docs/content-type-builder/introduction-to-content-types-builder

# Introduction to the Content-type Builder

The Content-type Builder is a core plugin of Strapi. It is a feature that is always activated by default and cannot be deactivated. The Content-type Builder is however only accessible when the application is in a development environment.

Administrators can access the Content-type Builder from ![CTB icon](/img/assets/icons/content_types_builder.svg) _Content-type Builder_ in the main navigation of the admin panel.

From the Content-type Builder, administrators can create and manage content-types: collection types and single types but also components.

- Collection types are content-types that can manage several entries.
- Single types are content-types that can only manage one entry.
- Components are a data structure that can be used in multiple collection types and single types.

All 3 are displayed as categories in the sub navigation of the Content-type Builder. In each category are listed all content-types and components that have already been created.

From each category of the Content-type Builder sub navigation, it is possible to:

- click on an existing content-type or component to access it and edit it (see [Managing content-types](/user-docs/content-type-builder/managing-content-types)),
- or create a new content-type or component (see [Creating content-types](/user-docs/content-type-builder/creating-new-content-type)).

:::tip
Click the search icon ![Search icon](/img/assets/icons/search.svg) in the Content-type Builder sub navigation to find a specific collection type, single type, or component.
:::



# Managing content-types
Source: https://docs-v4.strapi.io/user-docs/content-type-builder/managing-content-types

# Managing content-types

:::note development-only
The Content-type Builder is only accessible to create and update content-types when your Strapi application is in a development environment, else it will be in a read-only mode in other environments.
:::

The Content-type Builder allows to manage any existing content-type or component, even if it is already being used in the Content Manager. They can only be managed one at a time.

To manage a content-type or a component, click on its name in the Collection types, Single types or Components category.

## Editing content-types

Managing a content-type or component can include editing the general settings and the fields, but also deleting the whole content-type or component. For any chosen content-type of component, the right side of the Content-type Builder interface displays all available editing options.

- Next to the name and optional description of the content-type or component, an ![Edit icon](/img/assets/icons/edit.svg) **Edit** button  allows to access the [general settings](#editing-content-type-or-component-settings) of the content-type or component.
- In the top right corner:
  - the **Add new field** and **Save** buttons  allow to respectively add another field to the content-type or component (see [Configuring fields for content-types](/user-docs/content-type-builder/configuring-fields-content-type)), or save any ongoing modification.
  - the **Configure the view** button allows to access the view configuration interface (see [Configuring the edit view](/user-docs/content-manager/configuring-view-of-content-type#configuring-the-edit-view))
- Below the previous editing options, a table   lists all the fields created and configured for the content-type or component. From the fields table, it is possible to:
  - Click on the edit button ![Edit icon](/img/assets/icons/edit.svg) to edit a field
  - Click on the delete button ![Delete icon](/img/assets/icons/delete.svg) to delete a field

:::caution
Editing a field allows renaming it. However, keep in mind that regarding the database, renaming a field means creating a whole new field and deleting the former one. Although nothing is deleted from the database, the data that was associated with the former field name will not be accessible from the admin panel of your application anymore.
:::

### Editing content-type or component settings

The settings of a content-type or component can be edited through the Content-type Builder. There are two tabs available: **Basic Settings** and **Advanced Settings**.

#### Basic settings

The **Basic Settings** tab allows to edit the following properties of the content-type or component:

* **Display name**: Name of the content-type or component as it will be displayed in the admin panel.
* **API ID (singular)**: Name of the content-type or component as it will be used in the API. It is automatically generated from the display name, but can be edited.
* **API ID (plural)**: Plural name of the content-type or component as it will be used in the API. It is automatically generated from the display name, but can be edited.
* **Type**: Type of the content-type or component. It can be either a **Collection type** or a **Single type**.

#### Advanced settings

The **Advanced Settings** tab allows to edit the following properties of the content-type or component:

* **Draft & Publish**: Enable the draft and publish feature for the content-type or component. It is disabled by default.
* **Internationalization**: Enable the internationalization feature for the content-type or component. It is disabled by default.
* **Review workflows**: Enable the [Review Workflows](/user-docs/settings/review-workflows)  feature for the content-type. It is disabled by default.

## Deleting content-types

Content types and components can be deleted through the Content-type Builder. Deleting a content-type automatically deletes all entries from the Content Manager that were based on that content-type. The same goes for the deletion of a component, which is automatically deleted from every content-type or entry where it was used.

To delete a content-type or component:

1. In the Content-type Builder sub navigation, click on the name of the content-type or component to delete.
2. In the edition interface of the chosen content-type or component, click on the ![Edit icon](/img/assets/icons/edit.svg) **Edit** button on the right side of the content-type's or component's name.
3. In the edition window, click on the **Delete** button.
4. In the confirmation window, confirm the deletion.

:::caution
Deleting a content-type only deletes what was created and available from the Content-type Builder, and by extent from the admin panel of your Strapi application. All the data that was created based on that content-type is however kept in the database. For more information, please refer to the related [GitHub issue](https://github.com/strapi/strapi/issues/1114).
:::



# Setting up the admin panel
Source: https://docs-v4.strapi.io/user-docs/getting-started/setting-up-admin-panel

Before going over individual features, we recommend the following steps to set up and configure your Strapi admin panel correctly. Once you complete the setup, you can access the admin panel through the provided URL.

## Accessing the admin panel

The admin panel is the back office of your Strapi application. From the admin panel, you will be able to manage content-types, and write their actual content. It is also from the admin panel that you will manage users, both administrators and end users of your Strapi application.

:::caution
In order to access the admin panel, your Strapi application must be launched, and you must be aware of the URL to its admin panel (e.g. `api.example.com/admin`).
:::

To access the admin panel:

1. Go to the URL of your Strapi application's admin panel.
2. Enter your credentials to log in.
3. Click on the **Login** button. You should be redirected to the homepage of the admin panel.

### Using SSO for authentication 

If your Strapi application was configured to allow authentication through SSO (see [Configuring Single Sign-On](/user-docs/settings/single-sign-on)), you can access the admin panel using a specific provider instead of logging in with a regular Strapi administrator account.

To do so, in the login page of your Strapi application, click on a chosen provider. If you cannot see your provider, click the ![icon more](/img/assets/getting-started/icon_more.png) button to access the full list of all available providers. You will be redirected to your provider's own login page where you will be able to authenticate.

## Setting up your administrator profile

If you are a new administrator, we recommend making sure your profile is all set, before diving into your Strapi application. From your administrator profile, you are able to modify your user information, such as name, username, email or password. You can also choose the language of the interface for your Strapi application.

To modify your user information:

1. Click on your account name or initials in the bottom left hand corner of the main navigation of your Strapi application.
2. In the drop-down menu, click on **Profile**.
3. Modify the information of your choice:

| Profile & Experience | Instructions                                                                                                                                                                                                      |
| -------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| First name           | Write your first name in the textbox.                                                                                                                                                                             |
| Last name            | Write your last name in the textbox.                                                                                                                                                                              |
| Email                | Write your complete email address in the textbox.                                                                                                                                                                 |
| Username             | (optional) Write a username in the textbox.                                                                                                                                                                       |
| Interface language   | Among the drop-down list, choose a language for your Strapi application interface.                                                                                                                                |
| Interface mode       | Among the drop-down list, choose a mode for your Strapi application interface: either "Light mode" or "Dark mode". Note that by default, the chosen mode for a Strapi application is based on the browser's mode. |

4. Click on the **Save** button.

### Changing your password

To change the password of your account:

1. Go to your administrator profile.
2. Fill in the password-related options:

| Password modification |                                                                                                                  |
| --------------------- | ---------------------------------------------------------------------------------------------------------------- |
| Current password      | Write your current password in the textbox. <br/> 💡 You can click on the eye icon for the password to be shown. |
| Password              | Write the new password in the textbox. <br/> 💡 You can click on the eye icon for the password to be shown.      |
| Password confirmation | Write the same new password in the textbox. <br/> 💡 You can click on the eye icon for the password to be shown. |

3. Click on the **Save** button.

---

Congratulations on being a new Strapi user! You're now ready to discover all the features and options that Strapi has to offer!



# User Guide fundamentals
Source: https://docs-v4.strapi.io/user-docs/getting-started/user-guide-fundamentals

Before going any further into this user guide, we recommend you to acknowledge the main concepts below. They will help you to understand how Strapi works, and ensure a smooth Strapi experience.

- **Development, Staging or Production Environment** <br/> When you start working on your application, it is in a development environment, which is the status for the content structure and application configuration. After deploying your application, it is in production or staging environment. This status change impacts how you can use your Strapi application, as some features are only available in development environment, such as the Content-type Builder. In this user guide the availability or not of a feature, depending on the application status, is always mentioned in the feature's introduction.

- **Versions** <br/> Strapi is constantly evolving and growing. This implies that new releases are quite frequent, to improve what is already available but also to add new features to Strapi. For every new Strapi version, we communicate through our main channels and by sending notifications both on your terminal (when launching your Strapi application), and on your application's admin panel. We always recommend to use the latest version. However, we always keep live both the documentation of the current Strapi version, and the documentation of the previous major version — the latter being officially and actively maintained for up to 12 months after the release of the newest Strapi version.

- **License and Pricing Plans** <br/> As a Strapi user you have the choice between using the Community Edition, which is entirely free, or the [Enterprise Edition](https://strapi.io/pricing-self-hosted). In this user guide, if a feature is only available for the Enterprise Edition, an  badge is displayed beside the section's title. Strapi can also be hosted on Strapi Cloud by subscribing to a tier that meets the functionality, support, and customization options specified on [Strapi Cloud](https://strapi.io/pricing-cloud). In this user guide, the , , and  badges can be displayed beside a section's title to indicate the feature is available on the tier.

- **Future flags** <br/> Some incoming Strapi features are not yet ready to be shipped to all users, but Strapi still offers community users the opportunity to provide early feedback on these new features or changes. This feedback is invaluable in enhancing the feature before the final release. Such experimental features are indicated by a  badge throughout the documentation and enabling these features requires enabling the corresponding future flags (see [Developer Docs](/dev-docs/configurations/features#enabling-a-future-flag)).

- **Roles and Permissions** <br/> Some features of the admin panel, as well as the content managed with Strapi itself, are ruled by a system of permissions. From your Strapi admin panel, you have the possibility to define, at a detailed level, the roles and permissions of all administrators and end users. In this user guide, all features and possible options are documented. It is however possible, depending on your role and permissions, that you may not be able to access all these features and options. In that case, please refer to the main Super Admin of your Strapi application.

With all this in mind, you should be ready to start your Strapi experience!



# Welcome to the Strapi User Guide!
Source: https://docs-v4.strapi.io/user-docs/intro

# Welcome to the Strapi User Guide!

This 

:::strapi Welcome to the Strapi community!

If you have any trouble with your Strapi experience, you can reach us through [GitHub](https://github.com/strapi/) or our [forum](https://forum.strapi.io/)! The Strapi Community and Strapi team are always available to answer your questions or help you with anything!



# Creating a release
Source: https://docs-v4.strapi.io/user-docs/releases/creating-a-release

# Creating a release   

The ![Releases icon](/img/assets/icons/releases.svg) [Releases](/user-docs/releases/introduction) page allows creating new releases that will be used to organize entries.

<br /><br />

To create a new release:

1. Click the **+ New Release** button in the upper right corner of the Releases page.  
2. Give the release a name.
3. Define the date, time, and timezone to schedule the release (see [scheduling a release](/user-docs/releases/managing-a-release#scheduling-a-release)). Alternatively, uncheck the **Schedule release** checkbox if you do not want to automatically publish the release and release it manually instead.
4. Click the **Continue** button.

Adding entries to a release must be done from the Content Manager. You can add a single entry to a release while creating or editing the entry [in the edit view](/user-docs/content-manager/adding-content-to-releases).

<!-- TODO: for later, when multiple addition is implemented, probably in 4.20 -->
<!-- 
Adding entries to a release must be done from the Content Manager:

- You can add multiple entries to a release [from the list view](/user-docs/content-manager/adding-content-to-releases#adding-multiple-entries-to-a-release).
- You can also add a single entry to a release while creating or editing the entry [in the edit view](/user-docs/content-manager/adding-content-to-releases#adding-a-single-entry-to-a-release). -->



# Introduction to Releases
Source: https://docs-v4.strapi.io/user-docs/releases/introduction

# Releases  

Releases enables content managers to organize entries into containers that can perform publish and unpublish actions simultaneously. A release can contain entries from different content types and can mix locales.

Administrators can access Releases from ![Releases icon](/img/assets/icons/releases.svg) _Releases_ in the main navigation of the admin panel.

From the Releases view, it is possible to:

- [create a new release](/user-docs/releases/creating-a-release),
- view pending and done releases,
- view which releases are [scheduled](/user-docs/releases/managing-a-release#scheduling-a-release), and when they will be published (in the Pending tab) or have been published (in the Done tab),
- and click on a release to [manage its content](/user-docs/releases/managing-a-release).



# Managing a release
Source: https://docs-v4.strapi.io/user-docs/releases/managing-a-release

# Managing a release  

Adding entries to a [release](/user-docs/releases/introduction) allow viewing them altogether on a single page.

<br /><br />

From a release page, you can:

- edit the name of the release or delete the release 
- manually publish the release ,
- adjust the view to display entries grouped either by locale, content-type, or action (publish/unpublish) ,
- decide whether individual items included to the releases will be published or unpublished with the release .
- edit a specific entry or remove it from the release .

## Editing a release

You can rename a release. To do so, while on a release page:

1. Click on the ![More icon](/img/assets/icons/more.svg) button in the top right corner of the admin panel.
2. Select ![Edit icon](/img/assets/icons/edit.svg) **Edit**.
3. In the modal, change the name of the release in the _Name_ field.
4. Click **Continue** to save the change.

## Scheduling a release

Releases can be [published manually](#publishing-a-release) or scheduled to be automatically published at a given date and time, with the timezone of your choice.

You can schedule a release:
- when [creating the release](/user-docs/releases/creating-a-release),
- or once the release is already created, by editing it.

To schedule an existing release, while on a release page:
1. Click on the ![More icon](/img/assets/icons/more.svg) button in the top right corner of the admin panel.
2. Select ![Edit icon](/img/assets/icons/edit.svg) **Edit**.
3. In the modal, check the **Schedule release** checkbox.
4. Select a date, time, and timezone for the release to be published.
5. Click **Save**.

## Choosing how entries are grouped

A release page can display entries either grouped by locale, content-type, or action (publish or unpublish). To change how entries are grouped, click the **Group by …** dropdown and select an option from the list.

## Publishing or unpublishing entries

A release includes multiple entries. You can set the state of each entry with the **Publish** and **Unpublish** action buttons. When the release itself is “published” then the desired actions will be simultaneously performed on each entry.

:::caution
Since publishing an entry with a release means turning a draft entry into a published entry, Releases will not work if [Draft & Publish](/user-docs/content-manager/saving-and-publishing-content) is disabled for the content-type.
:::

## Editing an entry from a release

By clicking on the ![More icon](/img/assets/icons/more.svg) at the end of the line of an entry and select the **Edit entry** button, you will be redirected to this entry in the Content Manager so you can edit it.

## Removing entries from a release

Entries can be removed from a release. To do so, click the ![More icon](/img/assets/icons/more.svg) at the end of the line of an entry and select the **Remove from release** button.

## Publishing a release

Publishing a release means that all the actions (publish or unpublish) defined for each entry included in the release will be performed simultaneously. To publish a release, click the **Publish** button in the top right corner of the admin panel.

The _Status_ column displays the status of each entry:

   - ![Success icon](/img/assets/icons/CheckCircle.svg) Already published: the entry is already published and publishing the release will not affect this entry 
   - ![Success icon](/img/assets/icons/CheckCircle.svg) Ready to publish: the entry is ready to  be published with the release
   - ![Fail icon](/img/assets/icons/CrossCircle.svg) "[field name] is required", "[field name] is too short" or "[field name] is too long": the entry cannot be published because of the issue stated in the red warning message. 
   
If some of your entries have a ![Fail icon](/img/assets/icons/CrossCircle.svg) status, click the ![More icon](/img/assets/icons/more.svg) and the **Edit the entry** button to fix the issues until all entries have the ![Success icon](/img/assets/icons/CheckCircle.svg) status. Note that you will have to click on the **Refresh** button to update the release page as you fix the various entries issues.

:::caution
Once a release is published, the release itself cannot be updated. You can not re-release that specific release with the same group of entries with some modifications; you must create another release.
:::

## Deleting a release

You can delete a release. Deleting a release will only delete the release itself, but not the content-type entries included in the release. To delete a release, while on the release page:

1. Click on the ![More icon](/img/assets/icons/more.svg) button in the top right corner of the admin panel.
2. Select ![Delete icon](/img/assets/icons/delete.svg) **Delete**.
3. In the confirmation dialog, click ![Delete icon](/img/assets/icons/delete.svg) **Confirm**.



# Overview & Custom logo
Source: https://docs-v4.strapi.io/user-docs/settings/admin-panel

# Customizing the logo

The default Strapi logos, displayed in the main navigation of a Strapi application and the authentication pages, can be modified from ![Settings icon](/img/assets/icons/settings.svg) *Settings > Global settings > Overview*.

:::note
Both logos can also be customized programmatically via the Strapi application's configuration files (see [Developer Documentation](/dev-docs/admin-panel-customization#logos)). However, the logos uploaded via the admin panel supersedes any logo set through the configuration files.
:::

To customize the logos:

1. Go to the *Global settings > Overview* sub-section of the settings interface.
2. Click on the upload area.
3. Upload your chosen logo, either by browsing files, drag & dropping the file in the right area, or by using a URL. The logo shouldn't be more than 750x750px. 
4. Click on the **Upload logo** button in the upload window.
5. Click on the **Save** button in the top right corner.

:::tip
Once uploaded, the new logo can be replaced with another one ![Add icon](/img/assets/icons/add.svg), or reset ![Reset icon](/img/assets/icons/reset_icon.svg) with the default Strapi logo or the logo set in the configuration files.
:::



# API tokens
Source: https://docs-v4.strapi.io/user-docs/settings/API-tokens

# Managing API tokens

:::prerequisites
* Administrators can create, read, update, or delete API tokens only if proper permissions are granted (see [Configuring administrator roles](/user-docs/users-roles-permissions/configuring-administrator-roles#plugins-and-settings)).
* The *Global settings > API Tokens* sub-section of the settings interface is accessible in the admin panel only if the _API tokens > Read_ permission is granted.
:::

API tokens allow users to authenticate REST and GraphQL API queries (see [Developer Documentation](/dev-docs/configurations/api-tokens)). Administrators can manage API tokens from ![Settings icon](/img/assets/icons/settings.svg) *Settings > Global settings > API Tokens*.

The *API Tokens* settings sub-section displays a table listing all of the created API tokens.

The table displays each API token's name, description, date of creation, and date of last use. From the table, administrators can also:

- Click on the ![edit button](/img/assets/icons/edit.svg) to edit an API token's name, description, type, duration or [regenerate the token](#regenerating-an-api-token).
- Click on the ![delete button](/img/assets/icons/delete.svg) to delete an API token.

## Creating a new API token

To create a new API token:

1. Click on the **Create new API Token** button.
2. In the API token edition interface, configure the new API token:

    | Setting name   | Instructions                                                             |
    | -------------- | ------------------------------------------------------------------------ |
    | Name           | Write the name of the API token.                                         |
    | Description    | (optional) Write a description for the API token.                        |
    | Token duration | Choose a token duration: *7 days*, *30 days*, *90 days*, or *Unlimited*. |
    | Token type     | Choose a token type: *Read-only*, *Full access*, or *Custom*.            |

3. (optional) For the *Custom* token type, define specific permissions for your API endpoints by clicking on the content-type name and using checkboxes to enable or disable permissions.
4. Click on the **Save** button. The new API token will be displayed at the top of the interface, along with a copy button![copy button](/img/assets/icons/duplicate.svg).

:::caution
For security reasons, API tokens are only shown right after they have been created. When refreshing the page or navigating elsewhere in the admin panel, the newly created API token will be hidden and will not be displayed again.
:::

## Regenerating an API token

To regenerate an API token:

1. Click on the API token's edit button.
2. Click on the **Regenerate** button.
3. Click on the **Regenerate** button to confirm in the dialog.
4. Copy the new API token displayed at the top of the interface.



# Viewing Audit Logs
Source: https://docs-v4.strapi.io/user-docs/settings/audit-logs

# Audit Logs  

The **Audit Logs** section provides a searchable and filterable display of all activities performed by users of the Strapi application.

Audit logs are only accessible to users with the **Super Admin** role by default. They are available in the **Administration Panel** section of the **Settings** panel.

## Events logged

The following events are logged:

| Event | Actions |
| --- | --- |
| Content Type | `create`, `update`, `delete` |
| Entry (draft/publish) | `create`, `update`, `delete`, `publish`, `unpublish` |
| Media | `create`, `update`, `delete` |
| Login / Logout | `success`, `fail` |
| Role / Permission | `create`, `update`, `delete` |
| User | `create`, `update`, `delete` |

For each log item the following information is displayed:

* **Action**: The type of action performed by the user. For example `create` or `update`.
* **Date**: The date and time of the action.
* **User**: The user who performed the action.
* **Details**: Displays a modal with more details about the action. For example the User IP address, the request body, or the response body.

## Filtering logs

The **Audit Logs** page displays all logs by default, in reverse chronological order. You can filter the logs by:

* **Action**: Select the type of action to filter by. For example `create` or `update`.
* **User**: Select the user to filter by.
* **Date**: Select a date (range) and time to filter by.

<!--
### Creating a custom filter

WiP

## Searching logs

Click the **Search** icon to search for a specific log. The search is performed on all log fields.
-->

## Log details

For any log item, click the **Details** icon to display a modal with more details about that action.

The **Payload** details are displayed in an interactive JSON component, enabling you to expand and collapse the JSON object.



# Configuring Users & Permissions plugin settings
Source: https://docs-v4.strapi.io/user-docs/settings/configuring-users-permissions-plugin-settings

# Configuring Users & Permissions plugin settings

The Users & Permissions plugin is managed from the *Users & Permissions plugin* settings section, accessible from ![Settings icon](/img/assets/icons/settings.svg) *Settings* in the main navigation of the admin panel. This settings section allows to configure the available providers, email templates and the advanced settings of the plugin. It also allows to define the end-users roles and their related permissions (see [Configuring end-user roles](../users-roles-permissions/configuring-end-users-roles.md)).

## Configuring providers

The Users & Permissions plugin allows to enable and configure providers, for end users to login via a third-party provider to access the content of a front-end application through the Strapi application API. By default, a list of providers is available including one, "Email", enabled by default for all Strapi applications with the Users & Permissions plugin installed.

To enable and configure a provider:

1. Go to the *Users & Permissions plugin > Providers* sub-section of the settings interface.
2. Click on the provider to enable and configure.
3. In the provider edition window, click on the **ON** button of the *Enable* option.
4. Fill in the provider's configurations. Each provider has its own specific set of configurations, detailed in our developer documentation (see [Setting up the provider](/dev-docs/plugins/users-permissions#setting-up-the-provider---examples)).
5. Click on the **Save** button.

:::note
Other providers that are not proposed by default by Strapi can be added manually through the code of your Strapi application (see [Developer documentation](/dev-docs/providers)).
:::

<!---
:::tip
Click the search button ![Search icon](/img/assets/icons/search.svg) above the table to use a text search and find one of your providers more quickly!
:::
--->

## Configuring email templates

The Users & Permissions plugin uses 2 email templates, "Email address confirmation" and "Reset password", that are sent to end users:

- if their account must be confirmed to be activated,
- if they need to reset the password of their Strapi account.

To configure and edit email templates:

1. Go to the *Users & Permissions plugin > Email templates* sub-section of the settings interface.
2. Click on the name of the email template to configure and edit.
3. Configure the email template:

| Setting name   | Instructions |
|--------------- | ----------------------------------------------- |
| Shipper name   | Indicate the name of the shipper of the email.                                                   |
| Shipper email  | Indicate the email address of the shipper of the email.                                          |
| Response email | (optional) Indicate the email address to which responses emails from the end users will be sent. |
| Subject        | Write the subject of the email. Variables can be used (see [Developer documentation](https://strapi.io/documentation/developer-docs/latest/development/plugins/users-permissions.html#templating-emails)).             |

4. Edit the content of the email in the "Message" textbox. Email templates content is in HTML and uses variables (see [Developer documentation](https://docs.strapi.io/developer-docs/latest/plugins/users-permissions.html#templating-emails)).
5. Click on the **Save** button.

## Configuring advanced settings

All settings related to the Users & Permissions plugin are managed from the *Advanced Settings* sub-section, including the choice of a default role for end users, the enablement of sign-ups and email confirmation, as well as the choice of landing page for resetting a password.

1. Go to the *Users & Permissions plugin > Advanced settings* sub-section of the settings interface.
2. Configure the settings:

| Setting name  | Instructions         |
| ------------------------------------ | --------------------------------------------------------------|
| Default role for authenticated users | Click the drop-down list to choose the default role for new end users.                                                                                             |
| One account per email address        | Click on the **ON** button to limit to 1 the number of end-user accounts with the same email address. Click on **OFF** to disable this limitation and allow several end-user accounts to be associated with the same email address (e.g. `kai.doe@strapi.io` can be used when logging in via several different providers).  |
| Enable sign-ups                      | Click on the **ON** button to enable end-user sign-ups. Click on **OFF** to prevent end-user registration to your front-end application(s).                        |
| Reset password page                  | Indicate the URL of the reset password page for your front-end application(s).                                                                                     |
| Enable email confirmation            | Click on the **ON** button to enable end-user account confirmation by sending them a confirmation email. Click on **OFF** to disable account confirmation.         |
| Redirection url                      | Indicate the URL of the page where end users should be redirected after confirming their Strapi account.                                                           |

3. Click the **Save** button.



# Internationalization
Source: https://docs-v4.strapi.io/user-docs/settings/internationalization

# Configuring Internationalization locales

The [Internationalization plugin](/user-docs/plugins/strapi-plugins.md#-internationalization-plugin) allows to manage content in different languages, called "locales". Once the Internationalization plugin is installed in a Strapi application (see [Installing plugins via the Marketplace](/user-docs/plugins/installing-plugins-via-marketplace.md)), administrators can manage locales from ![Settings icon](/img/assets/icons/settings.svg) *Settings > Global settings > Internationalization*.

The *Internationalization* settings sub-section displays a table listing all locales available for the Strapi application. By default, only the English locale is configured and set as the default locale. 

For each locale, the table displays the default ISO code of the locale, its optional display name and indicates if the locale is set as the default one. From the table, administrators can also:

- Click on the edit button ![Edit icon](/img/assets/icons/edit.svg) to edit a locale
- Click on the delete button ![Delete icon](/img/assets/icons/delete.svg) to delete a locale

## Adding a new locale

Administrators can add and manage as many locales as they want. There can however only be one locale set as the default one for the whole Strapi application.

:::note
It is not possible to create custom locales. Locales can only be created based on [the 500+ pre-created list of locales](https://github.com/strapi/strapi/blob/v4.0.0/packages/plugins/i18n/server/constants/iso-locales.json) set by Strapi.
:::

To add a new locale:

1. Click on the **Add new locale** button.
2. In the locale addition window, choose your new locale among the *Locales* drop-down list. The latter lists alphabetically all locales, displayed as their ISO code, that can be added to your Strapi application.
3. (optional) In the *Locale display name* textbox, write a new display name for your new locale.
4. (optional) In the Advanced settings tab, tick the *Set as default locale* setting to make your new locale the default one for your Strapi application.
5. Click on the **Save** button to confirm the addition of your new locale.



# Introduction to General Settings
Source: https://docs-v4.strapi.io/user-docs/settings/introduction

The ![Settings icon](/img/assets/icons/settings.svg) _Settings_ section in the main navigation of the admin panel includes all the required set-up information that determines how an administrator interacts with and manages their Strapi application. 

The following table lists the 4 Settings sub-sections, available settings in each sub-section, and corresponding links on this user guide to access detailed information:

| Sub Section                | Where to find information|
| -------------------------- ||
| Global Settings            | <ul> <li>[Customize logo](/user-docs/settings/admin-panel) </li> <li>[Manage and regenerate API tokens](/user-docs/settings/API-tokens) </li> <li>[Manage content in different languages](/user-docs/settings/internationalization) </li> <li>[Configure assets uploaded in Strapi application](/user-docs/settings/media-library-settings) </li> <li>[Manage and adjust workflows for your team](/user-docs/settings/review-workflows) </li> <li>[Configure Single Sign-on to authenticate administrators on your Strapi application](/user-docs/settings/single-sign-on)</li> <li>[Manage Transfer Token](/user-docs/settings/transfer-tokens)</li> </ul> |
| Administration panel       | <ul> <li>[Manage administrator Roles](/user-docs/users-roles-permissions/configuring-administrator-roles)</li> <li>[Manage administrator accounts](/user-docs/users-roles-permissions/managing-administrators)</li> <li>[View Audit Logs](/user-docs/settings/audit-logs)</li> </ul>                                                                                                                                                                                                                                                                                                                                                                        |
| Email plugin               | <ul> <li>[Configure Email plugin](/user-docs/plugins/strapi-plugins#-email-plugin)</li> </ul>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               |
| Users & Permissions plugin | <ul> <li>[Configure end-users Roles](/user-docs/users-roles-permissions/configuring-end-users-roles)</li> <li>[Configure Providers](/user-docs/settings/configuring-users-permissions-plugin-settings#configuring-providers)</li> <li>[Configure Email templates](/user-docs/settings/configuring-users-permissions-plugin-settings#configuring-email-templates) <li>[Configure Advanced Settings](/user-docs/settings/configuring-users-permissions-plugin-settings#configuring-advanced-settings)</li></li></ul>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  |



# Media Library
Source: https://docs-v4.strapi.io/user-docs/settings/media-library-settings

# Configuring the Media Library

The [Media Library](/user-docs/media-library) displays all assets uploaded in the Strapi application. The Media Library settings allow controlling the format, file size, and orientation of uploaded assets. Those settings can be configured from ![Settings icon](/img/assets/icons/settings.svg) *Settings > Global settings > Media Library*.

To configure the Media Library settings:

1. Go to the *Global settings > Media Library* sub-section of the settings interface.
2. Define your chosen new settings:

    | Setting name   | Instructions   | Default value |
    | -------------------------- | ----------------------- |---------------|
    | Responsive friendly upload | Enabling this option will generate multiple formats (small, medium and large) of the uploaded asset. | True          |
    | Size optimization          | Enabling this option will reduce the image size and slightly reduce its quality.                     | True          |
    | Auto orientation           | Enabling this option will automatically rotate the image according to EXIF orientation tag.          | False         |

3. Click on the **Save** button.



# Review Workflows
Source: https://docs-v4.strapi.io/user-docs/settings/review-workflows

# Managing Review Workflows  

The Review Workflows feature allows you to create and manage workflows for your various content-types. Each workflow can consist of any review stages for your content, enabling your team to collaborate in the content creation flow from draft to publication.

In many organizations different teams review different parts of content. By using different review workflows for different content-types, it is possible to adjust each workflow to the needs of each team involved.

The default workflow is configured to have 4 stages: To do, In progress, Ready to review, and Reviewed. All 4 stages can be edited, reordered or deleted as needed, and it is also possible to add new stages.

Before being available in the [Content Manager](/user-docs/content-manager/reviewing-content), review workflows must be configured from ![Settings icon](/img/assets/icons/settings.svg) _Settings > Global settings > Review Workflows_. The Review workflows settings are only available to users with the Super Admin role by default. Other roles must be granted the **Review workflows** permissions. See [Users, Roles, & Permissions](/user-docs/users-roles-permissions) for more information.

## Creating or editing a workflow

1. Click on the **Create new workflow** button or on the edit button ![Edit icon](/img/assets/icons/edit.svg) of a workflow.
2. In the workflow edit interface, configure the new workflow:

   | Setting name  | Instructions                                                           |
   | ------------- | ---------------------------------------------------------------------- |
   | Name          | Write a unique name of workflow.                                       |
   | Content-Types | (optional) Assign this workflow to one or more existing content-types. |
   | Stages        | Add review stages (see [Adding a new stage](#adding-a-new-stage)).     |

3. Click on the **Save** button. The new workflow will be displayed in the list-view and for every content-type assigned.

:::note
The maximum number of [workflows and stages per workflow is limited](https://strapi.io/pricing-cloud).
:::

### Adding a new stage

To add a new stage in the review workflows:

1. Click on the **Add new stage** button.
2. Write the _Stage name_.
3. Select a _Color_.
4. Select _Roles_ that can change the stage, if the entity is currently in that review stage.
5. Click on the **Save** button.

By default new stages are appended, but they can be reordered anytime using the ![drag & drop](/img/assets/icons/drag.svg) button.

:::tip
To set up roles for each stage, you can either click "Apply to all stages" to apply the current roles to all other stages of the workflow or use "Duplicate stage" of the stage context menu.
:::

### Duplicating a stage

1. Click **Duplicate Stage** in the context menu of the stage.
2. Change the name of the duplicated stage.
3. Click on the **Save** button.

### Deleting a stage

1. Click ![Delete](/img/assets/icons/delete.svg) in the context menu of the stage.
2. Click on the **Save** button: a confirmation modal will appear to confirm the deletion, in case the stage has previously been saved.

If you delete a stage that has pending reviews, the reviews will be moved to first stage in the workflow. Every workflow needs to
contain at least one stage and therefore it is not possible to delete the last stage.

## Deleting a workflow

To delete a workflow click on the delete button ![Delete icon](/img/assets/icons/delete.svg) of a workflow in the list view.

:::note
It is not possible to delete the last workflow.
:::



# Single Sign-On
Source: https://docs-v4.strapi.io/user-docs/settings/single-sign-on

# Configuring Single Sign-On (SSO) 

Single Sign-On (SSO) can be made available on a Strapi application to allow administrators to authenticate through an identity provider (e.g. Microsoft Azure Active Directory). SSO configurations can be done from ![Settings icon](/img/assets/icons/settings.svg) *Settings > Global settings > Single Sign-On*.

To configure the SSO feature settings:

1. Go to the *Global settings > Single Sign-On* sub-section of the settings interface.
2. Define your chosen new settings:

| Setting name      | Instructions      |
| ----------------- | ---------------------|
| Auto-registration | Click on **True** to allow the automatic creation of a new Strapi administrator when an SSO login does not match an existing Strapi administrator account. If this setting is set on **False**, new Strapi administrators accounts must be created manually beforehand. |
| Default role      | Choose among the drop-down list the role to attribute by default to auto-registered Strapi administrators through SSO login.           |
| Local authentication lock-out | Choose among the drop-down list the [roles](/user-docs/users-roles-permissions) for which the local authentication capabilities are disabled.<br />Users locked out of local authentication will be forced to use SSO to login and will not be able to change or reset their password. |

3. Click the **Save** button.

:::danger
Don't select _Super Admin_ in the roles list for the _Local authentication lock-out_. If _Super Admin_ is selected, it becomes possible to accidentally lock oneself out of the Strapi admin panel entirely. A fix will be provided soon.

In the meantime, the only way to get in if the Super Admin can't log in is to temporarily disable the SSO feature entirely, log in with username and password to remove the _Super Admin_ role from the _Local authentication lock-out_ list, and then re-enable SSO.
:::



# Transfer tokens
Source: https://docs-v4.strapi.io/user-docs/settings/transfer-tokens

# Managing transfer tokens

:::prerequisites
* Administrators can create, read, update, or delete transfer tokens only if proper permissions are granted (see [Configuring administrator roles](/user-docs/users-roles-permissions/configuring-administrator-roles#plugins-and-settings)).
* The *Global settings > Transfer Tokens* sub-section of the settings interface is accessible in the admin panel only if the _Transfer tokens > Read_ permission is granted.
* A `transfer.token.salt` should be defined in the admin panel configuration file (see [Developer Documentation](/dev-docs/configurations/admin-panel)).
:::

Transfer tokens allow users to authorize the `strapi transfer` CLI command (see [Developer Documentation](/dev-docs/data-management/transfer)). Administrators can manage API tokens from ![Settings icon](/img/assets/icons/settings.svg) *Settings > Global settings > Transfer Tokens*.

The *Transfer Tokens* settings sub-section displays a table listing all of the created Transfer tokens.

The table displays each Transfer token's name, description, date of creation, and date of last use. From the table, administrators can also:

- Click on the ![edit button](/img/assets/icons/edit.svg) to edit a transfer token's name, description, or type, or [regenerate the token](#regenerating-a-transfer-token).
- Click on the ![delete button](/img/assets/icons/delete.svg) to delete a Transfer token.

## Creating a new transfer token

To create a new Transfer token:

1. Click on the **Create new Transfer Token** button.
2. In the Transfer token edition interface, configure the new Transfer token:

    | Setting name   | Instructions                                                                  |
    | -------------- | ----------------------------------------------------------------------------- |
    | Name           | Write the name of the Transfer token.                                         |
    | Description    | (optional) Write a description for the Transfer token.                        |
    | Token duration | Choose a token duration: *7 days*, *30 days*, *90 days*, or *Unlimited*.      |
    | Token type | Choose a token type:<ul><li>*Push* to allow transfers from local to remote instances only,</li><li>*Pull* to allow transfers from remote to local instances only,</li><li>or *Full Access* to allow both types of transfer.</li></ul>      |

3. Click on the **Save** button. The new Transfer token will be displayed at the top of the interface, along with a copy button ![copy button](/img/assets/icons/duplicate.svg).

:::caution
For security reasons, Transfer tokens are only shown right after they have been created. When refreshing the page or navigating elsewhere in the admin panel, the newly created Transfer token will be hidden and will not be displayed again.
:::

## Regenerating a Transfer token

To regenerate an Transfer token:

1. Click on the Transfer token's edit button.
2. Click on the **Regenerate** button.
3. Click on the **Regenerate** button to confirm in the dialog.
4. Copy the new Transfer token displayed at the top of the interface.


