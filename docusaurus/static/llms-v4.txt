# Strapi v4 Documentation

- [Account billing & invoices](https://docs-v4.strapi.io/cloud/account/account-billing): Manage billing details and invoices for Strapi Cloud account.
- [Profile settings](https://docs-v4.strapi.io/cloud/account/account-settings): Manage Strapi Cloud account settings.
- [Database](https://docs-v4.strapi.io/cloud/advanced/database): Configure your own database on Strapi Cloud.
- [Email Provider](https://docs-v4.strapi.io/cloud/advanced/email): Configure Strapi Cloud to use a third-party email provider.
- [Upload Provider](https://docs-v4.strapi.io/cloud/advanced/upload): Configure Strapi Cloud to use a third-party upload provider.
- [Command Line Interface (CLI) <NewBadge />](https://docs-v4.strapi.io/cloud/cli/cloud-cli): Strapi Cloud comes with a Command Line Interface (CLI) which allows you to log in and out, and to deploy a local project without it having to be hoste...
- [Caching & Performance](https://docs-v4.strapi.io/cloud/getting-started/caching): For Strapi Cloud applications with large amounts of cacheable content, such as images, videos, and other static assets, enabling CDN (Content Delivery...
- [Strapi Cloud fundamentals](https://docs-v4.strapi.io/cloud/getting-started/cloud-fundamentals): Before going any further into this Strapi Cloud documentation, we recommend you to acknowledge the main concepts below. They will help you to understa...
- [with Cloud dashboard](https://docs-v4.strapi.io/cloud/getting-started/deployment): Learn how to deploy your Strapi application on Strapi Cloud.
- [with Cloud dashboard](https://docs-v4.strapi.io/cloud/getting-started/deployment): Learn how to deploy your Strapi application on Strapi Cloud.
- [with Cloud CLI](https://docs-v4.strapi.io/cloud/getting-started/deployment-cli): Learn how to deploy your Strapi application via the CLI.
- [Welcome to the Strapi Cloud Docs!](https://docs-v4.strapi.io/cloud/getting-started/intro): <SubtleCallout title="Developer Docs, User Guide, and Strapi Cloud documentation" emoji="📍">
- [Information on billing & usage](https://docs-v4.strapi.io/cloud/getting-started/usage-billing): This page contains general information related to the usage and billing of your Strapi Cloud account and projects.
- [Collaboration](https://docs-v4.strapi.io/cloud/projects/collaboration): Share your projects on Strapi Cloud to collaborate with others.
- [Deployments management](https://docs-v4.strapi.io/cloud/projects/deploys): Manage your projects's deploys.
- [Deploy history & logs](https://docs-v4.strapi.io/cloud/projects/deploys-history): View projects' deploy history and logs.
- [Notifications](https://docs-v4.strapi.io/cloud/projects/notifications): View your notifications on Strapi Cloud.
- [Projects overview](https://docs-v4.strapi.io/cloud/projects/overview): View and manage your projects on Strapi Cloud.
- [Runtime logs](https://docs-v4.strapi.io/cloud/projects/runtime-logs): View runtime logs of Strapi Cloud project.
- [Project settings](https://docs-v4.strapi.io/cloud/projects/settings): View and manage your projects on Strapi Cloud.
- [Admin panel customization](https://docs-v4.strapi.io/dev-docs/admin-panel-customization): The administration panel of Strapi can be customized according to your needs, so you can make it reflect your identity.
- [Strapi Content API](https://docs-v4.strapi.io/dev-docs/api/content-api): Once you've created and configured a Strapi project, created a data structure with the [Content-Type Builder](/user-docs/content-type-builder) and sta...
- [Entity Service API](https://docs-v4.strapi.io/dev-docs/api/entity-service): The Entity Service is the layer that handles Strapi's complex data structures like components and dynamic zones, and uses the Query Engine API under the hood to execute database queries.
- [Components and Dynamic Zones](https://docs-v4.strapi.io/dev-docs/api/entity-service/components-dynamic-zones): Use Strapi's Entity Service to create and update components and dynamic zones.
- [CRUD operations](https://docs-v4.strapi.io/dev-docs/api/entity-service/crud): Use Strapi's Entity Service API to perform CRUD (create, read, update, delete) operations on your content.
- [Filtering](https://docs-v4.strapi.io/dev-docs/api/entity-service/filter): Use Strapi's Entity Service API to filter your queries results.
- [Ordering & Pagination](https://docs-v4.strapi.io/dev-docs/api/entity-service/order-pagination): Use Strapi's Entity Service API to order and paginate queries results.
- [Populating](https://docs-v4.strapi.io/dev-docs/api/entity-service/populate): Use Strapi's Entity Service API to populate relations in your queries.
- [GraphQL API](https://docs-v4.strapi.io/dev-docs/api/graphql): :::prerequisites
- [Admin Panel API for plugins](https://docs-v4.strapi.io/dev-docs/api/plugins/admin-panel-api): A Strapi [plugin](/dev-docs/plugins) can interact with both the [back end](/dev-docs/api/plugins/server-api) and the front end of a Strapi application...
- [Server API for plugins](https://docs-v4.strapi.io/dev-docs/api/plugins/server-api): Strapi's Server API for plugins allows a Strapi plugin to customize the back end part (i.e. the server) of your application.
- [Query Engine API](https://docs-v4.strapi.io/dev-docs/api/query-engine): Strapi provides a Query Engine API to give unrestricted internal access to the database layer at a lower level.
- [Bulk Operations](https://docs-v4.strapi.io/dev-docs/api/query-engine/bulk-operations): Use Strapi's Query Engine API to perform operations on multiple entries.
- [Filtering](https://docs-v4.strapi.io/dev-docs/api/query-engine/filtering): Use Strapi's Query Engine API to filter the results of your queries.
- [Ordering & Pagination](https://docs-v4.strapi.io/dev-docs/api/query-engine/order-pagination): Use Strapi's Query Engine API to order and paginate the results of your queries.
- [Populating](https://docs-v4.strapi.io/dev-docs/api/query-engine/populating): Use Strapi's Query Engine API to populate relations when querying your content.
- [Single Operations](https://docs-v4.strapi.io/dev-docs/api/query-engine/single-operations): Use Strapi's Query Engine API to perform operations on single entries.
- [REST API reference](https://docs-v4.strapi.io/dev-docs/api/rest): Interact with your Content-Types using the REST API endpoints Strapi generates for you.
- [Filters, Locale, and Publication State](https://docs-v4.strapi.io/dev-docs/api/rest/filters-locale-publication): Use Strapi's REST API to filter the results of your requests.
- [REST API Guides](https://docs-v4.strapi.io/dev-docs/api/rest/guides/intro): Deep dive into some specific REST API topics using guides that extensively explain some use cases or give step-by-step instructions.
- [How to populate creator fields](https://docs-v4.strapi.io/dev-docs/api/rest/guides/populate-creator-fields): Learn how to populate creator fields such as createdBy and updatedBy by creating a custom controller that leverages the populate parameter.
- [Understanding populate](https://docs-v4.strapi.io/dev-docs/api/rest/guides/understanding-populate): Learn what populating means and how you can use the populate parameter in your REST API queries to add additional fields to your responses.
- [Interactive Query Builder](https://docs-v4.strapi.io/dev-docs/api/rest/interactive-query-builder): Use an interactive tool that leverages the querystring library to build your query URL
- [Interactive Query Builder](https://docs-v4.strapi.io/dev-docs/api/rest/interactive-query-builder): Use an interactive tool that leverages the querystring library to build your query URL
- [Parameters](https://docs-v4.strapi.io/dev-docs/api/rest/parameters): Use API parameters to refine your Strapi REST API queries.
- [Parameters](https://docs-v4.strapi.io/dev-docs/api/rest/parameters): Use API parameters to refine your Strapi REST API queries.
- [Populate and Select](https://docs-v4.strapi.io/dev-docs/api/rest/populate-select): Use Strapi's REST API to populate or select certain fields.
- [Relations](https://docs-v4.strapi.io/dev-docs/api/rest/relations): Use the REST API to manage the order of relations
- [Sort and Pagination](https://docs-v4.strapi.io/dev-docs/api/rest/sort-pagination): Use Strapi's REST API to sort or paginate your data.
- [Back-end customization](https://docs-v4.strapi.io/dev-docs/backend-customization): All elements of Strapi's back end, like routes, policies, middlewares, controllers, services, models, requests, responses, and webhooks, can be customized.
- [Controllers](https://docs-v4.strapi.io/dev-docs/backend-customization/controllers): import FeedbackCallout from '/docs/snippets/backend-customization-feedback-cta.md'
- [Backend Customization Examples Cookbook](https://docs-v4.strapi.io/dev-docs/backend-customization/examples): Learn how to use the core backend features of Strapi with the FoodAdvisor deployment
- [Authentication flow with JWT](https://docs-v4.strapi.io/dev-docs/backend-customization/examples/authentication): Learn how to authenticate REST API queries using our FoodAdvisor example
- [Custom middlewares](https://docs-v4.strapi.io/dev-docs/backend-customization/examples/middlewares): Learn how to use custom middlewares using our FoodAdvisor example
- [Custom policies](https://docs-v4.strapi.io/dev-docs/backend-customization/examples/policies): Learn how to create custom policies using our FoodAdvisor example
- [Custom routes](https://docs-v4.strapi.io/dev-docs/backend-customization/examples/routes): Learn how to use custom routes using our FoodAdvisor example
- [Custom services and controllers](https://docs-v4.strapi.io/dev-docs/backend-customization/examples/services-and-controllers): Learn how to authenticate use custom services and controllers using our FoodAdvisor example
- [Middlewares](https://docs-v4.strapi.io/dev-docs/backend-customization/middlewares): import FeedbackCallout from '/docs/snippets/backend-customization-feedback-cta.md'
- [Models](https://docs-v4.strapi.io/dev-docs/backend-customization/models): Strapi models (i.e. content-types, components, and dynamic zones) define a representation of the data structure.
- [Policies](https://docs-v4.strapi.io/dev-docs/backend-customization/policies): Strapi policies are functions that execute specific logic on each request before it reaches the controller. Policies can be customized according to your needs.
- [Requests and Responses](https://docs-v4.strapi.io/dev-docs/backend-customization/requests-responses): Learn more about requests and responses for Strapi, the most popular headless CMS.
- [Routes](https://docs-v4.strapi.io/dev-docs/backend-customization/routes): Strapi routes handle requests to your content and are auto-generated for your content-types. Routes can be customized according to your needs.
- [Services](https://docs-v4.strapi.io/dev-docs/backend-customization/services): Strapi services are a set of reusable functions, useful to simplify controllers logic.
- [Webhooks](https://docs-v4.strapi.io/dev-docs/backend-customization/webhooks): Strapi webhooks are user-defined HTTP callbacks used by an application to notify other applications that an event occurred.
- [Command Line Interface](https://docs-v4.strapi.io/dev-docs/cli): Strapi comes with a full featured Command Line Interface (CLI) which lets you scaffold and manage your project in seconds.
- [Configurations](https://docs-v4.strapi.io/dev-docs/configurations): Learn how you can manage and customize the configuration of your Strapi application.
- [Configurations](https://docs-v4.strapi.io/dev-docs/configurations): Learn how you can manage and customize the configuration of your Strapi application.
- [Admin panel](https://docs-v4.strapi.io/dev-docs/configurations/admin-panel): Strapi's admin panel offers a single entry point file for its configuration.
- [Admin panel](https://docs-v4.strapi.io/dev-docs/configurations/admin-panel): Strapi's admin panel offers a single entry point file for its configuration.
- [API calls configuration](https://docs-v4.strapi.io/dev-docs/configurations/api): Strapi's default API parameters can be configured.
- [API calls configuration](https://docs-v4.strapi.io/dev-docs/configurations/api): Strapi's default API parameters can be configured.
- [API tokens configuration](https://docs-v4.strapi.io/dev-docs/configurations/api-tokens): Using API tokens allows executing a request on Strapi's REST API endpoints as an authenticated user.
- [API tokens configuration](https://docs-v4.strapi.io/dev-docs/configurations/api-tokens): Using API tokens allows executing a request on Strapi's REST API endpoints as an authenticated user.
- [CRON jobs](https://docs-v4.strapi.io/dev-docs/configurations/cron): Strapi allows you to configure cron jobs for execution at specific dates and times, with optional reoccurrence rules.
- [CRON jobs](https://docs-v4.strapi.io/dev-docs/configurations/cron): Strapi allows you to configure cron jobs for execution at specific dates and times, with optional reoccurrence rules.
- [Database](https://docs-v4.strapi.io/dev-docs/configurations/database): Strapi offers a single entry point file to configure its databases.
- [Database](https://docs-v4.strapi.io/dev-docs/configurations/database): Strapi offers a single entry point file to configure its databases.
- [Environment variables](https://docs-v4.strapi.io/dev-docs/configurations/environment): Strapi provides environment variables that can be used in configuration files.  An `env()` utility can be used to [retrieve the value of environment v...
- [Environment variables](https://docs-v4.strapi.io/dev-docs/configurations/environment): Strapi provides environment variables that can be used in configuration files.  An `env()` utility can be used to [retrieve the value of environment v...
- [Features configuration](https://docs-v4.strapi.io/dev-docs/configurations/features): Enable experimental Strapi features
- [Features configuration](https://docs-v4.strapi.io/dev-docs/configurations/features): Enable experimental Strapi features
- [Lifecycle Functions](https://docs-v4.strapi.io/dev-docs/configurations/functions): Strapi includes lifecycle functions (e.g. register, bootstrap and destroy) that control the flow of your application.
- [Lifecycle Functions](https://docs-v4.strapi.io/dev-docs/configurations/functions): Strapi includes lifecycle functions (e.g. register, bootstrap and destroy) that control the flow of your application.
- [Access and cast environment variables](https://docs-v4.strapi.io/dev-docs/configurations/guides/access-cast-environment-variables): In most use cases there will be different configurations between environments (e.g. database credentials).
- [Access configuration values from the code](https://docs-v4.strapi.io/dev-docs/configurations/guides/access-configuration-values): All the [configuration files](/dev-docs/configurations) are loaded on startup and can be accessed through the `strapi.config` configuration provider.
- [Middlewares](https://docs-v4.strapi.io/dev-docs/configurations/middlewares): Strapi offers a single entry point file for its middlewares configurations.
- [Middlewares](https://docs-v4.strapi.io/dev-docs/configurations/middlewares): Strapi offers a single entry point file for its middlewares configurations.
- [Plugins configuration](https://docs-v4.strapi.io/dev-docs/configurations/plugins): Strapi plugins have a single entry point file to define their configurations.
- [Plugins configuration](https://docs-v4.strapi.io/dev-docs/configurations/plugins): Strapi plugins have a single entry point file to define their configurations.
- [Public assets configuration](https://docs-v4.strapi.io/dev-docs/configurations/public-assets): The public folder of Strapi is used for static files that you want to make accessible to the outside world.
- [Public assets configuration](https://docs-v4.strapi.io/dev-docs/configurations/public-assets): The public folder of Strapi is used for static files that you want to make accessible to the outside world.
- [Create new Role-Based Access Control (RBAC) conditions](https://docs-v4.strapi.io/dev-docs/configurations/rbac): In Strapi, RBAC is an approach to restricting access to some features of the admin panel to some users. The Community Edition of Strapi offers 3 default roles.
- [Create new Role-Based Access Control (RBAC) conditions](https://docs-v4.strapi.io/dev-docs/configurations/rbac): In Strapi, RBAC is an approach to restricting access to some features of the admin panel to some users. The Community Edition of Strapi offers 3 default roles.
- [Server configuration](https://docs-v4.strapi.io/dev-docs/configurations/server): Strapi offers a single entry point file for its server configuration.
- [Server configuration](https://docs-v4.strapi.io/dev-docs/configurations/server): Strapi offers a single entry point file for its server configuration.
- [Single Sign-on (SSO)](https://docs-v4.strapi.io/dev-docs/configurations/sso): Strapi's SSO allows you to configure additional sign-in and sign-up methods for your administration panel. It requires an Enterprise Edition with a Gold plan.
- [Single Sign-on (SSO)](https://docs-v4.strapi.io/dev-docs/configurations/sso): Strapi's SSO allows you to configure additional sign-in and sign-up methods for your administration panel. It requires an Enterprise Edition with a Gold plan.
- [TypeScript configuration](https://docs-v4.strapi.io/dev-docs/configurations/typescript): How to configure Strapi for TypeScript development.
- [TypeScript configuration](https://docs-v4.strapi.io/dev-docs/configurations/typescript): How to configure Strapi for TypeScript development.
- [Custom fields](https://docs-v4.strapi.io/dev-docs/custom-fields): Learn how you can use custom fields to extend Strapi's content-types capabilities.
- [Data management system](https://docs-v4.strapi.io/dev-docs/data-management): Import, export, and transfer data using the Strapi CLI
- [Data export](https://docs-v4.strapi.io/dev-docs/data-management/export): Export data using the Strapi CLI
- [Data import](https://docs-v4.strapi.io/dev-docs/data-management/import): Import data using the Strapi CLI
- [Data transfer](https://docs-v4.strapi.io/dev-docs/data-management/transfer): Transfer data using the Strapi CLI
- [Database migrations](https://docs-v4.strapi.io/dev-docs/database-migrations): Strapi database migrations are ways to modify the database
- [Deployment](https://docs-v4.strapi.io/dev-docs/deployment): Learn how to develop locally with Strapi and deploy Strapi with various hosting options.
- [AWS Deployment](https://docs-v4.strapi.io/dev-docs/deployment/amazon-aws): Learn in this guide how to deploy your Strapi application on AWS EC2, host your database on AWS RDS and upload your assets on AWS S3.
- [Azure Deployment](https://docs-v4.strapi.io/dev-docs/deployment/azure): Learn in this guide how to deploy your Strapi application on Microsoft Azure.
- [Caddy Proxying](https://docs-v4.strapi.io/dev-docs/deployment/caddy-proxy): Learn how you can use a proxy application like Caddy to secure your Strapi application.
- [DigitalOcean Droplet Deployment](https://docs-v4.strapi.io/dev-docs/deployment/digitalocean): Learn in this guide how to deploy your Strapi application on DigitalOcean Droplets.
- [DigitalOcean App Platform](https://docs-v4.strapi.io/dev-docs/deployment/digitalocean-app-platform): Learn in this guide how to deploy your Strapi application on DigitalOcean App Platform.
- [HAProxy Proxying](https://docs-v4.strapi.io/dev-docs/deployment/haproxy-proxy): Learn how you can use a proxy application like HAProxy to secure your Strapi application.
- [Heroku](https://docs-v4.strapi.io/dev-docs/deployment/heroku): Learn in this guide how to deploy your Strapi application on Heroku.
- [Hosting Guides](https://docs-v4.strapi.io/dev-docs/deployment/hosting-guides): Learn in this guide how to deploy your Strapi application.
- [Nginx Proxying](https://docs-v4.strapi.io/dev-docs/deployment/nginx-proxy): Learn how you can use a proxy application like Nginx to secure your Strapi application.
- [Optional Software Guides](https://docs-v4.strapi.io/dev-docs/deployment/optional-software-guides): Learn how to use proxy and process managers in your deployed Strapi application .
- [Process Manager](https://docs-v4.strapi.io/dev-docs/deployment/process-manager): How to install and start a Strapi application using a process manager.
- [Error handling](https://docs-v4.strapi.io/dev-docs/error-handling): With Strapi's error handling feature it's easy to send and receive errors in your application.
- [FAQ](https://docs-v4.strapi.io/dev-docs/faq): Find some answers and solutions to most common issues that you may experience when working with Strapi.
- [Installation](https://docs-v4.strapi.io/dev-docs/installation): Learn many different options to install Strapi and getting started on using it.
- [CLI](https://docs-v4.strapi.io/dev-docs/installation/cli): Fast-track local install for getting Strapi running on your computer in less than a minute.
- [Docker](https://docs-v4.strapi.io/dev-docs/installation/docker): Quickly create a Docker container from a local project.
- [Integrations](https://docs-v4.strapi.io/dev-docs/integrations): Integrate Strapi with a multitude of frameworks, frontend or backend programming languages.
- [11ty](https://docs-v4.strapi.io/dev-docs/integrations/11ty): Integrate Strapi with 11ty.
- [Angular](https://docs-v4.strapi.io/dev-docs/integrations/angular): Integrate Strapi with Angular.
- [Dart](https://docs-v4.strapi.io/dev-docs/integrations/dart): Integrate Strapi with Dart.
- [Flutter](https://docs-v4.strapi.io/dev-docs/integrations/flutter): Integrate Strapi with Flutter.
- [Gatsby](https://docs-v4.strapi.io/dev-docs/integrations/gatsby): Integrate Strapi with Gatsby.
- [Go](https://docs-v4.strapi.io/dev-docs/integrations/go): Integrate Strapi with Go.
- [GraphQL](https://docs-v4.strapi.io/dev-docs/integrations/graphql): Integrate Strapi with GraphQL.
- [Gridsome](https://docs-v4.strapi.io/dev-docs/integrations/gridsome): Integrate Strapi with Gridsome.
- [Jekyll](https://docs-v4.strapi.io/dev-docs/integrations/jekyll): Integrate Strapi with Jekyll.
- [Laravel](https://docs-v4.strapi.io/dev-docs/integrations/laravel): Integrate Strapi with Laravel.
- [Next.js](https://docs-v4.strapi.io/dev-docs/integrations/next-js): Integrate Strapi with Next.js.
- [Nuxt](https://docs-v4.strapi.io/dev-docs/integrations/nuxt-js): Integrate Strapi with Nuxt 3.
- [PHP](https://docs-v4.strapi.io/dev-docs/integrations/php): Integrate Strapi with PHP.
- [Python](https://docs-v4.strapi.io/dev-docs/integrations/python): Integrate Strapi with Python.
- [React](https://docs-v4.strapi.io/dev-docs/integrations/react): Integrate Strapi with React.
- [Ruby](https://docs-v4.strapi.io/dev-docs/integrations/ruby): Integrate Strapi with Ruby.
- [Sapper](https://docs-v4.strapi.io/dev-docs/integrations/sapper): Integrate Strapi with Sapper.
- [Svelte](https://docs-v4.strapi.io/dev-docs/integrations/svelte): Integrate Strapi with Svelte.
- [Vue.js](https://docs-v4.strapi.io/dev-docs/integrations/vue-js): Integrate Strapi with Vue.js.
- [Welcome to the Strapi Developer Docs!](https://docs-v4.strapi.io/dev-docs/intro): <SubtleCallout title="Developer Docs, User Guide, and Strapi Cloud documentation" emoji="📍">
- [Migration Guides](https://docs-v4.strapi.io/dev-docs/migration-guides): Migration guides for a Strapi v4 application.
- [Configuration](https://docs-v4.strapi.io/dev-docs/migration/v3-to-v4/code/configuration): Migrate your configuration from Strapi v3.6.x to v4.0.x with step-by-step instructions
- [Content-Type schema](https://docs-v4.strapi.io/dev-docs/migration/v3-to-v4/code/content-type-schema): Migrate your content-types from Strapi v3.6.x to v4.0.x with step-by-step instructions
- [Controllers](https://docs-v4.strapi.io/dev-docs/migration/v3-to-v4/code/controllers): Migrate controllers of a Strapi application from v3.6.x to v4.0.x
- [Dependencies](https://docs-v4.strapi.io/dev-docs/migration/v3-to-v4/code/dependencies): Migrate your dependencies from Strapi v3.6.x to v4.0.x with step-by-step instructions
- [Global middlewares](https://docs-v4.strapi.io/dev-docs/migration/v3-to-v4/code/global-middlewares): Migrate your global middlewares from Strapi v3.6.x to v4.0.x with step-by-step instructions
- [GraphQL resolvers](https://docs-v4.strapi.io/dev-docs/migration/v3-to-v4/code/graphql): Migrate GraphQL resolvers from Strapi v3.6.x to v4.0.x with step-by-step instructions
- [Policies](https://docs-v4.strapi.io/dev-docs/migration/v3-to-v4/code/policies): Migrate policies from Strapi v3.6.x to Strapi v4.0.x with step-by-step instructions
- [Route middlewares](https://docs-v4.strapi.io/dev-docs/migration/v3-to-v4/code/route-middlewares): Migrate route middlewares of a Strapi application from v3.6.x to v4.0.x
- [Routes](https://docs-v4.strapi.io/dev-docs/migration/v3-to-v4/code/routes): Migrate routes of a Strapi application from v3.6.x to v4.0.x
- [Services](https://docs-v4.strapi.io/dev-docs/migration/v3-to-v4/code/services): Migrate services of a Strapi application from v3.6.x to v4.0.x
- [Strapi global variable](https://docs-v4.strapi.io/dev-docs/migration/v3-to-v4/code/strapi-global): Migrate calls to the strapi global variable from Strapi v3.6.x to v4.0.x with step-by-step instructions
- [Theming](https://docs-v4.strapi.io/dev-docs/migration/v3-to-v4/code/theming): Migrate theme customizations from Strapi v3.6.x to v4.0.x with step-by-step instructions
- [Translations](https://docs-v4.strapi.io/dev-docs/migration/v3-to-v4/code/translations): Migrate translations from Strapi v3.6.x to v4.0.x with step-by-step instructions
- [Webpack configuration](https://docs-v4.strapi.io/dev-docs/migration/v3-to-v4/code/webpack): Migrate webpack configuration from Strapi v3.6.x to v4.0.x with step-by-step instructions
- [WYSIWYG customizations](https://docs-v4.strapi.io/dev-docs/migration/v3-to-v4/code/wysiwyg): Migrate WYSIWYG customizations from Strapi v3.6.x to v4.0.x with step-by-step instructions
- [MongoDB v3 to SQL v3 migration](https://docs-v4.strapi.io/dev-docs/migration/v3-to-v4/data/mongo): Migrate from a MongoDB to a SQL database in Strapi v3
- [MongoDB vs. SQL cheatsheet](https://docs-v4.strapi.io/dev-docs/migration/v3-to-v4/data/mongo-sql-cheatsheet): Learn how MongoDB and SQL implementations differ in Strapi v3
- [SQL v3 to v4 migration](https://docs-v4.strapi.io/dev-docs/migration/v3-to-v4/data/sql): Migrate a SQL database from Strapi v3 to Strapi v4
- [SQL relations cheatsheet](https://docs-v4.strapi.io/dev-docs/migration/v3-to-v4/data/sql-relations): Learn how model schemas and entity relationship diagrams differ between Strapi v3 and v4
- [Enabling a plugin](https://docs-v4.strapi.io/dev-docs/migration/v3-to-v4/plugin/enable-plugin): Enable a Strapi plugin while migrating from v3.6.x to v4.0.x with step-by-step instructions
- [Migrating the back end](https://docs-v4.strapi.io/dev-docs/migration/v3-to-v4/plugin/migrate-back-end): Migrate the backend of a Strapi plugin from v3.6.x to v4.0.x with step-by-step instructions
- [Migrating the front end](https://docs-v4.strapi.io/dev-docs/migration/v3-to-v4/plugin/migrate-front-end): Migrate the front end of a Strapi plugin from v3.6.x to v4.0.x with step-by-step instructions
- [Updating the folder structure](https://docs-v4.strapi.io/dev-docs/migration/v3-to-v4/plugin/update-folder-structure): Migrate the folder structure of a Strapi plugin from v3.6.x to v4.0.x with step-by-step instructions
- [Plugins](https://docs-v4.strapi.io/dev-docs/plugins): Strapi comes with built-in plugins (i18n, GraphQL, Users & Permissions, Upload, API documentation, and Email) and you can install plugins as npm packages.
- [Plugins extension](https://docs-v4.strapi.io/dev-docs/plugins-extension): Strapi comes with [plugins](/dev-docs/plugins) that can be installed from the [Marketplace](/user-docs/plugins/installing-plugins-via-marketplace#inst...
- [Developing plugins](https://docs-v4.strapi.io/dev-docs/plugins/developing-plugins): Generation introduction about Strapi plugins development
- [Plugin creation & setup](https://docs-v4.strapi.io/dev-docs/plugins/development/create-a-plugin): Learn how to create a Strapi plugin and how to start the development servers
- [Plugin CLI](https://docs-v4.strapi.io/dev-docs/plugins/development/plugin-cli): Reference documentation for Strapi's Plugin CLI commands
- [Plugin structure](https://docs-v4.strapi.io/dev-docs/plugins/development/plugin-structure): Learn more about the structure of a Strapi plugin
- [Documentation](https://docs-v4.strapi.io/dev-docs/plugins/documentation): By using Swagger UI, the API documentation plugin takes out most of your pain to generate your documentation.
- [Email](https://docs-v4.strapi.io/dev-docs/plugins/email): Send email from your server or externals providers.
- [GraphQL](https://docs-v4.strapi.io/dev-docs/plugins/graphql): Use a GraphQL endpoint in your Strapi project to fetch and mutate your content.
- [How to pass data from server to admin panel with a Strapi plugin](https://docs-v4.strapi.io/dev-docs/plugins/guides/pass-data-from-server-to-admin): Learn how to pass data from server to admin panel with a Strapi plugin
- [How to store and access data from a Strapi plugin](https://docs-v4.strapi.io/dev-docs/plugins/guides/store-and-access-data): Learn how to store and access data from a Strapi plugin
- [How to use the Plugin CLI to build and publish a Strapi plugin](https://docs-v4.strapi.io/dev-docs/plugins/guides/use-the-plugin-cli): Learn how to use the Plugin CLI to build and publish a Strapi plugin
- [Internationalization (i18n)](https://docs-v4.strapi.io/dev-docs/plugins/i18n): Instructions on how to use Strapi Content API with the Internationalization (i18n) optional plugin
- [Sentry](https://docs-v4.strapi.io/dev-docs/plugins/sentry): Track errors in your Strapi application.
- [Upload](https://docs-v4.strapi.io/dev-docs/plugins/upload): Upload any kind of file on your server or external providers.
- [Users & Permissions](https://docs-v4.strapi.io/dev-docs/plugins/users-permissions): Protect your API with a full authentication process based on JWT and manage the permissions between the groups of users.
- [Using Strapi plugins](https://docs-v4.strapi.io/dev-docs/plugins/using-plugins): todo
- [Project structure](https://docs-v4.strapi.io/dev-docs/project-structure): Discover the project structure of any default Strapi application.
- [Providers](https://docs-v4.strapi.io/dev-docs/providers): Install and use providers to extend the functionality of available plugins.
- [Quick Start Guide - Strapi Developer Docs](https://docs-v4.strapi.io/dev-docs/quick-start): Get ready to get Strapi, your favorite open-source headless cms up and running in less than 3 minutes.
- [Setup and Deployment](https://docs-v4.strapi.io/dev-docs/setup-deployment): Strapi is meant to be installed on your local machine, then configured, and finally deployed to a remote environment. This documentation section descr...
- [TypeScript](https://docs-v4.strapi.io/dev-docs/typescript): Learn how you can use TypeScript for your Strapi application.
- [Upgrade Strapi version](https://docs-v4.strapi.io/dev-docs/update-version): The following documentation covers how to upgrade your application to the latest version of Strapi.
- [Usage information](https://docs-v4.strapi.io/dev-docs/usage-information): We are committed to providing a solution, with Strapi, that exceeds the expectations of the users and community. We are also committed to continuing to develop and make Strapi even better than it is today.
- [Including content in a release](https://docs-v4.strapi.io/user-docs/content-manager/adding-content-to-releases): Instructions to include content in a release
- [Configuring views of a content-type](https://docs-v4.strapi.io/user-docs/content-manager/configuring-view-of-content-type): Instructions to configure the edit view and list view of a content-type in a Strapi application.
- [Introduction to the Content Manager](https://docs-v4.strapi.io/user-docs/content-manager/introduction-to-content-manager): Introduction to the Content Manager which allows to write content for collection types and single types.
- [Managing relational fields](https://docs-v4.strapi.io/user-docs/content-manager/managing-relational-fields): Instructions to manage relation-type fields, called "relational fields", which establish a relation between two content-types.
- [Reviewing content](https://docs-v4.strapi.io/user-docs/content-manager/reviewing-content): Using review workflows to manage content throughout the content creation process.
- [Saving, publishing, and deleting content](https://docs-v4.strapi.io/user-docs/content-manager/saving-and-publishing-content): Instructions to manage content throughout its whole lifecycle, from the draft version to the deletion of the obsolete content.
- [Translating content](https://docs-v4.strapi.io/user-docs/content-manager/translating-content): Instructions to translate content in various locales with i18n plugin.
- [Writing Content](https://docs-v4.strapi.io/user-docs/content-manager/writing-content): Instructions to write content by filling up fields that are meant to contain specific content (e.g. text, numbers, media etc.).
- [Configuring fields for content-types](https://docs-v4.strapi.io/user-docs/content-type-builder/configuring-fields-content-type): :::note Development-only
- [Creating content-types](https://docs-v4.strapi.io/user-docs/content-type-builder/creating-new-content-type): :::note Development-only
- [Introduction to the Content-type Builder](https://docs-v4.strapi.io/user-docs/content-type-builder/introduction-to-content-types-builder): The Content-type Builder is a core plugin of Strapi. It is a feature that is always activated by default and cannot be deactivated. The Content-type B...
- [Managing content-types](https://docs-v4.strapi.io/user-docs/content-type-builder/managing-content-types): import ScreenshotNumberReference from '/src/components/ScreenshotNumberReference.jsx';
- [Setting up the admin panel](https://docs-v4.strapi.io/user-docs/getting-started/setting-up-admin-panel): How to setup your Strapi Admin Panel
- [User Guide fundamentals](https://docs-v4.strapi.io/user-docs/getting-started/user-guide-fundamentals): Here are some concepts to keep in mind
- [Welcome to the Strapi User Guide!](https://docs-v4.strapi.io/user-docs/intro): <SubtleCallout title="Developer Docs, User Guide, and Strapi Cloud documentation" emoji="📍">
- [Creating a release](https://docs-v4.strapi.io/user-docs/releases/creating-a-release): Instructions to create a release from the admin panel
- [Introduction to Releases](https://docs-v4.strapi.io/user-docs/releases/introduction): Introduction to the Releases feature that enables content managers to organize entries to publish/unpublish simultaneously
- [Managing a release](https://docs-v4.strapi.io/user-docs/releases/managing-a-release): Instructions on how to manage a Release from the admin panel
- [Overview & Custom logo](https://docs-v4.strapi.io/user-docs/settings/admin-panel): The default Strapi logos, displayed in the main navigation of a Strapi application and the authentication pages, can be modified from ![Settings icon]...
- [API tokens](https://docs-v4.strapi.io/user-docs/settings/API-tokens): :::prerequisites
- [Viewing Audit Logs](https://docs-v4.strapi.io/user-docs/settings/audit-logs): Reviewing the audit logs in Strapi.
- [Configuring Users & Permissions plugin settings](https://docs-v4.strapi.io/user-docs/settings/configuring-users-permissions-plugin-settings): The Users & Permissions plugin is managed from the *Users & Permissions plugin* settings section, accessible from ![Settings icon](/img/assets/icons/s...
- [Internationalization](https://docs-v4.strapi.io/user-docs/settings/internationalization): The [Internationalization plugin](/user-docs/plugins/strapi-plugins.md#-internationalization-plugin) allows to manage content in different languages, ...
- [Introduction to General Settings](https://docs-v4.strapi.io/user-docs/settings/introduction): Reviewing the audit logs in Strapi.
- [Media Library](https://docs-v4.strapi.io/user-docs/settings/media-library-settings): The [Media Library](/user-docs/media-library) displays all assets uploaded in the Strapi application. The Media Library settings allow controlling the...
- [Review Workflows](https://docs-v4.strapi.io/user-docs/settings/review-workflows): Managing your review workflows and stages in Strapi.
- [Single Sign-On](https://docs-v4.strapi.io/user-docs/settings/single-sign-on): Single Sign-On (SSO) can be made available on a Strapi application to allow administrators to authenticate through an identity provider (e.g. Microsof...
- [Transfer tokens](https://docs-v4.strapi.io/user-docs/settings/transfer-tokens): :::prerequisites